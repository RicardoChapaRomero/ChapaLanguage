Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM V M endProgram S END
Rule 2     endProgram -> <empty>
Rule 3     V -> DIM setType Idv AS T Arr
Rule 4     V -> empty
Rule 5     Arr -> OPENBRACKET arr_space CLOSINGBRACKET
Rule 6     Arr -> empty
Rule 7     arr_space -> EA COMA arr_space
Rule 8     arr_space -> ID COMA arr_space
Rule 9     arr_space -> EA
Rule 10    arr_space -> ID
Rule 11    T -> INT
Rule 12    T -> FLOAT
Rule 13    T -> WORD
Rule 14    S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S
Rule 15    S -> empty
Rule 16    fillSub -> <empty>
Rule 17    endProcedure -> <empty>
Rule 18    M -> F M
Rule 19    M -> empty
Rule 20    F -> E F
Rule 21    F -> empty
Rule 22    E -> LET setType Idv EQUALS Ex
Rule 23    E -> DIM setType Idv AS T Arr
Rule 24    E -> IF EL THEN first_conditional F Esf EIF final_conditional
Rule 25    E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
Rule 26    E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
Rule 27    E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional
Rule 28    E -> GOSUB ID
Rule 29    E -> INPUT IDEx
Rule 30    E -> PRINT Ex
Rule 31    for_assignation -> <empty>
Rule 32    for_conditional -> <empty>
Rule 33    for_save_conditional -> <empty>
Rule 34    for_conditional_end -> <empty>
Rule 35    repeat_conditional -> <empty>
Rule 36    while_first_conditional -> <empty>
Rule 37    while_second_conditional -> <empty>
Rule 38    while_final_conditional -> <empty>
Rule 39    first_conditional -> <empty>
Rule 40    second_conditional -> <empty>
Rule 41    final_conditional -> <empty>
Rule 42    Esf -> ELSE second_conditional F
Rule 43    Esf -> empty
Rule 44    Idv -> ID COMA Idv
Rule 45    Idv -> ID
Rule 46    Idv -> ID Arr
Rule 47    setType -> <empty>
Rule 48    IDEx -> ID
Rule 49    IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET
Rule 50    Ex -> EA
Rule 51    Ex -> EL
Rule 52    Ex -> ID
Rule 53    ES -> WORDVAL
Rule 54    EA -> EA PLUS P
Rule 55    EA -> EA MINUS P
Rule 56    EA -> P
Rule 57    P -> P MULTIPLY N
Rule 58    P -> P DIVIDE N
Rule 59    P -> N
Rule 60    N -> cte saveID
Rule 61    N -> ID saveID
Rule 62    N -> OPENPAR EA CLOSINGPAR
Rule 63    N -> ID Arr
Rule 64    saveID -> <empty>
Rule 65    cte -> FLOATVAL
Rule 66    cte -> INTVAL
Rule 67    cte -> MINUS INTVAL
Rule 68    cte -> MINUS FLOATVAL
Rule 69    EL -> TRUE
Rule 70    EL -> FALSE
Rule 71    EL -> OPENPAR O CLOSINGPAR
Rule 72    EL -> OPENPAR O CLOSINGPAR OL EL
Rule 73    OL -> AND
Rule 74    OL -> OR
Rule 75    OL -> NOT
Rule 76    O -> Ex GREATHER Ex
Rule 77    O -> Ex GREATHEREQUAL Ex
Rule 78    O -> Ex SMALLER Ex
Rule 79    O -> Ex SMALLEREQUAL Ex
Rule 80    O -> Ex NOTEQUAL Ex
Rule 81    O -> Ex EQUALTO Ex
Rule 82    O -> Ex error Ex
Rule 83    empty -> <empty>

Terminals, with rules where they appear

AND                  : 73
AS                   : 3 23
CLOSINGBRACKET       : 5 49
CLOSINGPAR           : 62 71 72
COMA                 : 7 8 44
COMMENT              : 
DIM                  : 3 23
DIVIDE               : 58
DO                   : 25 26
EIF                  : 24
ELSE                 : 42
END                  : 1
EQUALS               : 22 25
EQUALTO              : 81
FALSE                : 70
FLOAT                : 12
FLOATVAL             : 65 68
FOR                  : 25
GOSUB                : 28
GREATHER             : 76
GREATHEREQUAL        : 77
ID                   : 8 10 14 25 25 28 44 45 46 48 49 52 61 63
IF                   : 24
INPUT                : 29
INT                  : 11
INTVAL               : 66 67
LET                  : 22
MINUS                : 55 67 68
MULTIPLY             : 57
NEXT                 : 25
NOT                  : 75
NOTEQUAL             : 80
OPENBRACKET          : 5 49
OPENPAR              : 62 71 72
OR                   : 74
PLUS                 : 54
PRINT                : 30
PROGRAM              : 1
REPEAT               : 27
RETURN               : 14
SMALLER              : 78
SMALLEREQUAL         : 79
SUBPROCEDURE         : 14
THEN                 : 24
TO                   : 25
TRUE                 : 69
TWOPOINTS            : 14
UNTIL                : 27
WEND                 : 26
WHILE                : 26
WORD                 : 13
WORDVAL              : 53
error                : 82

Nonterminals, with rules where they appear

Arr                  : 3 23 46 63
E                    : 20
EA                   : 7 9 25 50 54 55 62
EL                   : 24 26 27 51 72
ES                   : 
Esf                  : 24
Ex                   : 22 25 30 76 76 77 77 78 78 79 79 80 80 81 81 82 82
F                    : 18 20 24 25 26 27 42
IDEx                 : 29
Idv                  : 3 22 23 44 49
M                    : 1 14 18
N                    : 57 58 59
O                    : 71 72
OL                   : 72
P                    : 54 55 56 57 58
PROGRAMA             : 0
S                    : 1 14
T                    : 3 23
V                    : 1
arr_space            : 5 7 8
cte                  : 60
empty                : 4 6 15 19 21 43
endProcedure         : 14
endProgram           : 1
fillSub              : 14
final_conditional    : 24
first_conditional    : 24
for_assignation      : 25
for_conditional      : 25
for_conditional_end  : 25
for_save_conditional : 25
repeat_conditional   : 27
saveID               : 60 61
second_conditional   : 42
setType              : 3 22 23 49
while_final_conditional : 26
while_first_conditional : 26 27
while_second_conditional : 26

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM V M endProgram S END

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . V M endProgram S END
    (3) V -> . DIM setType Idv AS T Arr
    (4) V -> . empty
    (83) empty -> .

  ! shift/reduce conflict for DIM resolved as shift
    DIM             shift and go to state 4
    LET             reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    FOR             reduce using rule 83 (empty -> .)
    WHILE           reduce using rule 83 (empty -> .)
    REPEAT          reduce using rule 83 (empty -> .)
    GOSUB           reduce using rule 83 (empty -> .)
    INPUT           reduce using rule 83 (empty -> .)
    PRINT           reduce using rule 83 (empty -> .)
    SUBPROCEDURE    reduce using rule 83 (empty -> .)
    END             reduce using rule 83 (empty -> .)

  ! DIM             [ reduce using rule 83 (empty -> .) ]

    V                              shift and go to state 3
    empty                          shift and go to state 5

state 3

    (1) PROGRAMA -> PROGRAM V . M endProgram S END
    (18) M -> . F M
    (19) M -> . empty
    (20) F -> . E F
    (21) F -> . empty
    (83) empty -> .
    (22) E -> . LET setType Idv EQUALS Ex
    (23) E -> . DIM setType Idv AS T Arr
    (24) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (25) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (26) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (27) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (28) E -> . GOSUB ID
    (29) E -> . INPUT IDEx
    (30) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    SUBPROCEDURE    reduce using rule 83 (empty -> .)
    END             reduce using rule 83 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 83 (empty -> .) ]
  ! DIM             [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! FOR             [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! REPEAT          [ reduce using rule 83 (empty -> .) ]
  ! GOSUB           [ reduce using rule 83 (empty -> .) ]
  ! INPUT           [ reduce using rule 83 (empty -> .) ]
  ! PRINT           [ reduce using rule 83 (empty -> .) ]

    M                              shift and go to state 6
    F                              shift and go to state 7
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 4

    (3) V -> DIM . setType Idv AS T Arr
    (47) setType -> .

    ID              reduce using rule 47 (setType -> .)

    setType                        shift and go to state 19

state 5

    (4) V -> empty .

    LET             reduce using rule 4 (V -> empty .)
    DIM             reduce using rule 4 (V -> empty .)
    IF              reduce using rule 4 (V -> empty .)
    FOR             reduce using rule 4 (V -> empty .)
    WHILE           reduce using rule 4 (V -> empty .)
    REPEAT          reduce using rule 4 (V -> empty .)
    GOSUB           reduce using rule 4 (V -> empty .)
    INPUT           reduce using rule 4 (V -> empty .)
    PRINT           reduce using rule 4 (V -> empty .)
    SUBPROCEDURE    reduce using rule 4 (V -> empty .)
    END             reduce using rule 4 (V -> empty .)


state 6

    (1) PROGRAMA -> PROGRAM V M . endProgram S END
    (2) endProgram -> .

    SUBPROCEDURE    reduce using rule 2 (endProgram -> .)
    END             reduce using rule 2 (endProgram -> .)

    endProgram                     shift and go to state 20

state 7

    (18) M -> F . M
    (18) M -> . F M
    (19) M -> . empty
    (20) F -> . E F
    (21) F -> . empty
    (83) empty -> .
    (22) E -> . LET setType Idv EQUALS Ex
    (23) E -> . DIM setType Idv AS T Arr
    (24) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (25) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (26) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (27) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (28) E -> . GOSUB ID
    (29) E -> . INPUT IDEx
    (30) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    SUBPROCEDURE    reduce using rule 83 (empty -> .)
    END             reduce using rule 83 (empty -> .)
    RETURN          reduce using rule 83 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 83 (empty -> .) ]
  ! DIM             [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! FOR             [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! REPEAT          [ reduce using rule 83 (empty -> .) ]
  ! GOSUB           [ reduce using rule 83 (empty -> .) ]
  ! INPUT           [ reduce using rule 83 (empty -> .) ]
  ! PRINT           [ reduce using rule 83 (empty -> .) ]

    F                              shift and go to state 7
    M                              shift and go to state 21
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 8

    (19) M -> empty .
    (21) F -> empty .

  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 19 (M -> empty .)
  ! reduce/reduce conflict for END resolved using rule 19 (M -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (M -> empty .)
    SUBPROCEDURE    reduce using rule 19 (M -> empty .)
    END             reduce using rule 19 (M -> empty .)
    RETURN          reduce using rule 19 (M -> empty .)
    LET             reduce using rule 21 (F -> empty .)
    DIM             reduce using rule 21 (F -> empty .)
    IF              reduce using rule 21 (F -> empty .)
    FOR             reduce using rule 21 (F -> empty .)
    WHILE           reduce using rule 21 (F -> empty .)
    REPEAT          reduce using rule 21 (F -> empty .)
    GOSUB           reduce using rule 21 (F -> empty .)
    INPUT           reduce using rule 21 (F -> empty .)
    PRINT           reduce using rule 21 (F -> empty .)

  ! SUBPROCEDURE    [ reduce using rule 21 (F -> empty .) ]
  ! END             [ reduce using rule 21 (F -> empty .) ]
  ! RETURN          [ reduce using rule 21 (F -> empty .) ]


state 9

    (20) F -> E . F
    (20) F -> . E F
    (21) F -> . empty
    (22) E -> . LET setType Idv EQUALS Ex
    (23) E -> . DIM setType Idv AS T Arr
    (24) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (25) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (26) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (27) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (28) E -> . GOSUB ID
    (29) E -> . INPUT IDEx
    (30) E -> . PRINT Ex
    (83) empty -> .

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    SUBPROCEDURE    reduce using rule 83 (empty -> .)
    END             reduce using rule 83 (empty -> .)
    RETURN          reduce using rule 83 (empty -> .)
    UNTIL           reduce using rule 83 (empty -> .)
    ELSE            reduce using rule 83 (empty -> .)
    EIF             reduce using rule 83 (empty -> .)
    WEND            reduce using rule 83 (empty -> .)
    NEXT            reduce using rule 83 (empty -> .)

  ! LET             [ reduce using rule 83 (empty -> .) ]
  ! DIM             [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! FOR             [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! REPEAT          [ reduce using rule 83 (empty -> .) ]
  ! GOSUB           [ reduce using rule 83 (empty -> .) ]
  ! INPUT           [ reduce using rule 83 (empty -> .) ]
  ! PRINT           [ reduce using rule 83 (empty -> .) ]

    E                              shift and go to state 9
    F                              shift and go to state 22
    empty                          shift and go to state 23

state 10

    (22) E -> LET . setType Idv EQUALS Ex
    (47) setType -> .

    ID              reduce using rule 47 (setType -> .)

    setType                        shift and go to state 24

state 11

    (23) E -> DIM . setType Idv AS T Arr
    (47) setType -> .

    ID              reduce using rule 47 (setType -> .)

    setType                        shift and go to state 25

state 12

    (24) E -> IF . EL THEN first_conditional F Esf EIF final_conditional
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 26

state 13

    (25) E -> FOR . ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end

    ID              shift and go to state 30


state 14

    (26) E -> WHILE . while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (36) while_first_conditional -> .

    TRUE            reduce using rule 36 (while_first_conditional -> .)
    FALSE           reduce using rule 36 (while_first_conditional -> .)
    OPENPAR         reduce using rule 36 (while_first_conditional -> .)

    while_first_conditional        shift and go to state 31

state 15

    (27) E -> REPEAT . while_first_conditional F UNTIL EL repeat_conditional
    (36) while_first_conditional -> .

    LET             reduce using rule 36 (while_first_conditional -> .)
    DIM             reduce using rule 36 (while_first_conditional -> .)
    IF              reduce using rule 36 (while_first_conditional -> .)
    FOR             reduce using rule 36 (while_first_conditional -> .)
    WHILE           reduce using rule 36 (while_first_conditional -> .)
    REPEAT          reduce using rule 36 (while_first_conditional -> .)
    GOSUB           reduce using rule 36 (while_first_conditional -> .)
    INPUT           reduce using rule 36 (while_first_conditional -> .)
    PRINT           reduce using rule 36 (while_first_conditional -> .)
    UNTIL           reduce using rule 36 (while_first_conditional -> .)

    while_first_conditional        shift and go to state 32

state 16

    (28) E -> GOSUB . ID

    ID              shift and go to state 33


state 17

    (29) E -> INPUT . IDEx
    (48) IDEx -> . ID
    (49) IDEx -> . ID OPENBRACKET setType Idv CLOSINGBRACKET

    ID              shift and go to state 35

    IDEx                           shift and go to state 34

state 18

    (30) E -> PRINT . Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    Ex                             shift and go to state 36
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 19

    (3) V -> DIM setType . Idv AS T Arr
    (44) Idv -> . ID COMA Idv
    (45) Idv -> . ID
    (46) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 47

state 20

    (1) PROGRAMA -> PROGRAM V M endProgram . S END
    (14) S -> . SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S
    (15) S -> . empty
    (83) empty -> .

    SUBPROCEDURE    shift and go to state 50
    END             reduce using rule 83 (empty -> .)

    S                              shift and go to state 49
    empty                          shift and go to state 51

state 21

    (18) M -> F M .

    SUBPROCEDURE    reduce using rule 18 (M -> F M .)
    END             reduce using rule 18 (M -> F M .)
    RETURN          reduce using rule 18 (M -> F M .)


state 22

    (20) F -> E F .

    LET             reduce using rule 20 (F -> E F .)
    DIM             reduce using rule 20 (F -> E F .)
    IF              reduce using rule 20 (F -> E F .)
    FOR             reduce using rule 20 (F -> E F .)
    WHILE           reduce using rule 20 (F -> E F .)
    REPEAT          reduce using rule 20 (F -> E F .)
    GOSUB           reduce using rule 20 (F -> E F .)
    INPUT           reduce using rule 20 (F -> E F .)
    PRINT           reduce using rule 20 (F -> E F .)
    SUBPROCEDURE    reduce using rule 20 (F -> E F .)
    END             reduce using rule 20 (F -> E F .)
    RETURN          reduce using rule 20 (F -> E F .)
    UNTIL           reduce using rule 20 (F -> E F .)
    ELSE            reduce using rule 20 (F -> E F .)
    EIF             reduce using rule 20 (F -> E F .)
    WEND            reduce using rule 20 (F -> E F .)
    NEXT            reduce using rule 20 (F -> E F .)


state 23

    (21) F -> empty .

    LET             reduce using rule 21 (F -> empty .)
    DIM             reduce using rule 21 (F -> empty .)
    IF              reduce using rule 21 (F -> empty .)
    FOR             reduce using rule 21 (F -> empty .)
    WHILE           reduce using rule 21 (F -> empty .)
    REPEAT          reduce using rule 21 (F -> empty .)
    GOSUB           reduce using rule 21 (F -> empty .)
    INPUT           reduce using rule 21 (F -> empty .)
    PRINT           reduce using rule 21 (F -> empty .)
    SUBPROCEDURE    reduce using rule 21 (F -> empty .)
    END             reduce using rule 21 (F -> empty .)
    RETURN          reduce using rule 21 (F -> empty .)
    UNTIL           reduce using rule 21 (F -> empty .)
    ELSE            reduce using rule 21 (F -> empty .)
    EIF             reduce using rule 21 (F -> empty .)
    WEND            reduce using rule 21 (F -> empty .)
    NEXT            reduce using rule 21 (F -> empty .)


state 24

    (22) E -> LET setType . Idv EQUALS Ex
    (44) Idv -> . ID COMA Idv
    (45) Idv -> . ID
    (46) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 52

state 25

    (23) E -> DIM setType . Idv AS T Arr
    (44) Idv -> . ID COMA Idv
    (45) Idv -> . ID
    (46) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 53

state 26

    (24) E -> IF EL . THEN first_conditional F Esf EIF final_conditional

    THEN            shift and go to state 54


state 27

    (69) EL -> TRUE .

    THEN            reduce using rule 69 (EL -> TRUE .)
    LET             reduce using rule 69 (EL -> TRUE .)
    DIM             reduce using rule 69 (EL -> TRUE .)
    IF              reduce using rule 69 (EL -> TRUE .)
    FOR             reduce using rule 69 (EL -> TRUE .)
    WHILE           reduce using rule 69 (EL -> TRUE .)
    REPEAT          reduce using rule 69 (EL -> TRUE .)
    GOSUB           reduce using rule 69 (EL -> TRUE .)
    INPUT           reduce using rule 69 (EL -> TRUE .)
    PRINT           reduce using rule 69 (EL -> TRUE .)
    SUBPROCEDURE    reduce using rule 69 (EL -> TRUE .)
    END             reduce using rule 69 (EL -> TRUE .)
    RETURN          reduce using rule 69 (EL -> TRUE .)
    UNTIL           reduce using rule 69 (EL -> TRUE .)
    ELSE            reduce using rule 69 (EL -> TRUE .)
    EIF             reduce using rule 69 (EL -> TRUE .)
    WEND            reduce using rule 69 (EL -> TRUE .)
    NEXT            reduce using rule 69 (EL -> TRUE .)
    GREATHER        reduce using rule 69 (EL -> TRUE .)
    GREATHEREQUAL   reduce using rule 69 (EL -> TRUE .)
    SMALLER         reduce using rule 69 (EL -> TRUE .)
    SMALLEREQUAL    reduce using rule 69 (EL -> TRUE .)
    NOTEQUAL        reduce using rule 69 (EL -> TRUE .)
    EQUALTO         reduce using rule 69 (EL -> TRUE .)
    error           reduce using rule 69 (EL -> TRUE .)
    DO              reduce using rule 69 (EL -> TRUE .)
    CLOSINGPAR      reduce using rule 69 (EL -> TRUE .)


state 28

    (70) EL -> FALSE .

    THEN            reduce using rule 70 (EL -> FALSE .)
    LET             reduce using rule 70 (EL -> FALSE .)
    DIM             reduce using rule 70 (EL -> FALSE .)
    IF              reduce using rule 70 (EL -> FALSE .)
    FOR             reduce using rule 70 (EL -> FALSE .)
    WHILE           reduce using rule 70 (EL -> FALSE .)
    REPEAT          reduce using rule 70 (EL -> FALSE .)
    GOSUB           reduce using rule 70 (EL -> FALSE .)
    INPUT           reduce using rule 70 (EL -> FALSE .)
    PRINT           reduce using rule 70 (EL -> FALSE .)
    SUBPROCEDURE    reduce using rule 70 (EL -> FALSE .)
    END             reduce using rule 70 (EL -> FALSE .)
    RETURN          reduce using rule 70 (EL -> FALSE .)
    UNTIL           reduce using rule 70 (EL -> FALSE .)
    ELSE            reduce using rule 70 (EL -> FALSE .)
    EIF             reduce using rule 70 (EL -> FALSE .)
    WEND            reduce using rule 70 (EL -> FALSE .)
    NEXT            reduce using rule 70 (EL -> FALSE .)
    GREATHER        reduce using rule 70 (EL -> FALSE .)
    GREATHEREQUAL   reduce using rule 70 (EL -> FALSE .)
    SMALLER         reduce using rule 70 (EL -> FALSE .)
    SMALLEREQUAL    reduce using rule 70 (EL -> FALSE .)
    NOTEQUAL        reduce using rule 70 (EL -> FALSE .)
    EQUALTO         reduce using rule 70 (EL -> FALSE .)
    error           reduce using rule 70 (EL -> FALSE .)
    DO              reduce using rule 70 (EL -> FALSE .)
    CLOSINGPAR      reduce using rule 70 (EL -> FALSE .)


state 29

    (71) EL -> OPENPAR . O CLOSINGPAR
    (72) EL -> OPENPAR . O CLOSINGPAR OL EL
    (76) O -> . Ex GREATHER Ex
    (77) O -> . Ex GREATHEREQUAL Ex
    (78) O -> . Ex SMALLER Ex
    (79) O -> . Ex SMALLEREQUAL Ex
    (80) O -> . Ex NOTEQUAL Ex
    (81) O -> . Ex EQUALTO Ex
    (82) O -> . Ex error Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    O                              shift and go to state 55
    EL                             shift and go to state 38
    Ex                             shift and go to state 56
    EA                             shift and go to state 37
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 30

    (25) E -> FOR ID . EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end

    EQUALS          shift and go to state 57


state 31

    (26) E -> WHILE while_first_conditional . EL DO while_second_conditional F WEND while_final_conditional
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 58

state 32

    (27) E -> REPEAT while_first_conditional . F UNTIL EL repeat_conditional
    (20) F -> . E F
    (21) F -> . empty
    (22) E -> . LET setType Idv EQUALS Ex
    (23) E -> . DIM setType Idv AS T Arr
    (24) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (25) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (26) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (27) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (28) E -> . GOSUB ID
    (29) E -> . INPUT IDEx
    (30) E -> . PRINT Ex
    (83) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    UNTIL           reduce using rule 83 (empty -> .)

    F                              shift and go to state 59
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 33

    (28) E -> GOSUB ID .

    LET             reduce using rule 28 (E -> GOSUB ID .)
    DIM             reduce using rule 28 (E -> GOSUB ID .)
    IF              reduce using rule 28 (E -> GOSUB ID .)
    FOR             reduce using rule 28 (E -> GOSUB ID .)
    WHILE           reduce using rule 28 (E -> GOSUB ID .)
    REPEAT          reduce using rule 28 (E -> GOSUB ID .)
    GOSUB           reduce using rule 28 (E -> GOSUB ID .)
    INPUT           reduce using rule 28 (E -> GOSUB ID .)
    PRINT           reduce using rule 28 (E -> GOSUB ID .)
    SUBPROCEDURE    reduce using rule 28 (E -> GOSUB ID .)
    END             reduce using rule 28 (E -> GOSUB ID .)
    RETURN          reduce using rule 28 (E -> GOSUB ID .)
    UNTIL           reduce using rule 28 (E -> GOSUB ID .)
    ELSE            reduce using rule 28 (E -> GOSUB ID .)
    EIF             reduce using rule 28 (E -> GOSUB ID .)
    WEND            reduce using rule 28 (E -> GOSUB ID .)
    NEXT            reduce using rule 28 (E -> GOSUB ID .)


state 34

    (29) E -> INPUT IDEx .

    LET             reduce using rule 29 (E -> INPUT IDEx .)
    DIM             reduce using rule 29 (E -> INPUT IDEx .)
    IF              reduce using rule 29 (E -> INPUT IDEx .)
    FOR             reduce using rule 29 (E -> INPUT IDEx .)
    WHILE           reduce using rule 29 (E -> INPUT IDEx .)
    REPEAT          reduce using rule 29 (E -> INPUT IDEx .)
    GOSUB           reduce using rule 29 (E -> INPUT IDEx .)
    INPUT           reduce using rule 29 (E -> INPUT IDEx .)
    PRINT           reduce using rule 29 (E -> INPUT IDEx .)
    SUBPROCEDURE    reduce using rule 29 (E -> INPUT IDEx .)
    END             reduce using rule 29 (E -> INPUT IDEx .)
    RETURN          reduce using rule 29 (E -> INPUT IDEx .)
    UNTIL           reduce using rule 29 (E -> INPUT IDEx .)
    ELSE            reduce using rule 29 (E -> INPUT IDEx .)
    EIF             reduce using rule 29 (E -> INPUT IDEx .)
    WEND            reduce using rule 29 (E -> INPUT IDEx .)
    NEXT            reduce using rule 29 (E -> INPUT IDEx .)


state 35

    (48) IDEx -> ID .
    (49) IDEx -> ID . OPENBRACKET setType Idv CLOSINGBRACKET

    LET             reduce using rule 48 (IDEx -> ID .)
    DIM             reduce using rule 48 (IDEx -> ID .)
    IF              reduce using rule 48 (IDEx -> ID .)
    FOR             reduce using rule 48 (IDEx -> ID .)
    WHILE           reduce using rule 48 (IDEx -> ID .)
    REPEAT          reduce using rule 48 (IDEx -> ID .)
    GOSUB           reduce using rule 48 (IDEx -> ID .)
    INPUT           reduce using rule 48 (IDEx -> ID .)
    PRINT           reduce using rule 48 (IDEx -> ID .)
    SUBPROCEDURE    reduce using rule 48 (IDEx -> ID .)
    END             reduce using rule 48 (IDEx -> ID .)
    RETURN          reduce using rule 48 (IDEx -> ID .)
    UNTIL           reduce using rule 48 (IDEx -> ID .)
    ELSE            reduce using rule 48 (IDEx -> ID .)
    EIF             reduce using rule 48 (IDEx -> ID .)
    WEND            reduce using rule 48 (IDEx -> ID .)
    NEXT            reduce using rule 48 (IDEx -> ID .)
    OPENBRACKET     shift and go to state 60


state 36

    (30) E -> PRINT Ex .

    LET             reduce using rule 30 (E -> PRINT Ex .)
    DIM             reduce using rule 30 (E -> PRINT Ex .)
    IF              reduce using rule 30 (E -> PRINT Ex .)
    FOR             reduce using rule 30 (E -> PRINT Ex .)
    WHILE           reduce using rule 30 (E -> PRINT Ex .)
    REPEAT          reduce using rule 30 (E -> PRINT Ex .)
    GOSUB           reduce using rule 30 (E -> PRINT Ex .)
    INPUT           reduce using rule 30 (E -> PRINT Ex .)
    PRINT           reduce using rule 30 (E -> PRINT Ex .)
    SUBPROCEDURE    reduce using rule 30 (E -> PRINT Ex .)
    END             reduce using rule 30 (E -> PRINT Ex .)
    RETURN          reduce using rule 30 (E -> PRINT Ex .)
    UNTIL           reduce using rule 30 (E -> PRINT Ex .)
    ELSE            reduce using rule 30 (E -> PRINT Ex .)
    EIF             reduce using rule 30 (E -> PRINT Ex .)
    WEND            reduce using rule 30 (E -> PRINT Ex .)
    NEXT            reduce using rule 30 (E -> PRINT Ex .)


state 37

    (50) Ex -> EA .
    (54) EA -> EA . PLUS P
    (55) EA -> EA . MINUS P

    LET             reduce using rule 50 (Ex -> EA .)
    DIM             reduce using rule 50 (Ex -> EA .)
    IF              reduce using rule 50 (Ex -> EA .)
    FOR             reduce using rule 50 (Ex -> EA .)
    WHILE           reduce using rule 50 (Ex -> EA .)
    REPEAT          reduce using rule 50 (Ex -> EA .)
    GOSUB           reduce using rule 50 (Ex -> EA .)
    INPUT           reduce using rule 50 (Ex -> EA .)
    PRINT           reduce using rule 50 (Ex -> EA .)
    SUBPROCEDURE    reduce using rule 50 (Ex -> EA .)
    END             reduce using rule 50 (Ex -> EA .)
    RETURN          reduce using rule 50 (Ex -> EA .)
    UNTIL           reduce using rule 50 (Ex -> EA .)
    ELSE            reduce using rule 50 (Ex -> EA .)
    EIF             reduce using rule 50 (Ex -> EA .)
    WEND            reduce using rule 50 (Ex -> EA .)
    NEXT            reduce using rule 50 (Ex -> EA .)
    GREATHER        reduce using rule 50 (Ex -> EA .)
    GREATHEREQUAL   reduce using rule 50 (Ex -> EA .)
    SMALLER         reduce using rule 50 (Ex -> EA .)
    SMALLEREQUAL    reduce using rule 50 (Ex -> EA .)
    NOTEQUAL        reduce using rule 50 (Ex -> EA .)
    EQUALTO         reduce using rule 50 (Ex -> EA .)
    error           reduce using rule 50 (Ex -> EA .)
    CLOSINGPAR      reduce using rule 50 (Ex -> EA .)
    DO              reduce using rule 50 (Ex -> EA .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 38

    (51) Ex -> EL .

    LET             reduce using rule 51 (Ex -> EL .)
    DIM             reduce using rule 51 (Ex -> EL .)
    IF              reduce using rule 51 (Ex -> EL .)
    FOR             reduce using rule 51 (Ex -> EL .)
    WHILE           reduce using rule 51 (Ex -> EL .)
    REPEAT          reduce using rule 51 (Ex -> EL .)
    GOSUB           reduce using rule 51 (Ex -> EL .)
    INPUT           reduce using rule 51 (Ex -> EL .)
    PRINT           reduce using rule 51 (Ex -> EL .)
    SUBPROCEDURE    reduce using rule 51 (Ex -> EL .)
    END             reduce using rule 51 (Ex -> EL .)
    RETURN          reduce using rule 51 (Ex -> EL .)
    UNTIL           reduce using rule 51 (Ex -> EL .)
    ELSE            reduce using rule 51 (Ex -> EL .)
    EIF             reduce using rule 51 (Ex -> EL .)
    WEND            reduce using rule 51 (Ex -> EL .)
    NEXT            reduce using rule 51 (Ex -> EL .)
    GREATHER        reduce using rule 51 (Ex -> EL .)
    GREATHEREQUAL   reduce using rule 51 (Ex -> EL .)
    SMALLER         reduce using rule 51 (Ex -> EL .)
    SMALLEREQUAL    reduce using rule 51 (Ex -> EL .)
    NOTEQUAL        reduce using rule 51 (Ex -> EL .)
    EQUALTO         reduce using rule 51 (Ex -> EL .)
    error           reduce using rule 51 (Ex -> EL .)
    CLOSINGPAR      reduce using rule 51 (Ex -> EL .)
    DO              reduce using rule 51 (Ex -> EL .)


state 39

    (52) Ex -> ID .
    (61) N -> ID . saveID
    (63) N -> ID . Arr
    (64) saveID -> .
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (83) empty -> .

  ! reduce/reduce conflict for LET resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for DIM resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for REPEAT resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for GOSUB resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for INPUT resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for END resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for UNTIL resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for EIF resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for WEND resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for NEXT resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for GREATHER resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for SMALLEREQUAL resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for EQUALTO resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for error resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for CLOSINGPAR resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for LET resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for DIM resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for REPEAT resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for GOSUB resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for INPUT resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for END resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for UNTIL resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for EIF resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for WEND resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for NEXT resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for GREATHER resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for SMALLEREQUAL resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for EQUALTO resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for error resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for CLOSINGPAR resolved using rule 52 (Ex -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 52 (Ex -> ID .)
    LET             reduce using rule 52 (Ex -> ID .)
    DIM             reduce using rule 52 (Ex -> ID .)
    IF              reduce using rule 52 (Ex -> ID .)
    FOR             reduce using rule 52 (Ex -> ID .)
    WHILE           reduce using rule 52 (Ex -> ID .)
    REPEAT          reduce using rule 52 (Ex -> ID .)
    GOSUB           reduce using rule 52 (Ex -> ID .)
    INPUT           reduce using rule 52 (Ex -> ID .)
    PRINT           reduce using rule 52 (Ex -> ID .)
    SUBPROCEDURE    reduce using rule 52 (Ex -> ID .)
    END             reduce using rule 52 (Ex -> ID .)
    RETURN          reduce using rule 52 (Ex -> ID .)
    UNTIL           reduce using rule 52 (Ex -> ID .)
    ELSE            reduce using rule 52 (Ex -> ID .)
    EIF             reduce using rule 52 (Ex -> ID .)
    WEND            reduce using rule 52 (Ex -> ID .)
    NEXT            reduce using rule 52 (Ex -> ID .)
    GREATHER        reduce using rule 52 (Ex -> ID .)
    GREATHEREQUAL   reduce using rule 52 (Ex -> ID .)
    SMALLER         reduce using rule 52 (Ex -> ID .)
    SMALLEREQUAL    reduce using rule 52 (Ex -> ID .)
    NOTEQUAL        reduce using rule 52 (Ex -> ID .)
    EQUALTO         reduce using rule 52 (Ex -> ID .)
    error           reduce using rule 52 (Ex -> ID .)
    CLOSINGPAR      reduce using rule 52 (Ex -> ID .)
    DO              reduce using rule 52 (Ex -> ID .)
    MULTIPLY        reduce using rule 64 (saveID -> .)
    DIVIDE          reduce using rule 64 (saveID -> .)
    PLUS            reduce using rule 64 (saveID -> .)
    MINUS           reduce using rule 64 (saveID -> .)
    OPENBRACKET     shift and go to state 65

  ! LET             [ reduce using rule 64 (saveID -> .) ]
  ! DIM             [ reduce using rule 64 (saveID -> .) ]
  ! IF              [ reduce using rule 64 (saveID -> .) ]
  ! FOR             [ reduce using rule 64 (saveID -> .) ]
  ! WHILE           [ reduce using rule 64 (saveID -> .) ]
  ! REPEAT          [ reduce using rule 64 (saveID -> .) ]
  ! GOSUB           [ reduce using rule 64 (saveID -> .) ]
  ! INPUT           [ reduce using rule 64 (saveID -> .) ]
  ! PRINT           [ reduce using rule 64 (saveID -> .) ]
  ! SUBPROCEDURE    [ reduce using rule 64 (saveID -> .) ]
  ! END             [ reduce using rule 64 (saveID -> .) ]
  ! RETURN          [ reduce using rule 64 (saveID -> .) ]
  ! UNTIL           [ reduce using rule 64 (saveID -> .) ]
  ! ELSE            [ reduce using rule 64 (saveID -> .) ]
  ! EIF             [ reduce using rule 64 (saveID -> .) ]
  ! WEND            [ reduce using rule 64 (saveID -> .) ]
  ! NEXT            [ reduce using rule 64 (saveID -> .) ]
  ! GREATHER        [ reduce using rule 64 (saveID -> .) ]
  ! GREATHEREQUAL   [ reduce using rule 64 (saveID -> .) ]
  ! SMALLER         [ reduce using rule 64 (saveID -> .) ]
  ! SMALLEREQUAL    [ reduce using rule 64 (saveID -> .) ]
  ! NOTEQUAL        [ reduce using rule 64 (saveID -> .) ]
  ! EQUALTO         [ reduce using rule 64 (saveID -> .) ]
  ! error           [ reduce using rule 64 (saveID -> .) ]
  ! CLOSINGPAR      [ reduce using rule 64 (saveID -> .) ]
  ! DO              [ reduce using rule 64 (saveID -> .) ]
  ! MULTIPLY        [ reduce using rule 83 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 83 (empty -> .) ]
  ! PLUS            [ reduce using rule 83 (empty -> .) ]
  ! MINUS           [ reduce using rule 83 (empty -> .) ]
  ! LET             [ reduce using rule 83 (empty -> .) ]
  ! DIM             [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! FOR             [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! REPEAT          [ reduce using rule 83 (empty -> .) ]
  ! GOSUB           [ reduce using rule 83 (empty -> .) ]
  ! INPUT           [ reduce using rule 83 (empty -> .) ]
  ! PRINT           [ reduce using rule 83 (empty -> .) ]
  ! SUBPROCEDURE    [ reduce using rule 83 (empty -> .) ]
  ! END             [ reduce using rule 83 (empty -> .) ]
  ! RETURN          [ reduce using rule 83 (empty -> .) ]
  ! UNTIL           [ reduce using rule 83 (empty -> .) ]
  ! ELSE            [ reduce using rule 83 (empty -> .) ]
  ! EIF             [ reduce using rule 83 (empty -> .) ]
  ! WEND            [ reduce using rule 83 (empty -> .) ]
  ! NEXT            [ reduce using rule 83 (empty -> .) ]
  ! GREATHER        [ reduce using rule 83 (empty -> .) ]
  ! GREATHEREQUAL   [ reduce using rule 83 (empty -> .) ]
  ! SMALLER         [ reduce using rule 83 (empty -> .) ]
  ! SMALLEREQUAL    [ reduce using rule 83 (empty -> .) ]
  ! NOTEQUAL        [ reduce using rule 83 (empty -> .) ]
  ! EQUALTO         [ reduce using rule 83 (empty -> .) ]
  ! error           [ reduce using rule 83 (empty -> .) ]
  ! CLOSINGPAR      [ reduce using rule 83 (empty -> .) ]
  ! DO              [ reduce using rule 83 (empty -> .) ]

    saveID                         shift and go to state 63
    Arr                            shift and go to state 64
    empty                          shift and go to state 66

state 40

    (56) EA -> P .
    (57) P -> P . MULTIPLY N
    (58) P -> P . DIVIDE N

    PLUS            reduce using rule 56 (EA -> P .)
    MINUS           reduce using rule 56 (EA -> P .)
    LET             reduce using rule 56 (EA -> P .)
    DIM             reduce using rule 56 (EA -> P .)
    IF              reduce using rule 56 (EA -> P .)
    FOR             reduce using rule 56 (EA -> P .)
    WHILE           reduce using rule 56 (EA -> P .)
    REPEAT          reduce using rule 56 (EA -> P .)
    GOSUB           reduce using rule 56 (EA -> P .)
    INPUT           reduce using rule 56 (EA -> P .)
    PRINT           reduce using rule 56 (EA -> P .)
    SUBPROCEDURE    reduce using rule 56 (EA -> P .)
    END             reduce using rule 56 (EA -> P .)
    RETURN          reduce using rule 56 (EA -> P .)
    UNTIL           reduce using rule 56 (EA -> P .)
    ELSE            reduce using rule 56 (EA -> P .)
    EIF             reduce using rule 56 (EA -> P .)
    WEND            reduce using rule 56 (EA -> P .)
    NEXT            reduce using rule 56 (EA -> P .)
    GREATHER        reduce using rule 56 (EA -> P .)
    GREATHEREQUAL   reduce using rule 56 (EA -> P .)
    SMALLER         reduce using rule 56 (EA -> P .)
    SMALLEREQUAL    reduce using rule 56 (EA -> P .)
    NOTEQUAL        reduce using rule 56 (EA -> P .)
    EQUALTO         reduce using rule 56 (EA -> P .)
    error           reduce using rule 56 (EA -> P .)
    CLOSINGPAR      reduce using rule 56 (EA -> P .)
    TO              reduce using rule 56 (EA -> P .)
    COMA            reduce using rule 56 (EA -> P .)
    CLOSINGBRACKET  reduce using rule 56 (EA -> P .)
    DO              reduce using rule 56 (EA -> P .)
    MULTIPLY        shift and go to state 67
    DIVIDE          shift and go to state 68


state 41

    (67) cte -> MINUS . INTVAL
    (68) cte -> MINUS . FLOATVAL

    INTVAL          shift and go to state 69
    FLOATVAL        shift and go to state 70


state 42

    (71) EL -> OPENPAR . O CLOSINGPAR
    (72) EL -> OPENPAR . O CLOSINGPAR OL EL
    (62) N -> OPENPAR . EA CLOSINGPAR
    (76) O -> . Ex GREATHER Ex
    (77) O -> . Ex GREATHEREQUAL Ex
    (78) O -> . Ex SMALLER Ex
    (79) O -> . Ex SMALLEREQUAL Ex
    (80) O -> . Ex NOTEQUAL Ex
    (81) O -> . Ex EQUALTO Ex
    (82) O -> . Ex error Ex
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    O                              shift and go to state 55
    EL                             shift and go to state 38
    EA                             shift and go to state 71
    Ex                             shift and go to state 56
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 43

    (59) P -> N .

    MULTIPLY        reduce using rule 59 (P -> N .)
    DIVIDE          reduce using rule 59 (P -> N .)
    PLUS            reduce using rule 59 (P -> N .)
    MINUS           reduce using rule 59 (P -> N .)
    LET             reduce using rule 59 (P -> N .)
    DIM             reduce using rule 59 (P -> N .)
    IF              reduce using rule 59 (P -> N .)
    FOR             reduce using rule 59 (P -> N .)
    WHILE           reduce using rule 59 (P -> N .)
    REPEAT          reduce using rule 59 (P -> N .)
    GOSUB           reduce using rule 59 (P -> N .)
    INPUT           reduce using rule 59 (P -> N .)
    PRINT           reduce using rule 59 (P -> N .)
    SUBPROCEDURE    reduce using rule 59 (P -> N .)
    END             reduce using rule 59 (P -> N .)
    RETURN          reduce using rule 59 (P -> N .)
    UNTIL           reduce using rule 59 (P -> N .)
    ELSE            reduce using rule 59 (P -> N .)
    EIF             reduce using rule 59 (P -> N .)
    WEND            reduce using rule 59 (P -> N .)
    NEXT            reduce using rule 59 (P -> N .)
    GREATHER        reduce using rule 59 (P -> N .)
    GREATHEREQUAL   reduce using rule 59 (P -> N .)
    SMALLER         reduce using rule 59 (P -> N .)
    SMALLEREQUAL    reduce using rule 59 (P -> N .)
    NOTEQUAL        reduce using rule 59 (P -> N .)
    EQUALTO         reduce using rule 59 (P -> N .)
    error           reduce using rule 59 (P -> N .)
    CLOSINGPAR      reduce using rule 59 (P -> N .)
    TO              reduce using rule 59 (P -> N .)
    COMA            reduce using rule 59 (P -> N .)
    CLOSINGBRACKET  reduce using rule 59 (P -> N .)
    DO              reduce using rule 59 (P -> N .)


state 44

    (60) N -> cte . saveID
    (64) saveID -> .

    MULTIPLY        reduce using rule 64 (saveID -> .)
    DIVIDE          reduce using rule 64 (saveID -> .)
    PLUS            reduce using rule 64 (saveID -> .)
    MINUS           reduce using rule 64 (saveID -> .)
    LET             reduce using rule 64 (saveID -> .)
    DIM             reduce using rule 64 (saveID -> .)
    IF              reduce using rule 64 (saveID -> .)
    FOR             reduce using rule 64 (saveID -> .)
    WHILE           reduce using rule 64 (saveID -> .)
    REPEAT          reduce using rule 64 (saveID -> .)
    GOSUB           reduce using rule 64 (saveID -> .)
    INPUT           reduce using rule 64 (saveID -> .)
    PRINT           reduce using rule 64 (saveID -> .)
    SUBPROCEDURE    reduce using rule 64 (saveID -> .)
    END             reduce using rule 64 (saveID -> .)
    RETURN          reduce using rule 64 (saveID -> .)
    UNTIL           reduce using rule 64 (saveID -> .)
    ELSE            reduce using rule 64 (saveID -> .)
    EIF             reduce using rule 64 (saveID -> .)
    WEND            reduce using rule 64 (saveID -> .)
    NEXT            reduce using rule 64 (saveID -> .)
    GREATHER        reduce using rule 64 (saveID -> .)
    GREATHEREQUAL   reduce using rule 64 (saveID -> .)
    SMALLER         reduce using rule 64 (saveID -> .)
    SMALLEREQUAL    reduce using rule 64 (saveID -> .)
    NOTEQUAL        reduce using rule 64 (saveID -> .)
    EQUALTO         reduce using rule 64 (saveID -> .)
    error           reduce using rule 64 (saveID -> .)
    CLOSINGPAR      reduce using rule 64 (saveID -> .)
    TO              reduce using rule 64 (saveID -> .)
    COMA            reduce using rule 64 (saveID -> .)
    CLOSINGBRACKET  reduce using rule 64 (saveID -> .)
    DO              reduce using rule 64 (saveID -> .)

    saveID                         shift and go to state 72

state 45

    (65) cte -> FLOATVAL .

    MULTIPLY        reduce using rule 65 (cte -> FLOATVAL .)
    DIVIDE          reduce using rule 65 (cte -> FLOATVAL .)
    PLUS            reduce using rule 65 (cte -> FLOATVAL .)
    MINUS           reduce using rule 65 (cte -> FLOATVAL .)
    LET             reduce using rule 65 (cte -> FLOATVAL .)
    DIM             reduce using rule 65 (cte -> FLOATVAL .)
    IF              reduce using rule 65 (cte -> FLOATVAL .)
    FOR             reduce using rule 65 (cte -> FLOATVAL .)
    WHILE           reduce using rule 65 (cte -> FLOATVAL .)
    REPEAT          reduce using rule 65 (cte -> FLOATVAL .)
    GOSUB           reduce using rule 65 (cte -> FLOATVAL .)
    INPUT           reduce using rule 65 (cte -> FLOATVAL .)
    PRINT           reduce using rule 65 (cte -> FLOATVAL .)
    SUBPROCEDURE    reduce using rule 65 (cte -> FLOATVAL .)
    END             reduce using rule 65 (cte -> FLOATVAL .)
    RETURN          reduce using rule 65 (cte -> FLOATVAL .)
    UNTIL           reduce using rule 65 (cte -> FLOATVAL .)
    ELSE            reduce using rule 65 (cte -> FLOATVAL .)
    EIF             reduce using rule 65 (cte -> FLOATVAL .)
    WEND            reduce using rule 65 (cte -> FLOATVAL .)
    NEXT            reduce using rule 65 (cte -> FLOATVAL .)
    GREATHER        reduce using rule 65 (cte -> FLOATVAL .)
    GREATHEREQUAL   reduce using rule 65 (cte -> FLOATVAL .)
    SMALLER         reduce using rule 65 (cte -> FLOATVAL .)
    SMALLEREQUAL    reduce using rule 65 (cte -> FLOATVAL .)
    NOTEQUAL        reduce using rule 65 (cte -> FLOATVAL .)
    EQUALTO         reduce using rule 65 (cte -> FLOATVAL .)
    error           reduce using rule 65 (cte -> FLOATVAL .)
    CLOSINGPAR      reduce using rule 65 (cte -> FLOATVAL .)
    TO              reduce using rule 65 (cte -> FLOATVAL .)
    COMA            reduce using rule 65 (cte -> FLOATVAL .)
    CLOSINGBRACKET  reduce using rule 65 (cte -> FLOATVAL .)
    DO              reduce using rule 65 (cte -> FLOATVAL .)


state 46

    (66) cte -> INTVAL .

    MULTIPLY        reduce using rule 66 (cte -> INTVAL .)
    DIVIDE          reduce using rule 66 (cte -> INTVAL .)
    PLUS            reduce using rule 66 (cte -> INTVAL .)
    MINUS           reduce using rule 66 (cte -> INTVAL .)
    LET             reduce using rule 66 (cte -> INTVAL .)
    DIM             reduce using rule 66 (cte -> INTVAL .)
    IF              reduce using rule 66 (cte -> INTVAL .)
    FOR             reduce using rule 66 (cte -> INTVAL .)
    WHILE           reduce using rule 66 (cte -> INTVAL .)
    REPEAT          reduce using rule 66 (cte -> INTVAL .)
    GOSUB           reduce using rule 66 (cte -> INTVAL .)
    INPUT           reduce using rule 66 (cte -> INTVAL .)
    PRINT           reduce using rule 66 (cte -> INTVAL .)
    SUBPROCEDURE    reduce using rule 66 (cte -> INTVAL .)
    END             reduce using rule 66 (cte -> INTVAL .)
    RETURN          reduce using rule 66 (cte -> INTVAL .)
    UNTIL           reduce using rule 66 (cte -> INTVAL .)
    ELSE            reduce using rule 66 (cte -> INTVAL .)
    EIF             reduce using rule 66 (cte -> INTVAL .)
    WEND            reduce using rule 66 (cte -> INTVAL .)
    NEXT            reduce using rule 66 (cte -> INTVAL .)
    GREATHER        reduce using rule 66 (cte -> INTVAL .)
    GREATHEREQUAL   reduce using rule 66 (cte -> INTVAL .)
    SMALLER         reduce using rule 66 (cte -> INTVAL .)
    SMALLEREQUAL    reduce using rule 66 (cte -> INTVAL .)
    NOTEQUAL        reduce using rule 66 (cte -> INTVAL .)
    EQUALTO         reduce using rule 66 (cte -> INTVAL .)
    error           reduce using rule 66 (cte -> INTVAL .)
    CLOSINGPAR      reduce using rule 66 (cte -> INTVAL .)
    TO              reduce using rule 66 (cte -> INTVAL .)
    COMA            reduce using rule 66 (cte -> INTVAL .)
    CLOSINGBRACKET  reduce using rule 66 (cte -> INTVAL .)
    DO              reduce using rule 66 (cte -> INTVAL .)


state 47

    (3) V -> DIM setType Idv . AS T Arr

    AS              shift and go to state 73


state 48

    (44) Idv -> ID . COMA Idv
    (45) Idv -> ID .
    (46) Idv -> ID . Arr
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (83) empty -> .

  ! reduce/reduce conflict for AS resolved using rule 45 (Idv -> ID .)
  ! reduce/reduce conflict for EQUALS resolved using rule 45 (Idv -> ID .)
  ! reduce/reduce conflict for CLOSINGBRACKET resolved using rule 45 (Idv -> ID .)
    COMA            shift and go to state 74
    AS              reduce using rule 45 (Idv -> ID .)
    EQUALS          reduce using rule 45 (Idv -> ID .)
    CLOSINGBRACKET  reduce using rule 45 (Idv -> ID .)
    OPENBRACKET     shift and go to state 65

  ! AS              [ reduce using rule 83 (empty -> .) ]
  ! EQUALS          [ reduce using rule 83 (empty -> .) ]
  ! CLOSINGBRACKET  [ reduce using rule 83 (empty -> .) ]

    Arr                            shift and go to state 75
    empty                          shift and go to state 66

state 49

    (1) PROGRAMA -> PROGRAM V M endProgram S . END

    END             shift and go to state 76


state 50

    (14) S -> SUBPROCEDURE . ID fillSub TWOPOINTS M RETURN endProcedure S

    ID              shift and go to state 77


state 51

    (15) S -> empty .

    END             reduce using rule 15 (S -> empty .)


state 52

    (22) E -> LET setType Idv . EQUALS Ex

    EQUALS          shift and go to state 78


state 53

    (23) E -> DIM setType Idv . AS T Arr

    AS              shift and go to state 79


state 54

    (24) E -> IF EL THEN . first_conditional F Esf EIF final_conditional
    (39) first_conditional -> .

    LET             reduce using rule 39 (first_conditional -> .)
    DIM             reduce using rule 39 (first_conditional -> .)
    IF              reduce using rule 39 (first_conditional -> .)
    FOR             reduce using rule 39 (first_conditional -> .)
    WHILE           reduce using rule 39 (first_conditional -> .)
    REPEAT          reduce using rule 39 (first_conditional -> .)
    GOSUB           reduce using rule 39 (first_conditional -> .)
    INPUT           reduce using rule 39 (first_conditional -> .)
    PRINT           reduce using rule 39 (first_conditional -> .)
    ELSE            reduce using rule 39 (first_conditional -> .)
    EIF             reduce using rule 39 (first_conditional -> .)

    first_conditional              shift and go to state 80

state 55

    (71) EL -> OPENPAR O . CLOSINGPAR
    (72) EL -> OPENPAR O . CLOSINGPAR OL EL

    CLOSINGPAR      shift and go to state 81


state 56

    (76) O -> Ex . GREATHER Ex
    (77) O -> Ex . GREATHEREQUAL Ex
    (78) O -> Ex . SMALLER Ex
    (79) O -> Ex . SMALLEREQUAL Ex
    (80) O -> Ex . NOTEQUAL Ex
    (81) O -> Ex . EQUALTO Ex
    (82) O -> Ex . error Ex

    GREATHER        shift and go to state 82
    GREATHEREQUAL   shift and go to state 83
    SMALLER         shift and go to state 84
    SMALLEREQUAL    shift and go to state 85
    NOTEQUAL        shift and go to state 86
    EQUALTO         shift and go to state 87
    error           shift and go to state 88


state 57

    (25) E -> FOR ID EQUALS . EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 89
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    EA                             shift and go to state 90
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 58

    (26) E -> WHILE while_first_conditional EL . DO while_second_conditional F WEND while_final_conditional

    DO              shift and go to state 92


state 59

    (27) E -> REPEAT while_first_conditional F . UNTIL EL repeat_conditional

    UNTIL           shift and go to state 93


state 60

    (49) IDEx -> ID OPENBRACKET . setType Idv CLOSINGBRACKET
    (47) setType -> .

    ID              reduce using rule 47 (setType -> .)

    setType                        shift and go to state 94

state 61

    (54) EA -> EA PLUS . P
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 89
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    P                              shift and go to state 95
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 62

    (55) EA -> EA MINUS . P
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 89
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    P                              shift and go to state 96
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 63

    (61) N -> ID saveID .

    MULTIPLY        reduce using rule 61 (N -> ID saveID .)
    DIVIDE          reduce using rule 61 (N -> ID saveID .)
    PLUS            reduce using rule 61 (N -> ID saveID .)
    MINUS           reduce using rule 61 (N -> ID saveID .)
    LET             reduce using rule 61 (N -> ID saveID .)
    DIM             reduce using rule 61 (N -> ID saveID .)
    IF              reduce using rule 61 (N -> ID saveID .)
    FOR             reduce using rule 61 (N -> ID saveID .)
    WHILE           reduce using rule 61 (N -> ID saveID .)
    REPEAT          reduce using rule 61 (N -> ID saveID .)
    GOSUB           reduce using rule 61 (N -> ID saveID .)
    INPUT           reduce using rule 61 (N -> ID saveID .)
    PRINT           reduce using rule 61 (N -> ID saveID .)
    SUBPROCEDURE    reduce using rule 61 (N -> ID saveID .)
    END             reduce using rule 61 (N -> ID saveID .)
    RETURN          reduce using rule 61 (N -> ID saveID .)
    UNTIL           reduce using rule 61 (N -> ID saveID .)
    ELSE            reduce using rule 61 (N -> ID saveID .)
    EIF             reduce using rule 61 (N -> ID saveID .)
    WEND            reduce using rule 61 (N -> ID saveID .)
    NEXT            reduce using rule 61 (N -> ID saveID .)
    GREATHER        reduce using rule 61 (N -> ID saveID .)
    GREATHEREQUAL   reduce using rule 61 (N -> ID saveID .)
    SMALLER         reduce using rule 61 (N -> ID saveID .)
    SMALLEREQUAL    reduce using rule 61 (N -> ID saveID .)
    NOTEQUAL        reduce using rule 61 (N -> ID saveID .)
    EQUALTO         reduce using rule 61 (N -> ID saveID .)
    error           reduce using rule 61 (N -> ID saveID .)
    CLOSINGPAR      reduce using rule 61 (N -> ID saveID .)
    TO              reduce using rule 61 (N -> ID saveID .)
    COMA            reduce using rule 61 (N -> ID saveID .)
    CLOSINGBRACKET  reduce using rule 61 (N -> ID saveID .)
    DO              reduce using rule 61 (N -> ID saveID .)


state 64

    (63) N -> ID Arr .

    MULTIPLY        reduce using rule 63 (N -> ID Arr .)
    DIVIDE          reduce using rule 63 (N -> ID Arr .)
    PLUS            reduce using rule 63 (N -> ID Arr .)
    MINUS           reduce using rule 63 (N -> ID Arr .)
    LET             reduce using rule 63 (N -> ID Arr .)
    DIM             reduce using rule 63 (N -> ID Arr .)
    IF              reduce using rule 63 (N -> ID Arr .)
    FOR             reduce using rule 63 (N -> ID Arr .)
    WHILE           reduce using rule 63 (N -> ID Arr .)
    REPEAT          reduce using rule 63 (N -> ID Arr .)
    GOSUB           reduce using rule 63 (N -> ID Arr .)
    INPUT           reduce using rule 63 (N -> ID Arr .)
    PRINT           reduce using rule 63 (N -> ID Arr .)
    SUBPROCEDURE    reduce using rule 63 (N -> ID Arr .)
    END             reduce using rule 63 (N -> ID Arr .)
    RETURN          reduce using rule 63 (N -> ID Arr .)
    UNTIL           reduce using rule 63 (N -> ID Arr .)
    ELSE            reduce using rule 63 (N -> ID Arr .)
    EIF             reduce using rule 63 (N -> ID Arr .)
    WEND            reduce using rule 63 (N -> ID Arr .)
    NEXT            reduce using rule 63 (N -> ID Arr .)
    GREATHER        reduce using rule 63 (N -> ID Arr .)
    GREATHEREQUAL   reduce using rule 63 (N -> ID Arr .)
    SMALLER         reduce using rule 63 (N -> ID Arr .)
    SMALLEREQUAL    reduce using rule 63 (N -> ID Arr .)
    NOTEQUAL        reduce using rule 63 (N -> ID Arr .)
    EQUALTO         reduce using rule 63 (N -> ID Arr .)
    error           reduce using rule 63 (N -> ID Arr .)
    CLOSINGPAR      reduce using rule 63 (N -> ID Arr .)
    TO              reduce using rule 63 (N -> ID Arr .)
    COMA            reduce using rule 63 (N -> ID Arr .)
    CLOSINGBRACKET  reduce using rule 63 (N -> ID Arr .)
    DO              reduce using rule 63 (N -> ID Arr .)


state 65

    (5) Arr -> OPENBRACKET . arr_space CLOSINGBRACKET
    (7) arr_space -> . EA COMA arr_space
    (8) arr_space -> . ID COMA arr_space
    (9) arr_space -> . EA
    (10) arr_space -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 99
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    arr_space                      shift and go to state 97
    EA                             shift and go to state 98
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 66

    (6) Arr -> empty .

    MULTIPLY        reduce using rule 6 (Arr -> empty .)
    DIVIDE          reduce using rule 6 (Arr -> empty .)
    PLUS            reduce using rule 6 (Arr -> empty .)
    MINUS           reduce using rule 6 (Arr -> empty .)
    LET             reduce using rule 6 (Arr -> empty .)
    DIM             reduce using rule 6 (Arr -> empty .)
    IF              reduce using rule 6 (Arr -> empty .)
    FOR             reduce using rule 6 (Arr -> empty .)
    WHILE           reduce using rule 6 (Arr -> empty .)
    REPEAT          reduce using rule 6 (Arr -> empty .)
    GOSUB           reduce using rule 6 (Arr -> empty .)
    INPUT           reduce using rule 6 (Arr -> empty .)
    PRINT           reduce using rule 6 (Arr -> empty .)
    SUBPROCEDURE    reduce using rule 6 (Arr -> empty .)
    END             reduce using rule 6 (Arr -> empty .)
    RETURN          reduce using rule 6 (Arr -> empty .)
    UNTIL           reduce using rule 6 (Arr -> empty .)
    ELSE            reduce using rule 6 (Arr -> empty .)
    EIF             reduce using rule 6 (Arr -> empty .)
    WEND            reduce using rule 6 (Arr -> empty .)
    NEXT            reduce using rule 6 (Arr -> empty .)
    GREATHER        reduce using rule 6 (Arr -> empty .)
    GREATHEREQUAL   reduce using rule 6 (Arr -> empty .)
    SMALLER         reduce using rule 6 (Arr -> empty .)
    SMALLEREQUAL    reduce using rule 6 (Arr -> empty .)
    NOTEQUAL        reduce using rule 6 (Arr -> empty .)
    EQUALTO         reduce using rule 6 (Arr -> empty .)
    error           reduce using rule 6 (Arr -> empty .)
    CLOSINGPAR      reduce using rule 6 (Arr -> empty .)
    DO              reduce using rule 6 (Arr -> empty .)
    AS              reduce using rule 6 (Arr -> empty .)
    EQUALS          reduce using rule 6 (Arr -> empty .)
    CLOSINGBRACKET  reduce using rule 6 (Arr -> empty .)
    TO              reduce using rule 6 (Arr -> empty .)
    COMA            reduce using rule 6 (Arr -> empty .)


state 67

    (57) P -> P MULTIPLY . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 89
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    N                              shift and go to state 100
    cte                            shift and go to state 44

state 68

    (58) P -> P DIVIDE . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 89
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    N                              shift and go to state 101
    cte                            shift and go to state 44

state 69

    (67) cte -> MINUS INTVAL .

    MULTIPLY        reduce using rule 67 (cte -> MINUS INTVAL .)
    DIVIDE          reduce using rule 67 (cte -> MINUS INTVAL .)
    PLUS            reduce using rule 67 (cte -> MINUS INTVAL .)
    MINUS           reduce using rule 67 (cte -> MINUS INTVAL .)
    LET             reduce using rule 67 (cte -> MINUS INTVAL .)
    DIM             reduce using rule 67 (cte -> MINUS INTVAL .)
    IF              reduce using rule 67 (cte -> MINUS INTVAL .)
    FOR             reduce using rule 67 (cte -> MINUS INTVAL .)
    WHILE           reduce using rule 67 (cte -> MINUS INTVAL .)
    REPEAT          reduce using rule 67 (cte -> MINUS INTVAL .)
    GOSUB           reduce using rule 67 (cte -> MINUS INTVAL .)
    INPUT           reduce using rule 67 (cte -> MINUS INTVAL .)
    PRINT           reduce using rule 67 (cte -> MINUS INTVAL .)
    SUBPROCEDURE    reduce using rule 67 (cte -> MINUS INTVAL .)
    END             reduce using rule 67 (cte -> MINUS INTVAL .)
    RETURN          reduce using rule 67 (cte -> MINUS INTVAL .)
    UNTIL           reduce using rule 67 (cte -> MINUS INTVAL .)
    ELSE            reduce using rule 67 (cte -> MINUS INTVAL .)
    EIF             reduce using rule 67 (cte -> MINUS INTVAL .)
    WEND            reduce using rule 67 (cte -> MINUS INTVAL .)
    NEXT            reduce using rule 67 (cte -> MINUS INTVAL .)
    GREATHER        reduce using rule 67 (cte -> MINUS INTVAL .)
    GREATHEREQUAL   reduce using rule 67 (cte -> MINUS INTVAL .)
    SMALLER         reduce using rule 67 (cte -> MINUS INTVAL .)
    SMALLEREQUAL    reduce using rule 67 (cte -> MINUS INTVAL .)
    NOTEQUAL        reduce using rule 67 (cte -> MINUS INTVAL .)
    EQUALTO         reduce using rule 67 (cte -> MINUS INTVAL .)
    error           reduce using rule 67 (cte -> MINUS INTVAL .)
    CLOSINGPAR      reduce using rule 67 (cte -> MINUS INTVAL .)
    TO              reduce using rule 67 (cte -> MINUS INTVAL .)
    COMA            reduce using rule 67 (cte -> MINUS INTVAL .)
    CLOSINGBRACKET  reduce using rule 67 (cte -> MINUS INTVAL .)
    DO              reduce using rule 67 (cte -> MINUS INTVAL .)


state 70

    (68) cte -> MINUS FLOATVAL .

    MULTIPLY        reduce using rule 68 (cte -> MINUS FLOATVAL .)
    DIVIDE          reduce using rule 68 (cte -> MINUS FLOATVAL .)
    PLUS            reduce using rule 68 (cte -> MINUS FLOATVAL .)
    MINUS           reduce using rule 68 (cte -> MINUS FLOATVAL .)
    LET             reduce using rule 68 (cte -> MINUS FLOATVAL .)
    DIM             reduce using rule 68 (cte -> MINUS FLOATVAL .)
    IF              reduce using rule 68 (cte -> MINUS FLOATVAL .)
    FOR             reduce using rule 68 (cte -> MINUS FLOATVAL .)
    WHILE           reduce using rule 68 (cte -> MINUS FLOATVAL .)
    REPEAT          reduce using rule 68 (cte -> MINUS FLOATVAL .)
    GOSUB           reduce using rule 68 (cte -> MINUS FLOATVAL .)
    INPUT           reduce using rule 68 (cte -> MINUS FLOATVAL .)
    PRINT           reduce using rule 68 (cte -> MINUS FLOATVAL .)
    SUBPROCEDURE    reduce using rule 68 (cte -> MINUS FLOATVAL .)
    END             reduce using rule 68 (cte -> MINUS FLOATVAL .)
    RETURN          reduce using rule 68 (cte -> MINUS FLOATVAL .)
    UNTIL           reduce using rule 68 (cte -> MINUS FLOATVAL .)
    ELSE            reduce using rule 68 (cte -> MINUS FLOATVAL .)
    EIF             reduce using rule 68 (cte -> MINUS FLOATVAL .)
    WEND            reduce using rule 68 (cte -> MINUS FLOATVAL .)
    NEXT            reduce using rule 68 (cte -> MINUS FLOATVAL .)
    GREATHER        reduce using rule 68 (cte -> MINUS FLOATVAL .)
    GREATHEREQUAL   reduce using rule 68 (cte -> MINUS FLOATVAL .)
    SMALLER         reduce using rule 68 (cte -> MINUS FLOATVAL .)
    SMALLEREQUAL    reduce using rule 68 (cte -> MINUS FLOATVAL .)
    NOTEQUAL        reduce using rule 68 (cte -> MINUS FLOATVAL .)
    EQUALTO         reduce using rule 68 (cte -> MINUS FLOATVAL .)
    error           reduce using rule 68 (cte -> MINUS FLOATVAL .)
    CLOSINGPAR      reduce using rule 68 (cte -> MINUS FLOATVAL .)
    TO              reduce using rule 68 (cte -> MINUS FLOATVAL .)
    COMA            reduce using rule 68 (cte -> MINUS FLOATVAL .)
    CLOSINGBRACKET  reduce using rule 68 (cte -> MINUS FLOATVAL .)
    DO              reduce using rule 68 (cte -> MINUS FLOATVAL .)


state 71

    (62) N -> OPENPAR EA . CLOSINGPAR
    (54) EA -> EA . PLUS P
    (55) EA -> EA . MINUS P
    (50) Ex -> EA .

    CLOSINGPAR      shift and go to state 102
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    GREATHER        reduce using rule 50 (Ex -> EA .)
    GREATHEREQUAL   reduce using rule 50 (Ex -> EA .)
    SMALLER         reduce using rule 50 (Ex -> EA .)
    SMALLEREQUAL    reduce using rule 50 (Ex -> EA .)
    NOTEQUAL        reduce using rule 50 (Ex -> EA .)
    EQUALTO         reduce using rule 50 (Ex -> EA .)
    error           reduce using rule 50 (Ex -> EA .)


state 72

    (60) N -> cte saveID .

    MULTIPLY        reduce using rule 60 (N -> cte saveID .)
    DIVIDE          reduce using rule 60 (N -> cte saveID .)
    PLUS            reduce using rule 60 (N -> cte saveID .)
    MINUS           reduce using rule 60 (N -> cte saveID .)
    LET             reduce using rule 60 (N -> cte saveID .)
    DIM             reduce using rule 60 (N -> cte saveID .)
    IF              reduce using rule 60 (N -> cte saveID .)
    FOR             reduce using rule 60 (N -> cte saveID .)
    WHILE           reduce using rule 60 (N -> cte saveID .)
    REPEAT          reduce using rule 60 (N -> cte saveID .)
    GOSUB           reduce using rule 60 (N -> cte saveID .)
    INPUT           reduce using rule 60 (N -> cte saveID .)
    PRINT           reduce using rule 60 (N -> cte saveID .)
    SUBPROCEDURE    reduce using rule 60 (N -> cte saveID .)
    END             reduce using rule 60 (N -> cte saveID .)
    RETURN          reduce using rule 60 (N -> cte saveID .)
    UNTIL           reduce using rule 60 (N -> cte saveID .)
    ELSE            reduce using rule 60 (N -> cte saveID .)
    EIF             reduce using rule 60 (N -> cte saveID .)
    WEND            reduce using rule 60 (N -> cte saveID .)
    NEXT            reduce using rule 60 (N -> cte saveID .)
    GREATHER        reduce using rule 60 (N -> cte saveID .)
    GREATHEREQUAL   reduce using rule 60 (N -> cte saveID .)
    SMALLER         reduce using rule 60 (N -> cte saveID .)
    SMALLEREQUAL    reduce using rule 60 (N -> cte saveID .)
    NOTEQUAL        reduce using rule 60 (N -> cte saveID .)
    EQUALTO         reduce using rule 60 (N -> cte saveID .)
    error           reduce using rule 60 (N -> cte saveID .)
    CLOSINGPAR      reduce using rule 60 (N -> cte saveID .)
    TO              reduce using rule 60 (N -> cte saveID .)
    COMA            reduce using rule 60 (N -> cte saveID .)
    CLOSINGBRACKET  reduce using rule 60 (N -> cte saveID .)
    DO              reduce using rule 60 (N -> cte saveID .)


state 73

    (3) V -> DIM setType Idv AS . T Arr
    (11) T -> . INT
    (12) T -> . FLOAT
    (13) T -> . WORD

    INT             shift and go to state 104
    FLOAT           shift and go to state 105
    WORD            shift and go to state 106

    T                              shift and go to state 103

state 74

    (44) Idv -> ID COMA . Idv
    (44) Idv -> . ID COMA Idv
    (45) Idv -> . ID
    (46) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 107

state 75

    (46) Idv -> ID Arr .

    AS              reduce using rule 46 (Idv -> ID Arr .)
    EQUALS          reduce using rule 46 (Idv -> ID Arr .)
    CLOSINGBRACKET  reduce using rule 46 (Idv -> ID Arr .)


state 76

    (1) PROGRAMA -> PROGRAM V M endProgram S END .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM V M endProgram S END .)


state 77

    (14) S -> SUBPROCEDURE ID . fillSub TWOPOINTS M RETURN endProcedure S
    (16) fillSub -> .

    TWOPOINTS       reduce using rule 16 (fillSub -> .)

    fillSub                        shift and go to state 108

state 78

    (22) E -> LET setType Idv EQUALS . Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    Ex                             shift and go to state 109
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 79

    (23) E -> DIM setType Idv AS . T Arr
    (11) T -> . INT
    (12) T -> . FLOAT
    (13) T -> . WORD

    INT             shift and go to state 104
    FLOAT           shift and go to state 105
    WORD            shift and go to state 106

    T                              shift and go to state 110

state 80

    (24) E -> IF EL THEN first_conditional . F Esf EIF final_conditional
    (20) F -> . E F
    (21) F -> . empty
    (22) E -> . LET setType Idv EQUALS Ex
    (23) E -> . DIM setType Idv AS T Arr
    (24) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (25) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (26) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (27) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (28) E -> . GOSUB ID
    (29) E -> . INPUT IDEx
    (30) E -> . PRINT Ex
    (83) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    ELSE            reduce using rule 83 (empty -> .)
    EIF             reduce using rule 83 (empty -> .)

    F                              shift and go to state 111
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 81

    (71) EL -> OPENPAR O CLOSINGPAR .
    (72) EL -> OPENPAR O CLOSINGPAR . OL EL
    (73) OL -> . AND
    (74) OL -> . OR
    (75) OL -> . NOT

    THEN            reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    LET             reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    DIM             reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    IF              reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    FOR             reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    WHILE           reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    REPEAT          reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    GOSUB           reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    INPUT           reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    PRINT           reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    SUBPROCEDURE    reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    END             reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    RETURN          reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    UNTIL           reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    ELSE            reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    EIF             reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    WEND            reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    NEXT            reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    GREATHER        reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    GREATHEREQUAL   reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    SMALLER         reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    SMALLEREQUAL    reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    NOTEQUAL        reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    EQUALTO         reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    error           reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    DO              reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    CLOSINGPAR      reduce using rule 71 (EL -> OPENPAR O CLOSINGPAR .)
    AND             shift and go to state 113
    OR              shift and go to state 114
    NOT             shift and go to state 115

    OL                             shift and go to state 112

state 82

    (76) O -> Ex GREATHER . Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    Ex                             shift and go to state 116
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 83

    (77) O -> Ex GREATHEREQUAL . Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    Ex                             shift and go to state 117
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 84

    (78) O -> Ex SMALLER . Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    Ex                             shift and go to state 118
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 85

    (79) O -> Ex SMALLEREQUAL . Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    Ex                             shift and go to state 119
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 86

    (80) O -> Ex NOTEQUAL . Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    Ex                             shift and go to state 120
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 87

    (81) O -> Ex EQUALTO . Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    Ex                             shift and go to state 121
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 88

    (82) O -> Ex error . Ex
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    Ex                             shift and go to state 122
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 89

    (61) N -> ID . saveID
    (63) N -> ID . Arr
    (64) saveID -> .
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (83) empty -> .

  ! reduce/reduce conflict for MULTIPLY resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for TO resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for LET resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for DIM resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for IF resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for GOSUB resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for INPUT resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for END resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for EIF resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for WEND resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for NEXT resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for GREATHER resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for SMALLER resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for SMALLEREQUAL resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for EQUALTO resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for error resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for CLOSINGPAR resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for COMA resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for CLOSINGBRACKET resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for DO resolved using rule 64 (saveID -> .)
    MULTIPLY        reduce using rule 64 (saveID -> .)
    DIVIDE          reduce using rule 64 (saveID -> .)
    PLUS            reduce using rule 64 (saveID -> .)
    MINUS           reduce using rule 64 (saveID -> .)
    TO              reduce using rule 64 (saveID -> .)
    LET             reduce using rule 64 (saveID -> .)
    DIM             reduce using rule 64 (saveID -> .)
    IF              reduce using rule 64 (saveID -> .)
    FOR             reduce using rule 64 (saveID -> .)
    WHILE           reduce using rule 64 (saveID -> .)
    REPEAT          reduce using rule 64 (saveID -> .)
    GOSUB           reduce using rule 64 (saveID -> .)
    INPUT           reduce using rule 64 (saveID -> .)
    PRINT           reduce using rule 64 (saveID -> .)
    SUBPROCEDURE    reduce using rule 64 (saveID -> .)
    END             reduce using rule 64 (saveID -> .)
    RETURN          reduce using rule 64 (saveID -> .)
    UNTIL           reduce using rule 64 (saveID -> .)
    ELSE            reduce using rule 64 (saveID -> .)
    EIF             reduce using rule 64 (saveID -> .)
    WEND            reduce using rule 64 (saveID -> .)
    NEXT            reduce using rule 64 (saveID -> .)
    GREATHER        reduce using rule 64 (saveID -> .)
    GREATHEREQUAL   reduce using rule 64 (saveID -> .)
    SMALLER         reduce using rule 64 (saveID -> .)
    SMALLEREQUAL    reduce using rule 64 (saveID -> .)
    NOTEQUAL        reduce using rule 64 (saveID -> .)
    EQUALTO         reduce using rule 64 (saveID -> .)
    error           reduce using rule 64 (saveID -> .)
    CLOSINGPAR      reduce using rule 64 (saveID -> .)
    COMA            reduce using rule 64 (saveID -> .)
    CLOSINGBRACKET  reduce using rule 64 (saveID -> .)
    DO              reduce using rule 64 (saveID -> .)
    OPENBRACKET     shift and go to state 65

  ! MULTIPLY        [ reduce using rule 83 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 83 (empty -> .) ]
  ! PLUS            [ reduce using rule 83 (empty -> .) ]
  ! MINUS           [ reduce using rule 83 (empty -> .) ]
  ! TO              [ reduce using rule 83 (empty -> .) ]
  ! LET             [ reduce using rule 83 (empty -> .) ]
  ! DIM             [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! FOR             [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! REPEAT          [ reduce using rule 83 (empty -> .) ]
  ! GOSUB           [ reduce using rule 83 (empty -> .) ]
  ! INPUT           [ reduce using rule 83 (empty -> .) ]
  ! PRINT           [ reduce using rule 83 (empty -> .) ]
  ! SUBPROCEDURE    [ reduce using rule 83 (empty -> .) ]
  ! END             [ reduce using rule 83 (empty -> .) ]
  ! RETURN          [ reduce using rule 83 (empty -> .) ]
  ! UNTIL           [ reduce using rule 83 (empty -> .) ]
  ! ELSE            [ reduce using rule 83 (empty -> .) ]
  ! EIF             [ reduce using rule 83 (empty -> .) ]
  ! WEND            [ reduce using rule 83 (empty -> .) ]
  ! NEXT            [ reduce using rule 83 (empty -> .) ]
  ! GREATHER        [ reduce using rule 83 (empty -> .) ]
  ! GREATHEREQUAL   [ reduce using rule 83 (empty -> .) ]
  ! SMALLER         [ reduce using rule 83 (empty -> .) ]
  ! SMALLEREQUAL    [ reduce using rule 83 (empty -> .) ]
  ! NOTEQUAL        [ reduce using rule 83 (empty -> .) ]
  ! EQUALTO         [ reduce using rule 83 (empty -> .) ]
  ! error           [ reduce using rule 83 (empty -> .) ]
  ! CLOSINGPAR      [ reduce using rule 83 (empty -> .) ]
  ! COMA            [ reduce using rule 83 (empty -> .) ]
  ! CLOSINGBRACKET  [ reduce using rule 83 (empty -> .) ]
  ! DO              [ reduce using rule 83 (empty -> .) ]

    saveID                         shift and go to state 63
    Arr                            shift and go to state 64
    empty                          shift and go to state 66

state 90

    (25) E -> FOR ID EQUALS EA . for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (54) EA -> EA . PLUS P
    (55) EA -> EA . MINUS P
    (31) for_assignation -> .

    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TO              reduce using rule 31 (for_assignation -> .)

    for_assignation                shift and go to state 123

state 91

    (62) N -> OPENPAR . EA CLOSINGPAR
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 89
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    EA                             shift and go to state 124
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 92

    (26) E -> WHILE while_first_conditional EL DO . while_second_conditional F WEND while_final_conditional
    (37) while_second_conditional -> .

    LET             reduce using rule 37 (while_second_conditional -> .)
    DIM             reduce using rule 37 (while_second_conditional -> .)
    IF              reduce using rule 37 (while_second_conditional -> .)
    FOR             reduce using rule 37 (while_second_conditional -> .)
    WHILE           reduce using rule 37 (while_second_conditional -> .)
    REPEAT          reduce using rule 37 (while_second_conditional -> .)
    GOSUB           reduce using rule 37 (while_second_conditional -> .)
    INPUT           reduce using rule 37 (while_second_conditional -> .)
    PRINT           reduce using rule 37 (while_second_conditional -> .)
    WEND            reduce using rule 37 (while_second_conditional -> .)

    while_second_conditional       shift and go to state 125

state 93

    (27) E -> REPEAT while_first_conditional F UNTIL . EL repeat_conditional
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 126

state 94

    (49) IDEx -> ID OPENBRACKET setType . Idv CLOSINGBRACKET
    (44) Idv -> . ID COMA Idv
    (45) Idv -> . ID
    (46) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 127

state 95

    (54) EA -> EA PLUS P .
    (57) P -> P . MULTIPLY N
    (58) P -> P . DIVIDE N

    PLUS            reduce using rule 54 (EA -> EA PLUS P .)
    MINUS           reduce using rule 54 (EA -> EA PLUS P .)
    LET             reduce using rule 54 (EA -> EA PLUS P .)
    DIM             reduce using rule 54 (EA -> EA PLUS P .)
    IF              reduce using rule 54 (EA -> EA PLUS P .)
    FOR             reduce using rule 54 (EA -> EA PLUS P .)
    WHILE           reduce using rule 54 (EA -> EA PLUS P .)
    REPEAT          reduce using rule 54 (EA -> EA PLUS P .)
    GOSUB           reduce using rule 54 (EA -> EA PLUS P .)
    INPUT           reduce using rule 54 (EA -> EA PLUS P .)
    PRINT           reduce using rule 54 (EA -> EA PLUS P .)
    SUBPROCEDURE    reduce using rule 54 (EA -> EA PLUS P .)
    END             reduce using rule 54 (EA -> EA PLUS P .)
    RETURN          reduce using rule 54 (EA -> EA PLUS P .)
    UNTIL           reduce using rule 54 (EA -> EA PLUS P .)
    ELSE            reduce using rule 54 (EA -> EA PLUS P .)
    EIF             reduce using rule 54 (EA -> EA PLUS P .)
    WEND            reduce using rule 54 (EA -> EA PLUS P .)
    NEXT            reduce using rule 54 (EA -> EA PLUS P .)
    GREATHER        reduce using rule 54 (EA -> EA PLUS P .)
    GREATHEREQUAL   reduce using rule 54 (EA -> EA PLUS P .)
    SMALLER         reduce using rule 54 (EA -> EA PLUS P .)
    SMALLEREQUAL    reduce using rule 54 (EA -> EA PLUS P .)
    NOTEQUAL        reduce using rule 54 (EA -> EA PLUS P .)
    EQUALTO         reduce using rule 54 (EA -> EA PLUS P .)
    error           reduce using rule 54 (EA -> EA PLUS P .)
    CLOSINGPAR      reduce using rule 54 (EA -> EA PLUS P .)
    TO              reduce using rule 54 (EA -> EA PLUS P .)
    COMA            reduce using rule 54 (EA -> EA PLUS P .)
    CLOSINGBRACKET  reduce using rule 54 (EA -> EA PLUS P .)
    DO              reduce using rule 54 (EA -> EA PLUS P .)
    MULTIPLY        shift and go to state 67
    DIVIDE          shift and go to state 68


state 96

    (55) EA -> EA MINUS P .
    (57) P -> P . MULTIPLY N
    (58) P -> P . DIVIDE N

    PLUS            reduce using rule 55 (EA -> EA MINUS P .)
    MINUS           reduce using rule 55 (EA -> EA MINUS P .)
    LET             reduce using rule 55 (EA -> EA MINUS P .)
    DIM             reduce using rule 55 (EA -> EA MINUS P .)
    IF              reduce using rule 55 (EA -> EA MINUS P .)
    FOR             reduce using rule 55 (EA -> EA MINUS P .)
    WHILE           reduce using rule 55 (EA -> EA MINUS P .)
    REPEAT          reduce using rule 55 (EA -> EA MINUS P .)
    GOSUB           reduce using rule 55 (EA -> EA MINUS P .)
    INPUT           reduce using rule 55 (EA -> EA MINUS P .)
    PRINT           reduce using rule 55 (EA -> EA MINUS P .)
    SUBPROCEDURE    reduce using rule 55 (EA -> EA MINUS P .)
    END             reduce using rule 55 (EA -> EA MINUS P .)
    RETURN          reduce using rule 55 (EA -> EA MINUS P .)
    UNTIL           reduce using rule 55 (EA -> EA MINUS P .)
    ELSE            reduce using rule 55 (EA -> EA MINUS P .)
    EIF             reduce using rule 55 (EA -> EA MINUS P .)
    WEND            reduce using rule 55 (EA -> EA MINUS P .)
    NEXT            reduce using rule 55 (EA -> EA MINUS P .)
    GREATHER        reduce using rule 55 (EA -> EA MINUS P .)
    GREATHEREQUAL   reduce using rule 55 (EA -> EA MINUS P .)
    SMALLER         reduce using rule 55 (EA -> EA MINUS P .)
    SMALLEREQUAL    reduce using rule 55 (EA -> EA MINUS P .)
    NOTEQUAL        reduce using rule 55 (EA -> EA MINUS P .)
    EQUALTO         reduce using rule 55 (EA -> EA MINUS P .)
    error           reduce using rule 55 (EA -> EA MINUS P .)
    CLOSINGPAR      reduce using rule 55 (EA -> EA MINUS P .)
    TO              reduce using rule 55 (EA -> EA MINUS P .)
    COMA            reduce using rule 55 (EA -> EA MINUS P .)
    CLOSINGBRACKET  reduce using rule 55 (EA -> EA MINUS P .)
    DO              reduce using rule 55 (EA -> EA MINUS P .)
    MULTIPLY        shift and go to state 67
    DIVIDE          shift and go to state 68


state 97

    (5) Arr -> OPENBRACKET arr_space . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 128


state 98

    (7) arr_space -> EA . COMA arr_space
    (9) arr_space -> EA .
    (54) EA -> EA . PLUS P
    (55) EA -> EA . MINUS P

    COMA            shift and go to state 129
    CLOSINGBRACKET  reduce using rule 9 (arr_space -> EA .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 99

    (8) arr_space -> ID . COMA arr_space
    (10) arr_space -> ID .
    (61) N -> ID . saveID
    (63) N -> ID . Arr
    (64) saveID -> .
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (83) empty -> .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for CLOSINGBRACKET resolved using rule 10 (arr_space -> ID .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 64 (saveID -> .)
  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (saveID -> .)
  ! reduce/reduce conflict for CLOSINGBRACKET resolved using rule 10 (arr_space -> ID .)
    COMA            shift and go to state 130
    CLOSINGBRACKET  reduce using rule 10 (arr_space -> ID .)
    MULTIPLY        reduce using rule 64 (saveID -> .)
    DIVIDE          reduce using rule 64 (saveID -> .)
    PLUS            reduce using rule 64 (saveID -> .)
    MINUS           reduce using rule 64 (saveID -> .)
    OPENBRACKET     shift and go to state 65

  ! COMA            [ reduce using rule 64 (saveID -> .) ]
  ! CLOSINGBRACKET  [ reduce using rule 64 (saveID -> .) ]
  ! MULTIPLY        [ reduce using rule 83 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 83 (empty -> .) ]
  ! COMA            [ reduce using rule 83 (empty -> .) ]
  ! PLUS            [ reduce using rule 83 (empty -> .) ]
  ! MINUS           [ reduce using rule 83 (empty -> .) ]
  ! CLOSINGBRACKET  [ reduce using rule 83 (empty -> .) ]

    saveID                         shift and go to state 63
    Arr                            shift and go to state 64
    empty                          shift and go to state 66

state 100

    (57) P -> P MULTIPLY N .

    MULTIPLY        reduce using rule 57 (P -> P MULTIPLY N .)
    DIVIDE          reduce using rule 57 (P -> P MULTIPLY N .)
    PLUS            reduce using rule 57 (P -> P MULTIPLY N .)
    MINUS           reduce using rule 57 (P -> P MULTIPLY N .)
    LET             reduce using rule 57 (P -> P MULTIPLY N .)
    DIM             reduce using rule 57 (P -> P MULTIPLY N .)
    IF              reduce using rule 57 (P -> P MULTIPLY N .)
    FOR             reduce using rule 57 (P -> P MULTIPLY N .)
    WHILE           reduce using rule 57 (P -> P MULTIPLY N .)
    REPEAT          reduce using rule 57 (P -> P MULTIPLY N .)
    GOSUB           reduce using rule 57 (P -> P MULTIPLY N .)
    INPUT           reduce using rule 57 (P -> P MULTIPLY N .)
    PRINT           reduce using rule 57 (P -> P MULTIPLY N .)
    SUBPROCEDURE    reduce using rule 57 (P -> P MULTIPLY N .)
    END             reduce using rule 57 (P -> P MULTIPLY N .)
    RETURN          reduce using rule 57 (P -> P MULTIPLY N .)
    UNTIL           reduce using rule 57 (P -> P MULTIPLY N .)
    ELSE            reduce using rule 57 (P -> P MULTIPLY N .)
    EIF             reduce using rule 57 (P -> P MULTIPLY N .)
    WEND            reduce using rule 57 (P -> P MULTIPLY N .)
    NEXT            reduce using rule 57 (P -> P MULTIPLY N .)
    GREATHER        reduce using rule 57 (P -> P MULTIPLY N .)
    GREATHEREQUAL   reduce using rule 57 (P -> P MULTIPLY N .)
    SMALLER         reduce using rule 57 (P -> P MULTIPLY N .)
    SMALLEREQUAL    reduce using rule 57 (P -> P MULTIPLY N .)
    NOTEQUAL        reduce using rule 57 (P -> P MULTIPLY N .)
    EQUALTO         reduce using rule 57 (P -> P MULTIPLY N .)
    error           reduce using rule 57 (P -> P MULTIPLY N .)
    CLOSINGPAR      reduce using rule 57 (P -> P MULTIPLY N .)
    TO              reduce using rule 57 (P -> P MULTIPLY N .)
    COMA            reduce using rule 57 (P -> P MULTIPLY N .)
    CLOSINGBRACKET  reduce using rule 57 (P -> P MULTIPLY N .)
    DO              reduce using rule 57 (P -> P MULTIPLY N .)


state 101

    (58) P -> P DIVIDE N .

    MULTIPLY        reduce using rule 58 (P -> P DIVIDE N .)
    DIVIDE          reduce using rule 58 (P -> P DIVIDE N .)
    PLUS            reduce using rule 58 (P -> P DIVIDE N .)
    MINUS           reduce using rule 58 (P -> P DIVIDE N .)
    LET             reduce using rule 58 (P -> P DIVIDE N .)
    DIM             reduce using rule 58 (P -> P DIVIDE N .)
    IF              reduce using rule 58 (P -> P DIVIDE N .)
    FOR             reduce using rule 58 (P -> P DIVIDE N .)
    WHILE           reduce using rule 58 (P -> P DIVIDE N .)
    REPEAT          reduce using rule 58 (P -> P DIVIDE N .)
    GOSUB           reduce using rule 58 (P -> P DIVIDE N .)
    INPUT           reduce using rule 58 (P -> P DIVIDE N .)
    PRINT           reduce using rule 58 (P -> P DIVIDE N .)
    SUBPROCEDURE    reduce using rule 58 (P -> P DIVIDE N .)
    END             reduce using rule 58 (P -> P DIVIDE N .)
    RETURN          reduce using rule 58 (P -> P DIVIDE N .)
    UNTIL           reduce using rule 58 (P -> P DIVIDE N .)
    ELSE            reduce using rule 58 (P -> P DIVIDE N .)
    EIF             reduce using rule 58 (P -> P DIVIDE N .)
    WEND            reduce using rule 58 (P -> P DIVIDE N .)
    NEXT            reduce using rule 58 (P -> P DIVIDE N .)
    GREATHER        reduce using rule 58 (P -> P DIVIDE N .)
    GREATHEREQUAL   reduce using rule 58 (P -> P DIVIDE N .)
    SMALLER         reduce using rule 58 (P -> P DIVIDE N .)
    SMALLEREQUAL    reduce using rule 58 (P -> P DIVIDE N .)
    NOTEQUAL        reduce using rule 58 (P -> P DIVIDE N .)
    EQUALTO         reduce using rule 58 (P -> P DIVIDE N .)
    error           reduce using rule 58 (P -> P DIVIDE N .)
    CLOSINGPAR      reduce using rule 58 (P -> P DIVIDE N .)
    TO              reduce using rule 58 (P -> P DIVIDE N .)
    COMA            reduce using rule 58 (P -> P DIVIDE N .)
    CLOSINGBRACKET  reduce using rule 58 (P -> P DIVIDE N .)
    DO              reduce using rule 58 (P -> P DIVIDE N .)


state 102

    (62) N -> OPENPAR EA CLOSINGPAR .

    MULTIPLY        reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    DIVIDE          reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    PLUS            reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    MINUS           reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    LET             reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    DIM             reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    IF              reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    FOR             reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    WHILE           reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    REPEAT          reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    GOSUB           reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    INPUT           reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    PRINT           reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    SUBPROCEDURE    reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    END             reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    RETURN          reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    UNTIL           reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    ELSE            reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    EIF             reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    WEND            reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    NEXT            reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    GREATHER        reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    GREATHEREQUAL   reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    SMALLER         reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    SMALLEREQUAL    reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    NOTEQUAL        reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    EQUALTO         reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    error           reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    CLOSINGPAR      reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    TO              reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    COMA            reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    CLOSINGBRACKET  reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)
    DO              reduce using rule 62 (N -> OPENPAR EA CLOSINGPAR .)


state 103

    (3) V -> DIM setType Idv AS T . Arr
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (83) empty -> .

    OPENBRACKET     shift and go to state 65
    LET             reduce using rule 83 (empty -> .)
    DIM             reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    FOR             reduce using rule 83 (empty -> .)
    WHILE           reduce using rule 83 (empty -> .)
    REPEAT          reduce using rule 83 (empty -> .)
    GOSUB           reduce using rule 83 (empty -> .)
    INPUT           reduce using rule 83 (empty -> .)
    PRINT           reduce using rule 83 (empty -> .)
    SUBPROCEDURE    reduce using rule 83 (empty -> .)
    END             reduce using rule 83 (empty -> .)

    Arr                            shift and go to state 131
    empty                          shift and go to state 66

state 104

    (11) T -> INT .

    OPENBRACKET     reduce using rule 11 (T -> INT .)
    LET             reduce using rule 11 (T -> INT .)
    DIM             reduce using rule 11 (T -> INT .)
    IF              reduce using rule 11 (T -> INT .)
    FOR             reduce using rule 11 (T -> INT .)
    WHILE           reduce using rule 11 (T -> INT .)
    REPEAT          reduce using rule 11 (T -> INT .)
    GOSUB           reduce using rule 11 (T -> INT .)
    INPUT           reduce using rule 11 (T -> INT .)
    PRINT           reduce using rule 11 (T -> INT .)
    SUBPROCEDURE    reduce using rule 11 (T -> INT .)
    END             reduce using rule 11 (T -> INT .)
    RETURN          reduce using rule 11 (T -> INT .)
    UNTIL           reduce using rule 11 (T -> INT .)
    ELSE            reduce using rule 11 (T -> INT .)
    EIF             reduce using rule 11 (T -> INT .)
    WEND            reduce using rule 11 (T -> INT .)
    NEXT            reduce using rule 11 (T -> INT .)


state 105

    (12) T -> FLOAT .

    OPENBRACKET     reduce using rule 12 (T -> FLOAT .)
    LET             reduce using rule 12 (T -> FLOAT .)
    DIM             reduce using rule 12 (T -> FLOAT .)
    IF              reduce using rule 12 (T -> FLOAT .)
    FOR             reduce using rule 12 (T -> FLOAT .)
    WHILE           reduce using rule 12 (T -> FLOAT .)
    REPEAT          reduce using rule 12 (T -> FLOAT .)
    GOSUB           reduce using rule 12 (T -> FLOAT .)
    INPUT           reduce using rule 12 (T -> FLOAT .)
    PRINT           reduce using rule 12 (T -> FLOAT .)
    SUBPROCEDURE    reduce using rule 12 (T -> FLOAT .)
    END             reduce using rule 12 (T -> FLOAT .)
    RETURN          reduce using rule 12 (T -> FLOAT .)
    UNTIL           reduce using rule 12 (T -> FLOAT .)
    ELSE            reduce using rule 12 (T -> FLOAT .)
    EIF             reduce using rule 12 (T -> FLOAT .)
    WEND            reduce using rule 12 (T -> FLOAT .)
    NEXT            reduce using rule 12 (T -> FLOAT .)


state 106

    (13) T -> WORD .

    OPENBRACKET     reduce using rule 13 (T -> WORD .)
    LET             reduce using rule 13 (T -> WORD .)
    DIM             reduce using rule 13 (T -> WORD .)
    IF              reduce using rule 13 (T -> WORD .)
    FOR             reduce using rule 13 (T -> WORD .)
    WHILE           reduce using rule 13 (T -> WORD .)
    REPEAT          reduce using rule 13 (T -> WORD .)
    GOSUB           reduce using rule 13 (T -> WORD .)
    INPUT           reduce using rule 13 (T -> WORD .)
    PRINT           reduce using rule 13 (T -> WORD .)
    SUBPROCEDURE    reduce using rule 13 (T -> WORD .)
    END             reduce using rule 13 (T -> WORD .)
    RETURN          reduce using rule 13 (T -> WORD .)
    UNTIL           reduce using rule 13 (T -> WORD .)
    ELSE            reduce using rule 13 (T -> WORD .)
    EIF             reduce using rule 13 (T -> WORD .)
    WEND            reduce using rule 13 (T -> WORD .)
    NEXT            reduce using rule 13 (T -> WORD .)


state 107

    (44) Idv -> ID COMA Idv .

    AS              reduce using rule 44 (Idv -> ID COMA Idv .)
    EQUALS          reduce using rule 44 (Idv -> ID COMA Idv .)
    CLOSINGBRACKET  reduce using rule 44 (Idv -> ID COMA Idv .)


state 108

    (14) S -> SUBPROCEDURE ID fillSub . TWOPOINTS M RETURN endProcedure S

    TWOPOINTS       shift and go to state 132


state 109

    (22) E -> LET setType Idv EQUALS Ex .

    LET             reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    DIM             reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    IF              reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    FOR             reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    WHILE           reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    REPEAT          reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    GOSUB           reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    INPUT           reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    PRINT           reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    SUBPROCEDURE    reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    END             reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    RETURN          reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    UNTIL           reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    ELSE            reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    EIF             reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    WEND            reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)
    NEXT            reduce using rule 22 (E -> LET setType Idv EQUALS Ex .)


state 110

    (23) E -> DIM setType Idv AS T . Arr
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (83) empty -> .

    OPENBRACKET     shift and go to state 65
    LET             reduce using rule 83 (empty -> .)
    DIM             reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    FOR             reduce using rule 83 (empty -> .)
    WHILE           reduce using rule 83 (empty -> .)
    REPEAT          reduce using rule 83 (empty -> .)
    GOSUB           reduce using rule 83 (empty -> .)
    INPUT           reduce using rule 83 (empty -> .)
    PRINT           reduce using rule 83 (empty -> .)
    SUBPROCEDURE    reduce using rule 83 (empty -> .)
    END             reduce using rule 83 (empty -> .)
    RETURN          reduce using rule 83 (empty -> .)
    UNTIL           reduce using rule 83 (empty -> .)
    ELSE            reduce using rule 83 (empty -> .)
    EIF             reduce using rule 83 (empty -> .)
    WEND            reduce using rule 83 (empty -> .)
    NEXT            reduce using rule 83 (empty -> .)

    Arr                            shift and go to state 133
    empty                          shift and go to state 66

state 111

    (24) E -> IF EL THEN first_conditional F . Esf EIF final_conditional
    (42) Esf -> . ELSE second_conditional F
    (43) Esf -> . empty
    (83) empty -> .

    ELSE            shift and go to state 135
    EIF             reduce using rule 83 (empty -> .)

    Esf                            shift and go to state 134
    empty                          shift and go to state 136

state 112

    (72) EL -> OPENPAR O CLOSINGPAR OL . EL
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 137

state 113

    (73) OL -> AND .

    TRUE            reduce using rule 73 (OL -> AND .)
    FALSE           reduce using rule 73 (OL -> AND .)
    OPENPAR         reduce using rule 73 (OL -> AND .)


state 114

    (74) OL -> OR .

    TRUE            reduce using rule 74 (OL -> OR .)
    FALSE           reduce using rule 74 (OL -> OR .)
    OPENPAR         reduce using rule 74 (OL -> OR .)


state 115

    (75) OL -> NOT .

    TRUE            reduce using rule 75 (OL -> NOT .)
    FALSE           reduce using rule 75 (OL -> NOT .)
    OPENPAR         reduce using rule 75 (OL -> NOT .)


state 116

    (76) O -> Ex GREATHER Ex .

    CLOSINGPAR      reduce using rule 76 (O -> Ex GREATHER Ex .)


state 117

    (77) O -> Ex GREATHEREQUAL Ex .

    CLOSINGPAR      reduce using rule 77 (O -> Ex GREATHEREQUAL Ex .)


state 118

    (78) O -> Ex SMALLER Ex .

    CLOSINGPAR      reduce using rule 78 (O -> Ex SMALLER Ex .)


state 119

    (79) O -> Ex SMALLEREQUAL Ex .

    CLOSINGPAR      reduce using rule 79 (O -> Ex SMALLEREQUAL Ex .)


state 120

    (80) O -> Ex NOTEQUAL Ex .

    CLOSINGPAR      reduce using rule 80 (O -> Ex NOTEQUAL Ex .)


state 121

    (81) O -> Ex EQUALTO Ex .

    CLOSINGPAR      reduce using rule 81 (O -> Ex EQUALTO Ex .)


state 122

    (82) O -> Ex error Ex .

    CLOSINGPAR      reduce using rule 82 (O -> Ex error Ex .)


state 123

    (25) E -> FOR ID EQUALS EA for_assignation . TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end

    TO              shift and go to state 138


state 124

    (62) N -> OPENPAR EA . CLOSINGPAR
    (54) EA -> EA . PLUS P
    (55) EA -> EA . MINUS P

    CLOSINGPAR      shift and go to state 102
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 125

    (26) E -> WHILE while_first_conditional EL DO while_second_conditional . F WEND while_final_conditional
    (20) F -> . E F
    (21) F -> . empty
    (22) E -> . LET setType Idv EQUALS Ex
    (23) E -> . DIM setType Idv AS T Arr
    (24) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (25) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (26) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (27) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (28) E -> . GOSUB ID
    (29) E -> . INPUT IDEx
    (30) E -> . PRINT Ex
    (83) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    WEND            reduce using rule 83 (empty -> .)

    F                              shift and go to state 139
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 126

    (27) E -> REPEAT while_first_conditional F UNTIL EL . repeat_conditional
    (35) repeat_conditional -> .

    LET             reduce using rule 35 (repeat_conditional -> .)
    DIM             reduce using rule 35 (repeat_conditional -> .)
    IF              reduce using rule 35 (repeat_conditional -> .)
    FOR             reduce using rule 35 (repeat_conditional -> .)
    WHILE           reduce using rule 35 (repeat_conditional -> .)
    REPEAT          reduce using rule 35 (repeat_conditional -> .)
    GOSUB           reduce using rule 35 (repeat_conditional -> .)
    INPUT           reduce using rule 35 (repeat_conditional -> .)
    PRINT           reduce using rule 35 (repeat_conditional -> .)
    SUBPROCEDURE    reduce using rule 35 (repeat_conditional -> .)
    END             reduce using rule 35 (repeat_conditional -> .)
    RETURN          reduce using rule 35 (repeat_conditional -> .)
    UNTIL           reduce using rule 35 (repeat_conditional -> .)
    ELSE            reduce using rule 35 (repeat_conditional -> .)
    EIF             reduce using rule 35 (repeat_conditional -> .)
    WEND            reduce using rule 35 (repeat_conditional -> .)
    NEXT            reduce using rule 35 (repeat_conditional -> .)

    repeat_conditional             shift and go to state 140

state 127

    (49) IDEx -> ID OPENBRACKET setType Idv . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 141


state 128

    (5) Arr -> OPENBRACKET arr_space CLOSINGBRACKET .

    MULTIPLY        reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    DIVIDE          reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    PLUS            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    MINUS           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    LET             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    DIM             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    IF              reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    FOR             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    WHILE           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    REPEAT          reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    GOSUB           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    INPUT           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    PRINT           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    END             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    RETURN          reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    UNTIL           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    ELSE            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    EIF             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    WEND            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    NEXT            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    GREATHER        reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    GREATHEREQUAL   reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    SMALLER         reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    SMALLEREQUAL    reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    NOTEQUAL        reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    EQUALTO         reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    error           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    CLOSINGPAR      reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    DO              reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    AS              reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    EQUALS          reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    CLOSINGBRACKET  reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    TO              reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    COMA            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)


state 129

    (7) arr_space -> EA COMA . arr_space
    (7) arr_space -> . EA COMA arr_space
    (8) arr_space -> . ID COMA arr_space
    (9) arr_space -> . EA
    (10) arr_space -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 99
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    EA                             shift and go to state 98
    arr_space                      shift and go to state 142
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 130

    (8) arr_space -> ID COMA . arr_space
    (7) arr_space -> . EA COMA arr_space
    (8) arr_space -> . ID COMA arr_space
    (9) arr_space -> . EA
    (10) arr_space -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 99
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    arr_space                      shift and go to state 143
    EA                             shift and go to state 98
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 131

    (3) V -> DIM setType Idv AS T Arr .

    LET             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    DIM             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    IF              reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    FOR             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    WHILE           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    REPEAT          reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    GOSUB           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    INPUT           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    PRINT           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    SUBPROCEDURE    reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    END             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)


state 132

    (14) S -> SUBPROCEDURE ID fillSub TWOPOINTS . M RETURN endProcedure S
    (18) M -> . F M
    (19) M -> . empty
    (20) F -> . E F
    (21) F -> . empty
    (83) empty -> .
    (22) E -> . LET setType Idv EQUALS Ex
    (23) E -> . DIM setType Idv AS T Arr
    (24) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (25) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (26) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (27) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (28) E -> . GOSUB ID
    (29) E -> . INPUT IDEx
    (30) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RETURN          reduce using rule 83 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 83 (empty -> .) ]
  ! DIM             [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! FOR             [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! REPEAT          [ reduce using rule 83 (empty -> .) ]
  ! GOSUB           [ reduce using rule 83 (empty -> .) ]
  ! INPUT           [ reduce using rule 83 (empty -> .) ]
  ! PRINT           [ reduce using rule 83 (empty -> .) ]

    M                              shift and go to state 144
    F                              shift and go to state 7
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 133

    (23) E -> DIM setType Idv AS T Arr .

    LET             reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    DIM             reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    IF              reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    FOR             reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    WHILE           reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    REPEAT          reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    GOSUB           reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    INPUT           reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    PRINT           reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    SUBPROCEDURE    reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    END             reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    RETURN          reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    UNTIL           reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    ELSE            reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    EIF             reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    WEND            reduce using rule 23 (E -> DIM setType Idv AS T Arr .)
    NEXT            reduce using rule 23 (E -> DIM setType Idv AS T Arr .)


state 134

    (24) E -> IF EL THEN first_conditional F Esf . EIF final_conditional

    EIF             shift and go to state 145


state 135

    (42) Esf -> ELSE . second_conditional F
    (40) second_conditional -> .

    LET             reduce using rule 40 (second_conditional -> .)
    DIM             reduce using rule 40 (second_conditional -> .)
    IF              reduce using rule 40 (second_conditional -> .)
    FOR             reduce using rule 40 (second_conditional -> .)
    WHILE           reduce using rule 40 (second_conditional -> .)
    REPEAT          reduce using rule 40 (second_conditional -> .)
    GOSUB           reduce using rule 40 (second_conditional -> .)
    INPUT           reduce using rule 40 (second_conditional -> .)
    PRINT           reduce using rule 40 (second_conditional -> .)
    EIF             reduce using rule 40 (second_conditional -> .)

    second_conditional             shift and go to state 146

state 136

    (43) Esf -> empty .

    EIF             reduce using rule 43 (Esf -> empty .)


state 137

    (72) EL -> OPENPAR O CLOSINGPAR OL EL .

    THEN            reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    LET             reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    DIM             reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    IF              reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    FOR             reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    WHILE           reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    REPEAT          reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GOSUB           reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    INPUT           reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    PRINT           reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SUBPROCEDURE    reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    END             reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    RETURN          reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    UNTIL           reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    ELSE            reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    EIF             reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    WEND            reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    NEXT            reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GREATHER        reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GREATHEREQUAL   reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SMALLER         reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SMALLEREQUAL    reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    NOTEQUAL        reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    EQUALTO         reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    error           reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    DO              reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    CLOSINGPAR      reduce using rule 72 (EL -> OPENPAR O CLOSINGPAR OL EL .)


state 138

    (25) E -> FOR ID EQUALS EA for_assignation TO . Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (50) Ex -> . EA
    (51) Ex -> . EL
    (52) Ex -> . ID
    (54) EA -> . EA PLUS P
    (55) EA -> . EA MINUS P
    (56) EA -> . P
    (69) EL -> . TRUE
    (70) EL -> . FALSE
    (71) EL -> . OPENPAR O CLOSINGPAR
    (72) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) P -> . P MULTIPLY N
    (58) P -> . P DIVIDE N
    (59) P -> . N
    (60) N -> . cte saveID
    (61) N -> . ID saveID
    (62) N -> . OPENPAR EA CLOSINGPAR
    (63) N -> . ID Arr
    (65) cte -> . FLOATVAL
    (66) cte -> . INTVAL
    (67) cte -> . MINUS INTVAL
    (68) cte -> . MINUS FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 42
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 41

    EA                             shift and go to state 37
    Ex                             shift and go to state 147
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 43
    cte                            shift and go to state 44

state 139

    (26) E -> WHILE while_first_conditional EL DO while_second_conditional F . WEND while_final_conditional

    WEND            shift and go to state 148


state 140

    (27) E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .

    LET             reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    DIM             reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    IF              reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    FOR             reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    WHILE           reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    REPEAT          reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    GOSUB           reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    INPUT           reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    PRINT           reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    SUBPROCEDURE    reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    END             reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    RETURN          reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    UNTIL           reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    ELSE            reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    EIF             reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    WEND            reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    NEXT            reduce using rule 27 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)


state 141

    (49) IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .

    LET             reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    DIM             reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    IF              reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    FOR             reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WHILE           reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    REPEAT          reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GOSUB           reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    INPUT           reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    PRINT           reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    END             reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    RETURN          reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    UNTIL           reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    ELSE            reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    EIF             reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WEND            reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    NEXT            reduce using rule 49 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)


state 142

    (7) arr_space -> EA COMA arr_space .

    CLOSINGBRACKET  reduce using rule 7 (arr_space -> EA COMA arr_space .)


state 143

    (8) arr_space -> ID COMA arr_space .

    CLOSINGBRACKET  reduce using rule 8 (arr_space -> ID COMA arr_space .)


state 144

    (14) S -> SUBPROCEDURE ID fillSub TWOPOINTS M . RETURN endProcedure S

    RETURN          shift and go to state 149


state 145

    (24) E -> IF EL THEN first_conditional F Esf EIF . final_conditional
    (41) final_conditional -> .

    LET             reduce using rule 41 (final_conditional -> .)
    DIM             reduce using rule 41 (final_conditional -> .)
    IF              reduce using rule 41 (final_conditional -> .)
    FOR             reduce using rule 41 (final_conditional -> .)
    WHILE           reduce using rule 41 (final_conditional -> .)
    REPEAT          reduce using rule 41 (final_conditional -> .)
    GOSUB           reduce using rule 41 (final_conditional -> .)
    INPUT           reduce using rule 41 (final_conditional -> .)
    PRINT           reduce using rule 41 (final_conditional -> .)
    SUBPROCEDURE    reduce using rule 41 (final_conditional -> .)
    END             reduce using rule 41 (final_conditional -> .)
    RETURN          reduce using rule 41 (final_conditional -> .)
    UNTIL           reduce using rule 41 (final_conditional -> .)
    ELSE            reduce using rule 41 (final_conditional -> .)
    EIF             reduce using rule 41 (final_conditional -> .)
    WEND            reduce using rule 41 (final_conditional -> .)
    NEXT            reduce using rule 41 (final_conditional -> .)

    final_conditional              shift and go to state 150

state 146

    (42) Esf -> ELSE second_conditional . F
    (20) F -> . E F
    (21) F -> . empty
    (22) E -> . LET setType Idv EQUALS Ex
    (23) E -> . DIM setType Idv AS T Arr
    (24) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (25) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (26) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (27) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (28) E -> . GOSUB ID
    (29) E -> . INPUT IDEx
    (30) E -> . PRINT Ex
    (83) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    EIF             reduce using rule 83 (empty -> .)

    F                              shift and go to state 151
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 147

    (25) E -> FOR ID EQUALS EA for_assignation TO Ex . for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (32) for_conditional -> .

    DO              reduce using rule 32 (for_conditional -> .)

    for_conditional                shift and go to state 152

state 148

    (26) E -> WHILE while_first_conditional EL DO while_second_conditional F WEND . while_final_conditional
    (38) while_final_conditional -> .

    LET             reduce using rule 38 (while_final_conditional -> .)
    DIM             reduce using rule 38 (while_final_conditional -> .)
    IF              reduce using rule 38 (while_final_conditional -> .)
    FOR             reduce using rule 38 (while_final_conditional -> .)
    WHILE           reduce using rule 38 (while_final_conditional -> .)
    REPEAT          reduce using rule 38 (while_final_conditional -> .)
    GOSUB           reduce using rule 38 (while_final_conditional -> .)
    INPUT           reduce using rule 38 (while_final_conditional -> .)
    PRINT           reduce using rule 38 (while_final_conditional -> .)
    SUBPROCEDURE    reduce using rule 38 (while_final_conditional -> .)
    END             reduce using rule 38 (while_final_conditional -> .)
    RETURN          reduce using rule 38 (while_final_conditional -> .)
    UNTIL           reduce using rule 38 (while_final_conditional -> .)
    ELSE            reduce using rule 38 (while_final_conditional -> .)
    EIF             reduce using rule 38 (while_final_conditional -> .)
    WEND            reduce using rule 38 (while_final_conditional -> .)
    NEXT            reduce using rule 38 (while_final_conditional -> .)

    while_final_conditional        shift and go to state 153

state 149

    (14) S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN . endProcedure S
    (17) endProcedure -> .

    SUBPROCEDURE    reduce using rule 17 (endProcedure -> .)
    END             reduce using rule 17 (endProcedure -> .)

    endProcedure                   shift and go to state 154

state 150

    (24) E -> IF EL THEN first_conditional F Esf EIF final_conditional .

    LET             reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    DIM             reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    IF              reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    FOR             reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    WHILE           reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    REPEAT          reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    GOSUB           reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    INPUT           reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    PRINT           reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    SUBPROCEDURE    reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    END             reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    RETURN          reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    UNTIL           reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    ELSE            reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    EIF             reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    WEND            reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    NEXT            reduce using rule 24 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)


state 151

    (42) Esf -> ELSE second_conditional F .

    EIF             reduce using rule 42 (Esf -> ELSE second_conditional F .)


state 152

    (25) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional . DO for_save_conditional F NEXT ID for_conditional_end

    DO              shift and go to state 155


state 153

    (26) E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .

    LET             reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    DIM             reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    IF              reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    FOR             reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    WHILE           reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    REPEAT          reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    GOSUB           reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    INPUT           reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    PRINT           reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    SUBPROCEDURE    reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    END             reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    RETURN          reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    UNTIL           reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    ELSE            reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    EIF             reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    WEND            reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    NEXT            reduce using rule 26 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)


state 154

    (14) S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure . S
    (14) S -> . SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S
    (15) S -> . empty
    (83) empty -> .

    SUBPROCEDURE    shift and go to state 50
    END             reduce using rule 83 (empty -> .)

    S                              shift and go to state 156
    empty                          shift and go to state 51

state 155

    (25) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO . for_save_conditional F NEXT ID for_conditional_end
    (33) for_save_conditional -> .

    LET             reduce using rule 33 (for_save_conditional -> .)
    DIM             reduce using rule 33 (for_save_conditional -> .)
    IF              reduce using rule 33 (for_save_conditional -> .)
    FOR             reduce using rule 33 (for_save_conditional -> .)
    WHILE           reduce using rule 33 (for_save_conditional -> .)
    REPEAT          reduce using rule 33 (for_save_conditional -> .)
    GOSUB           reduce using rule 33 (for_save_conditional -> .)
    INPUT           reduce using rule 33 (for_save_conditional -> .)
    PRINT           reduce using rule 33 (for_save_conditional -> .)
    NEXT            reduce using rule 33 (for_save_conditional -> .)

    for_save_conditional           shift and go to state 157

state 156

    (14) S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S .

    END             reduce using rule 14 (S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S .)


state 157

    (25) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional . F NEXT ID for_conditional_end
    (20) F -> . E F
    (21) F -> . empty
    (22) E -> . LET setType Idv EQUALS Ex
    (23) E -> . DIM setType Idv AS T Arr
    (24) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (25) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (26) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (27) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (28) E -> . GOSUB ID
    (29) E -> . INPUT IDEx
    (30) E -> . PRINT Ex
    (83) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    NEXT            reduce using rule 83 (empty -> .)

    F                              shift and go to state 158
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 158

    (25) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F . NEXT ID for_conditional_end

    NEXT            shift and go to state 159


state 159

    (25) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT . ID for_conditional_end

    ID              shift and go to state 160


state 160

    (25) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID . for_conditional_end
    (34) for_conditional_end -> .

    LET             reduce using rule 34 (for_conditional_end -> .)
    DIM             reduce using rule 34 (for_conditional_end -> .)
    IF              reduce using rule 34 (for_conditional_end -> .)
    FOR             reduce using rule 34 (for_conditional_end -> .)
    WHILE           reduce using rule 34 (for_conditional_end -> .)
    REPEAT          reduce using rule 34 (for_conditional_end -> .)
    GOSUB           reduce using rule 34 (for_conditional_end -> .)
    INPUT           reduce using rule 34 (for_conditional_end -> .)
    PRINT           reduce using rule 34 (for_conditional_end -> .)
    SUBPROCEDURE    reduce using rule 34 (for_conditional_end -> .)
    END             reduce using rule 34 (for_conditional_end -> .)
    RETURN          reduce using rule 34 (for_conditional_end -> .)
    UNTIL           reduce using rule 34 (for_conditional_end -> .)
    ELSE            reduce using rule 34 (for_conditional_end -> .)
    EIF             reduce using rule 34 (for_conditional_end -> .)
    WEND            reduce using rule 34 (for_conditional_end -> .)
    NEXT            reduce using rule 34 (for_conditional_end -> .)

    for_conditional_end            shift and go to state 161

state 161

    (25) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .

    LET             reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    DIM             reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    IF              reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    FOR             reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    WHILE           reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    REPEAT          reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    GOSUB           reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    INPUT           reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    PRINT           reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    SUBPROCEDURE    reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    END             reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    RETURN          reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    UNTIL           reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    ELSE            reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    EIF             reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    WEND            reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    NEXT            reduce using rule 25 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DIM in state 2 resolved as shift
WARNING: shift/reduce conflict for LET in state 3 resolved as shift
WARNING: shift/reduce conflict for DIM in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 3 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 3 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for LET in state 7 resolved as shift
WARNING: shift/reduce conflict for DIM in state 7 resolved as shift
WARNING: shift/reduce conflict for IF in state 7 resolved as shift
WARNING: shift/reduce conflict for FOR in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 7 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 7 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 7 resolved as shift
WARNING: shift/reduce conflict for LET in state 9 resolved as shift
WARNING: shift/reduce conflict for DIM in state 9 resolved as shift
WARNING: shift/reduce conflict for IF in state 9 resolved as shift
WARNING: shift/reduce conflict for FOR in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 9 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 9 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 9 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 9 resolved as shift
WARNING: shift/reduce conflict for COMA in state 99 resolved as shift
WARNING: shift/reduce conflict for COMA in state 99 resolved as shift
WARNING: shift/reduce conflict for LET in state 132 resolved as shift
WARNING: shift/reduce conflict for DIM in state 132 resolved as shift
WARNING: shift/reduce conflict for IF in state 132 resolved as shift
WARNING: shift/reduce conflict for FOR in state 132 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 132 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 132 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 132 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 132 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 132 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (M -> empty)
WARNING: rejected rule (F -> empty) in state 8
WARNING: reduce/reduce conflict in state 39 resolved using rule (Ex -> ID)
WARNING: rejected rule (saveID -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 39 resolved using rule (saveID -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 39 resolved using rule (Ex -> ID)
WARNING: rejected rule (empty -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 48 resolved using rule (Idv -> ID)
WARNING: rejected rule (empty -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 89 resolved using rule (saveID -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 89
WARNING: reduce/reduce conflict in state 99 resolved using rule (arr_space -> ID)
WARNING: rejected rule (saveID -> <empty>) in state 99
WARNING: reduce/reduce conflict in state 99 resolved using rule (saveID -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 99
WARNING: reduce/reduce conflict in state 99 resolved using rule (arr_space -> ID)
WARNING: rejected rule (empty -> <empty>) in state 99
