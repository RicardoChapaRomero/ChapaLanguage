Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM V M S END
Rule 2     V -> DIM setType Idv AS T Arr
Rule 3     V -> empty
Rule 4     Arr -> OPENBRACKET EA CLOSINGBRACKET Arr
Rule 5     Arr -> OPENBRACKET ID CLOSINGBRACKET Arr
Rule 6     Arr -> empty
Rule 7     T -> INT
Rule 8     T -> FLOAT
Rule 9     T -> WORD
Rule 10    S -> SUBPROCEDURE ID TWOPOINTS M RETURN S
Rule 11    S -> empty
Rule 12    M -> F M
Rule 13    M -> empty
Rule 14    F -> E F
Rule 15    F -> empty
Rule 16    E -> LET setType Idv EQUALS Ex
Rule 17    E -> DIM setType Idv AS T Arr
Rule 18    E -> IF EL THEN first_conditional F Esf EIF final_conditional
Rule 19    E -> FOR ID EQUALS EA TO Ex F NEXT ID
Rule 20    E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
Rule 21    E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional
Rule 22    E -> GOSUB ID
Rule 23    E -> INPUT ES COMA IDEx
Rule 24    E -> PRINT Ex
Rule 25    repeat_conditional -> <empty>
Rule 26    while_first_conditional -> <empty>
Rule 27    while_second_conditional -> <empty>
Rule 28    while_final_conditional -> <empty>
Rule 29    first_conditional -> <empty>
Rule 30    second_conditional -> <empty>
Rule 31    final_conditional -> <empty>
Rule 32    Esf -> ELSE second_conditional F
Rule 33    Esf -> empty
Rule 34    Idv -> ID COMA Idv
Rule 35    Idv -> ID
Rule 36    setType -> <empty>
Rule 37    IDEx -> ID
Rule 38    IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET
Rule 39    Ex -> EA
Rule 40    Ex -> ES
Rule 41    Ex -> EL
Rule 42    Ex -> ID
Rule 43    ES -> WORDVAL
Rule 44    EA -> EA PLUS P
Rule 45    EA -> EA MINUS P
Rule 46    EA -> P
Rule 47    P -> P MULTIPLY N
Rule 48    P -> P DIVIDE N
Rule 49    P -> N
Rule 50    N -> cte saveID
Rule 51    N -> ID saveID
Rule 52    N -> OPENPAR EA CLOSINGPAR
Rule 53    N -> ID OPENBRACKET INTVAL CLOSINGBRACKET
Rule 54    N -> ID OPENBRACKET setType Idv CLOSINGBRACKET
Rule 55    saveID -> <empty>
Rule 56    cte -> INTVAL
Rule 57    cte -> FLOATVAL
Rule 58    EL -> TRUE
Rule 59    EL -> FALSE
Rule 60    EL -> OPENPAR O CLOSINGPAR
Rule 61    EL -> OPENPAR O CLOSINGPAR OL EL
Rule 62    OL -> AND
Rule 63    OL -> OR
Rule 64    OL -> NOT
Rule 65    O -> Ex GREATHER Ex
Rule 66    O -> Ex GREATHEREQUAL Ex
Rule 67    O -> Ex SMALLER Ex
Rule 68    O -> Ex SMALLEREQUAL Ex
Rule 69    O -> Ex NOTEQUAL Ex
Rule 70    O -> Ex EQUALTO Ex
Rule 71    O -> Ex error Ex
Rule 72    empty -> <empty>

Terminals, with rules where they appear

AND                  : 62
AS                   : 2 17
CLOSINGBRACKET       : 4 5 38 53 54
CLOSINGPAR           : 52 60 61
COMA                 : 23 34
COMMENT              : 
DIM                  : 2 17
DIVIDE               : 48
DO                   : 20
EIF                  : 18
ELSE                 : 32
END                  : 1
EQUALS               : 16 19
EQUALTO              : 70
FALSE                : 59
FLOAT                : 8
FLOATVAL             : 57
FOR                  : 19
GOSUB                : 22
GREATHER             : 65
GREATHEREQUAL        : 66
ID                   : 5 10 19 19 22 34 35 37 38 42 51 53 54
IF                   : 18
INPUT                : 23
INT                  : 7
INTVAL               : 53 56
LET                  : 16
MINUS                : 45
MULTIPLY             : 47
NEXT                 : 19
NOT                  : 64
NOTEQUAL             : 69
OPENBRACKET          : 4 5 38 53 54
OPENPAR              : 52 60 61
OR                   : 63
PLUS                 : 44
PRINT                : 24
PROGRAM              : 1
REPEAT               : 21
RETURN               : 10
SMALLER              : 67
SMALLEREQUAL         : 68
SUBPROCEDURE         : 10
THEN                 : 18
TO                   : 19
TRUE                 : 58
TWOPOINTS            : 10
UNTIL                : 21
WEND                 : 20
WHILE                : 20
WORD                 : 9
WORDVAL              : 43
error                : 71

Nonterminals, with rules where they appear

Arr                  : 2 4 5 17
E                    : 14
EA                   : 4 19 39 44 45 52
EL                   : 18 20 21 41 61
ES                   : 23 40
Esf                  : 18
Ex                   : 16 19 24 65 65 66 66 67 67 68 68 69 69 70 70 71 71
F                    : 12 14 18 19 20 21 32
IDEx                 : 23
Idv                  : 2 16 17 34 38 54
M                    : 1 10 12
N                    : 47 48 49
O                    : 60 61
OL                   : 61
P                    : 44 45 46 47 48
PROGRAMA             : 0
S                    : 1 10
T                    : 2 17
V                    : 1
cte                  : 50
empty                : 3 6 11 13 15 33
final_conditional    : 18
first_conditional    : 18
repeat_conditional   : 21
saveID               : 50 51
second_conditional   : 32
setType              : 2 16 17 38 54
while_final_conditional : 20
while_first_conditional : 20 21
while_second_conditional : 20

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM V M S END

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . V M S END
    (2) V -> . DIM setType Idv AS T Arr
    (3) V -> . empty
    (72) empty -> .

  ! shift/reduce conflict for DIM resolved as shift
    DIM             shift and go to state 4
    LET             reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    REPEAT          reduce using rule 72 (empty -> .)
    GOSUB           reduce using rule 72 (empty -> .)
    INPUT           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    SUBPROCEDURE    reduce using rule 72 (empty -> .)
    END             reduce using rule 72 (empty -> .)

  ! DIM             [ reduce using rule 72 (empty -> .) ]

    V                              shift and go to state 3
    empty                          shift and go to state 5

state 3

    (1) PROGRAMA -> PROGRAM V . M S END
    (12) M -> . F M
    (13) M -> . empty
    (14) F -> . E F
    (15) F -> . empty
    (72) empty -> .
    (16) E -> . LET setType Idv EQUALS Ex
    (17) E -> . DIM setType Idv AS T Arr
    (18) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (19) E -> . FOR ID EQUALS EA TO Ex F NEXT ID
    (20) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (21) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (22) E -> . GOSUB ID
    (23) E -> . INPUT ES COMA IDEx
    (24) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    SUBPROCEDURE    reduce using rule 72 (empty -> .)
    END             reduce using rule 72 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 72 (empty -> .) ]
  ! DIM             [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! GOSUB           [ reduce using rule 72 (empty -> .) ]
  ! INPUT           [ reduce using rule 72 (empty -> .) ]
  ! PRINT           [ reduce using rule 72 (empty -> .) ]

    M                              shift and go to state 6
    F                              shift and go to state 7
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 4

    (2) V -> DIM . setType Idv AS T Arr
    (36) setType -> .

    ID              reduce using rule 36 (setType -> .)

    setType                        shift and go to state 19

state 5

    (3) V -> empty .

    LET             reduce using rule 3 (V -> empty .)
    DIM             reduce using rule 3 (V -> empty .)
    IF              reduce using rule 3 (V -> empty .)
    FOR             reduce using rule 3 (V -> empty .)
    WHILE           reduce using rule 3 (V -> empty .)
    REPEAT          reduce using rule 3 (V -> empty .)
    GOSUB           reduce using rule 3 (V -> empty .)
    INPUT           reduce using rule 3 (V -> empty .)
    PRINT           reduce using rule 3 (V -> empty .)
    SUBPROCEDURE    reduce using rule 3 (V -> empty .)
    END             reduce using rule 3 (V -> empty .)


state 6

    (1) PROGRAMA -> PROGRAM V M . S END
    (10) S -> . SUBPROCEDURE ID TWOPOINTS M RETURN S
    (11) S -> . empty
    (72) empty -> .

    SUBPROCEDURE    shift and go to state 21
    END             reduce using rule 72 (empty -> .)

    S                              shift and go to state 20
    empty                          shift and go to state 22

state 7

    (12) M -> F . M
    (12) M -> . F M
    (13) M -> . empty
    (14) F -> . E F
    (15) F -> . empty
    (72) empty -> .
    (16) E -> . LET setType Idv EQUALS Ex
    (17) E -> . DIM setType Idv AS T Arr
    (18) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (19) E -> . FOR ID EQUALS EA TO Ex F NEXT ID
    (20) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (21) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (22) E -> . GOSUB ID
    (23) E -> . INPUT ES COMA IDEx
    (24) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    SUBPROCEDURE    reduce using rule 72 (empty -> .)
    END             reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 72 (empty -> .) ]
  ! DIM             [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! GOSUB           [ reduce using rule 72 (empty -> .) ]
  ! INPUT           [ reduce using rule 72 (empty -> .) ]
  ! PRINT           [ reduce using rule 72 (empty -> .) ]

    F                              shift and go to state 7
    M                              shift and go to state 23
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 8

    (13) M -> empty .
    (15) F -> empty .

  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 13 (M -> empty .)
  ! reduce/reduce conflict for END resolved using rule 13 (M -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 13 (M -> empty .)
    SUBPROCEDURE    reduce using rule 13 (M -> empty .)
    END             reduce using rule 13 (M -> empty .)
    RETURN          reduce using rule 13 (M -> empty .)
    LET             reduce using rule 15 (F -> empty .)
    DIM             reduce using rule 15 (F -> empty .)
    IF              reduce using rule 15 (F -> empty .)
    FOR             reduce using rule 15 (F -> empty .)
    WHILE           reduce using rule 15 (F -> empty .)
    REPEAT          reduce using rule 15 (F -> empty .)
    GOSUB           reduce using rule 15 (F -> empty .)
    INPUT           reduce using rule 15 (F -> empty .)
    PRINT           reduce using rule 15 (F -> empty .)

  ! SUBPROCEDURE    [ reduce using rule 15 (F -> empty .) ]
  ! END             [ reduce using rule 15 (F -> empty .) ]
  ! RETURN          [ reduce using rule 15 (F -> empty .) ]


state 9

    (14) F -> E . F
    (14) F -> . E F
    (15) F -> . empty
    (16) E -> . LET setType Idv EQUALS Ex
    (17) E -> . DIM setType Idv AS T Arr
    (18) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (19) E -> . FOR ID EQUALS EA TO Ex F NEXT ID
    (20) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (21) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (22) E -> . GOSUB ID
    (23) E -> . INPUT ES COMA IDEx
    (24) E -> . PRINT Ex
    (72) empty -> .

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    SUBPROCEDURE    reduce using rule 72 (empty -> .)
    END             reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    UNTIL           reduce using rule 72 (empty -> .)
    ELSE            reduce using rule 72 (empty -> .)
    EIF             reduce using rule 72 (empty -> .)
    WEND            reduce using rule 72 (empty -> .)
    NEXT            reduce using rule 72 (empty -> .)

  ! LET             [ reduce using rule 72 (empty -> .) ]
  ! DIM             [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! GOSUB           [ reduce using rule 72 (empty -> .) ]
  ! INPUT           [ reduce using rule 72 (empty -> .) ]
  ! PRINT           [ reduce using rule 72 (empty -> .) ]

    E                              shift and go to state 9
    F                              shift and go to state 24
    empty                          shift and go to state 25

state 10

    (16) E -> LET . setType Idv EQUALS Ex
    (36) setType -> .

    ID              reduce using rule 36 (setType -> .)

    setType                        shift and go to state 26

state 11

    (17) E -> DIM . setType Idv AS T Arr
    (36) setType -> .

    ID              reduce using rule 36 (setType -> .)

    setType                        shift and go to state 27

state 12

    (18) E -> IF . EL THEN first_conditional F Esf EIF final_conditional
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 31

    EL                             shift and go to state 28

state 13

    (19) E -> FOR . ID EQUALS EA TO Ex F NEXT ID

    ID              shift and go to state 32


state 14

    (20) E -> WHILE . while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (26) while_first_conditional -> .

    TRUE            reduce using rule 26 (while_first_conditional -> .)
    FALSE           reduce using rule 26 (while_first_conditional -> .)
    OPENPAR         reduce using rule 26 (while_first_conditional -> .)

    while_first_conditional        shift and go to state 33

state 15

    (21) E -> REPEAT . while_first_conditional F UNTIL EL repeat_conditional
    (26) while_first_conditional -> .

    LET             reduce using rule 26 (while_first_conditional -> .)
    DIM             reduce using rule 26 (while_first_conditional -> .)
    IF              reduce using rule 26 (while_first_conditional -> .)
    FOR             reduce using rule 26 (while_first_conditional -> .)
    WHILE           reduce using rule 26 (while_first_conditional -> .)
    REPEAT          reduce using rule 26 (while_first_conditional -> .)
    GOSUB           reduce using rule 26 (while_first_conditional -> .)
    INPUT           reduce using rule 26 (while_first_conditional -> .)
    PRINT           reduce using rule 26 (while_first_conditional -> .)
    UNTIL           reduce using rule 26 (while_first_conditional -> .)

    while_first_conditional        shift and go to state 34

state 16

    (22) E -> GOSUB . ID

    ID              shift and go to state 35


state 17

    (23) E -> INPUT . ES COMA IDEx
    (43) ES -> . WORDVAL

    WORDVAL         shift and go to state 37

    ES                             shift and go to state 36

state 18

    (24) E -> PRINT . Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    Ex                             shift and go to state 38
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 19

    (2) V -> DIM setType . Idv AS T Arr
    (34) Idv -> . ID COMA Idv
    (35) Idv -> . ID

    ID              shift and go to state 50

    Idv                            shift and go to state 49

state 20

    (1) PROGRAMA -> PROGRAM V M S . END

    END             shift and go to state 51


state 21

    (10) S -> SUBPROCEDURE . ID TWOPOINTS M RETURN S

    ID              shift and go to state 52


state 22

    (11) S -> empty .

    END             reduce using rule 11 (S -> empty .)


state 23

    (12) M -> F M .

    SUBPROCEDURE    reduce using rule 12 (M -> F M .)
    END             reduce using rule 12 (M -> F M .)
    RETURN          reduce using rule 12 (M -> F M .)


state 24

    (14) F -> E F .

    LET             reduce using rule 14 (F -> E F .)
    DIM             reduce using rule 14 (F -> E F .)
    IF              reduce using rule 14 (F -> E F .)
    FOR             reduce using rule 14 (F -> E F .)
    WHILE           reduce using rule 14 (F -> E F .)
    REPEAT          reduce using rule 14 (F -> E F .)
    GOSUB           reduce using rule 14 (F -> E F .)
    INPUT           reduce using rule 14 (F -> E F .)
    PRINT           reduce using rule 14 (F -> E F .)
    SUBPROCEDURE    reduce using rule 14 (F -> E F .)
    END             reduce using rule 14 (F -> E F .)
    RETURN          reduce using rule 14 (F -> E F .)
    UNTIL           reduce using rule 14 (F -> E F .)
    ELSE            reduce using rule 14 (F -> E F .)
    EIF             reduce using rule 14 (F -> E F .)
    WEND            reduce using rule 14 (F -> E F .)
    NEXT            reduce using rule 14 (F -> E F .)


state 25

    (15) F -> empty .

    LET             reduce using rule 15 (F -> empty .)
    DIM             reduce using rule 15 (F -> empty .)
    IF              reduce using rule 15 (F -> empty .)
    FOR             reduce using rule 15 (F -> empty .)
    WHILE           reduce using rule 15 (F -> empty .)
    REPEAT          reduce using rule 15 (F -> empty .)
    GOSUB           reduce using rule 15 (F -> empty .)
    INPUT           reduce using rule 15 (F -> empty .)
    PRINT           reduce using rule 15 (F -> empty .)
    SUBPROCEDURE    reduce using rule 15 (F -> empty .)
    END             reduce using rule 15 (F -> empty .)
    RETURN          reduce using rule 15 (F -> empty .)
    UNTIL           reduce using rule 15 (F -> empty .)
    ELSE            reduce using rule 15 (F -> empty .)
    EIF             reduce using rule 15 (F -> empty .)
    WEND            reduce using rule 15 (F -> empty .)
    NEXT            reduce using rule 15 (F -> empty .)


state 26

    (16) E -> LET setType . Idv EQUALS Ex
    (34) Idv -> . ID COMA Idv
    (35) Idv -> . ID

    ID              shift and go to state 50

    Idv                            shift and go to state 53

state 27

    (17) E -> DIM setType . Idv AS T Arr
    (34) Idv -> . ID COMA Idv
    (35) Idv -> . ID

    ID              shift and go to state 50

    Idv                            shift and go to state 54

state 28

    (18) E -> IF EL . THEN first_conditional F Esf EIF final_conditional

    THEN            shift and go to state 55


state 29

    (58) EL -> TRUE .

    THEN            reduce using rule 58 (EL -> TRUE .)
    LET             reduce using rule 58 (EL -> TRUE .)
    DIM             reduce using rule 58 (EL -> TRUE .)
    IF              reduce using rule 58 (EL -> TRUE .)
    FOR             reduce using rule 58 (EL -> TRUE .)
    WHILE           reduce using rule 58 (EL -> TRUE .)
    REPEAT          reduce using rule 58 (EL -> TRUE .)
    GOSUB           reduce using rule 58 (EL -> TRUE .)
    INPUT           reduce using rule 58 (EL -> TRUE .)
    PRINT           reduce using rule 58 (EL -> TRUE .)
    SUBPROCEDURE    reduce using rule 58 (EL -> TRUE .)
    END             reduce using rule 58 (EL -> TRUE .)
    RETURN          reduce using rule 58 (EL -> TRUE .)
    UNTIL           reduce using rule 58 (EL -> TRUE .)
    ELSE            reduce using rule 58 (EL -> TRUE .)
    EIF             reduce using rule 58 (EL -> TRUE .)
    WEND            reduce using rule 58 (EL -> TRUE .)
    NEXT            reduce using rule 58 (EL -> TRUE .)
    GREATHER        reduce using rule 58 (EL -> TRUE .)
    GREATHEREQUAL   reduce using rule 58 (EL -> TRUE .)
    SMALLER         reduce using rule 58 (EL -> TRUE .)
    SMALLEREQUAL    reduce using rule 58 (EL -> TRUE .)
    NOTEQUAL        reduce using rule 58 (EL -> TRUE .)
    EQUALTO         reduce using rule 58 (EL -> TRUE .)
    error           reduce using rule 58 (EL -> TRUE .)
    DO              reduce using rule 58 (EL -> TRUE .)
    CLOSINGPAR      reduce using rule 58 (EL -> TRUE .)


state 30

    (59) EL -> FALSE .

    THEN            reduce using rule 59 (EL -> FALSE .)
    LET             reduce using rule 59 (EL -> FALSE .)
    DIM             reduce using rule 59 (EL -> FALSE .)
    IF              reduce using rule 59 (EL -> FALSE .)
    FOR             reduce using rule 59 (EL -> FALSE .)
    WHILE           reduce using rule 59 (EL -> FALSE .)
    REPEAT          reduce using rule 59 (EL -> FALSE .)
    GOSUB           reduce using rule 59 (EL -> FALSE .)
    INPUT           reduce using rule 59 (EL -> FALSE .)
    PRINT           reduce using rule 59 (EL -> FALSE .)
    SUBPROCEDURE    reduce using rule 59 (EL -> FALSE .)
    END             reduce using rule 59 (EL -> FALSE .)
    RETURN          reduce using rule 59 (EL -> FALSE .)
    UNTIL           reduce using rule 59 (EL -> FALSE .)
    ELSE            reduce using rule 59 (EL -> FALSE .)
    EIF             reduce using rule 59 (EL -> FALSE .)
    WEND            reduce using rule 59 (EL -> FALSE .)
    NEXT            reduce using rule 59 (EL -> FALSE .)
    GREATHER        reduce using rule 59 (EL -> FALSE .)
    GREATHEREQUAL   reduce using rule 59 (EL -> FALSE .)
    SMALLER         reduce using rule 59 (EL -> FALSE .)
    SMALLEREQUAL    reduce using rule 59 (EL -> FALSE .)
    NOTEQUAL        reduce using rule 59 (EL -> FALSE .)
    EQUALTO         reduce using rule 59 (EL -> FALSE .)
    error           reduce using rule 59 (EL -> FALSE .)
    DO              reduce using rule 59 (EL -> FALSE .)
    CLOSINGPAR      reduce using rule 59 (EL -> FALSE .)


state 31

    (60) EL -> OPENPAR . O CLOSINGPAR
    (61) EL -> OPENPAR . O CLOSINGPAR OL EL
    (65) O -> . Ex GREATHER Ex
    (66) O -> . Ex GREATHEREQUAL Ex
    (67) O -> . Ex SMALLER Ex
    (68) O -> . Ex SMALLEREQUAL Ex
    (69) O -> . Ex NOTEQUAL Ex
    (70) O -> . Ex EQUALTO Ex
    (71) O -> . Ex error Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    O                              shift and go to state 56
    EL                             shift and go to state 41
    Ex                             shift and go to state 57
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 32

    (19) E -> FOR ID . EQUALS EA TO Ex F NEXT ID

    EQUALS          shift and go to state 58


state 33

    (20) E -> WHILE while_first_conditional . EL DO while_second_conditional F WEND while_final_conditional
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 31

    EL                             shift and go to state 59

state 34

    (21) E -> REPEAT while_first_conditional . F UNTIL EL repeat_conditional
    (14) F -> . E F
    (15) F -> . empty
    (16) E -> . LET setType Idv EQUALS Ex
    (17) E -> . DIM setType Idv AS T Arr
    (18) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (19) E -> . FOR ID EQUALS EA TO Ex F NEXT ID
    (20) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (21) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (22) E -> . GOSUB ID
    (23) E -> . INPUT ES COMA IDEx
    (24) E -> . PRINT Ex
    (72) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    UNTIL           reduce using rule 72 (empty -> .)

    F                              shift and go to state 60
    E                              shift and go to state 9
    empty                          shift and go to state 25

state 35

    (22) E -> GOSUB ID .

    LET             reduce using rule 22 (E -> GOSUB ID .)
    DIM             reduce using rule 22 (E -> GOSUB ID .)
    IF              reduce using rule 22 (E -> GOSUB ID .)
    FOR             reduce using rule 22 (E -> GOSUB ID .)
    WHILE           reduce using rule 22 (E -> GOSUB ID .)
    REPEAT          reduce using rule 22 (E -> GOSUB ID .)
    GOSUB           reduce using rule 22 (E -> GOSUB ID .)
    INPUT           reduce using rule 22 (E -> GOSUB ID .)
    PRINT           reduce using rule 22 (E -> GOSUB ID .)
    SUBPROCEDURE    reduce using rule 22 (E -> GOSUB ID .)
    END             reduce using rule 22 (E -> GOSUB ID .)
    RETURN          reduce using rule 22 (E -> GOSUB ID .)
    UNTIL           reduce using rule 22 (E -> GOSUB ID .)
    ELSE            reduce using rule 22 (E -> GOSUB ID .)
    EIF             reduce using rule 22 (E -> GOSUB ID .)
    WEND            reduce using rule 22 (E -> GOSUB ID .)
    NEXT            reduce using rule 22 (E -> GOSUB ID .)


state 36

    (23) E -> INPUT ES . COMA IDEx

    COMA            shift and go to state 61


state 37

    (43) ES -> WORDVAL .

    COMA            reduce using rule 43 (ES -> WORDVAL .)
    LET             reduce using rule 43 (ES -> WORDVAL .)
    DIM             reduce using rule 43 (ES -> WORDVAL .)
    IF              reduce using rule 43 (ES -> WORDVAL .)
    FOR             reduce using rule 43 (ES -> WORDVAL .)
    WHILE           reduce using rule 43 (ES -> WORDVAL .)
    REPEAT          reduce using rule 43 (ES -> WORDVAL .)
    GOSUB           reduce using rule 43 (ES -> WORDVAL .)
    INPUT           reduce using rule 43 (ES -> WORDVAL .)
    PRINT           reduce using rule 43 (ES -> WORDVAL .)
    SUBPROCEDURE    reduce using rule 43 (ES -> WORDVAL .)
    END             reduce using rule 43 (ES -> WORDVAL .)
    RETURN          reduce using rule 43 (ES -> WORDVAL .)
    UNTIL           reduce using rule 43 (ES -> WORDVAL .)
    ELSE            reduce using rule 43 (ES -> WORDVAL .)
    EIF             reduce using rule 43 (ES -> WORDVAL .)
    WEND            reduce using rule 43 (ES -> WORDVAL .)
    NEXT            reduce using rule 43 (ES -> WORDVAL .)
    GREATHER        reduce using rule 43 (ES -> WORDVAL .)
    GREATHEREQUAL   reduce using rule 43 (ES -> WORDVAL .)
    SMALLER         reduce using rule 43 (ES -> WORDVAL .)
    SMALLEREQUAL    reduce using rule 43 (ES -> WORDVAL .)
    NOTEQUAL        reduce using rule 43 (ES -> WORDVAL .)
    EQUALTO         reduce using rule 43 (ES -> WORDVAL .)
    error           reduce using rule 43 (ES -> WORDVAL .)
    CLOSINGPAR      reduce using rule 43 (ES -> WORDVAL .)


state 38

    (24) E -> PRINT Ex .

    LET             reduce using rule 24 (E -> PRINT Ex .)
    DIM             reduce using rule 24 (E -> PRINT Ex .)
    IF              reduce using rule 24 (E -> PRINT Ex .)
    FOR             reduce using rule 24 (E -> PRINT Ex .)
    WHILE           reduce using rule 24 (E -> PRINT Ex .)
    REPEAT          reduce using rule 24 (E -> PRINT Ex .)
    GOSUB           reduce using rule 24 (E -> PRINT Ex .)
    INPUT           reduce using rule 24 (E -> PRINT Ex .)
    PRINT           reduce using rule 24 (E -> PRINT Ex .)
    SUBPROCEDURE    reduce using rule 24 (E -> PRINT Ex .)
    END             reduce using rule 24 (E -> PRINT Ex .)
    RETURN          reduce using rule 24 (E -> PRINT Ex .)
    UNTIL           reduce using rule 24 (E -> PRINT Ex .)
    ELSE            reduce using rule 24 (E -> PRINT Ex .)
    EIF             reduce using rule 24 (E -> PRINT Ex .)
    WEND            reduce using rule 24 (E -> PRINT Ex .)
    NEXT            reduce using rule 24 (E -> PRINT Ex .)


state 39

    (39) Ex -> EA .
    (44) EA -> EA . PLUS P
    (45) EA -> EA . MINUS P

    LET             reduce using rule 39 (Ex -> EA .)
    DIM             reduce using rule 39 (Ex -> EA .)
    IF              reduce using rule 39 (Ex -> EA .)
    FOR             reduce using rule 39 (Ex -> EA .)
    WHILE           reduce using rule 39 (Ex -> EA .)
    REPEAT          reduce using rule 39 (Ex -> EA .)
    GOSUB           reduce using rule 39 (Ex -> EA .)
    INPUT           reduce using rule 39 (Ex -> EA .)
    PRINT           reduce using rule 39 (Ex -> EA .)
    SUBPROCEDURE    reduce using rule 39 (Ex -> EA .)
    END             reduce using rule 39 (Ex -> EA .)
    RETURN          reduce using rule 39 (Ex -> EA .)
    UNTIL           reduce using rule 39 (Ex -> EA .)
    ELSE            reduce using rule 39 (Ex -> EA .)
    EIF             reduce using rule 39 (Ex -> EA .)
    WEND            reduce using rule 39 (Ex -> EA .)
    NEXT            reduce using rule 39 (Ex -> EA .)
    GREATHER        reduce using rule 39 (Ex -> EA .)
    GREATHEREQUAL   reduce using rule 39 (Ex -> EA .)
    SMALLER         reduce using rule 39 (Ex -> EA .)
    SMALLEREQUAL    reduce using rule 39 (Ex -> EA .)
    NOTEQUAL        reduce using rule 39 (Ex -> EA .)
    EQUALTO         reduce using rule 39 (Ex -> EA .)
    error           reduce using rule 39 (Ex -> EA .)
    CLOSINGPAR      reduce using rule 39 (Ex -> EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 40

    (40) Ex -> ES .

    LET             reduce using rule 40 (Ex -> ES .)
    DIM             reduce using rule 40 (Ex -> ES .)
    IF              reduce using rule 40 (Ex -> ES .)
    FOR             reduce using rule 40 (Ex -> ES .)
    WHILE           reduce using rule 40 (Ex -> ES .)
    REPEAT          reduce using rule 40 (Ex -> ES .)
    GOSUB           reduce using rule 40 (Ex -> ES .)
    INPUT           reduce using rule 40 (Ex -> ES .)
    PRINT           reduce using rule 40 (Ex -> ES .)
    SUBPROCEDURE    reduce using rule 40 (Ex -> ES .)
    END             reduce using rule 40 (Ex -> ES .)
    RETURN          reduce using rule 40 (Ex -> ES .)
    UNTIL           reduce using rule 40 (Ex -> ES .)
    ELSE            reduce using rule 40 (Ex -> ES .)
    EIF             reduce using rule 40 (Ex -> ES .)
    WEND            reduce using rule 40 (Ex -> ES .)
    NEXT            reduce using rule 40 (Ex -> ES .)
    GREATHER        reduce using rule 40 (Ex -> ES .)
    GREATHEREQUAL   reduce using rule 40 (Ex -> ES .)
    SMALLER         reduce using rule 40 (Ex -> ES .)
    SMALLEREQUAL    reduce using rule 40 (Ex -> ES .)
    NOTEQUAL        reduce using rule 40 (Ex -> ES .)
    EQUALTO         reduce using rule 40 (Ex -> ES .)
    error           reduce using rule 40 (Ex -> ES .)
    CLOSINGPAR      reduce using rule 40 (Ex -> ES .)


state 41

    (41) Ex -> EL .

    LET             reduce using rule 41 (Ex -> EL .)
    DIM             reduce using rule 41 (Ex -> EL .)
    IF              reduce using rule 41 (Ex -> EL .)
    FOR             reduce using rule 41 (Ex -> EL .)
    WHILE           reduce using rule 41 (Ex -> EL .)
    REPEAT          reduce using rule 41 (Ex -> EL .)
    GOSUB           reduce using rule 41 (Ex -> EL .)
    INPUT           reduce using rule 41 (Ex -> EL .)
    PRINT           reduce using rule 41 (Ex -> EL .)
    SUBPROCEDURE    reduce using rule 41 (Ex -> EL .)
    END             reduce using rule 41 (Ex -> EL .)
    RETURN          reduce using rule 41 (Ex -> EL .)
    UNTIL           reduce using rule 41 (Ex -> EL .)
    ELSE            reduce using rule 41 (Ex -> EL .)
    EIF             reduce using rule 41 (Ex -> EL .)
    WEND            reduce using rule 41 (Ex -> EL .)
    NEXT            reduce using rule 41 (Ex -> EL .)
    GREATHER        reduce using rule 41 (Ex -> EL .)
    GREATHEREQUAL   reduce using rule 41 (Ex -> EL .)
    SMALLER         reduce using rule 41 (Ex -> EL .)
    SMALLEREQUAL    reduce using rule 41 (Ex -> EL .)
    NOTEQUAL        reduce using rule 41 (Ex -> EL .)
    EQUALTO         reduce using rule 41 (Ex -> EL .)
    error           reduce using rule 41 (Ex -> EL .)
    CLOSINGPAR      reduce using rule 41 (Ex -> EL .)


state 42

    (42) Ex -> ID .
    (51) N -> ID . saveID
    (53) N -> ID . OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> ID . OPENBRACKET setType Idv CLOSINGBRACKET
    (55) saveID -> .

  ! reduce/reduce conflict for LET resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for DIM resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for REPEAT resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for GOSUB resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for INPUT resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for END resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for UNTIL resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for EIF resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for WEND resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for NEXT resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for GREATHER resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for SMALLEREQUAL resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for EQUALTO resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for error resolved using rule 42 (Ex -> ID .)
  ! reduce/reduce conflict for CLOSINGPAR resolved using rule 42 (Ex -> ID .)
    LET             reduce using rule 42 (Ex -> ID .)
    DIM             reduce using rule 42 (Ex -> ID .)
    IF              reduce using rule 42 (Ex -> ID .)
    FOR             reduce using rule 42 (Ex -> ID .)
    WHILE           reduce using rule 42 (Ex -> ID .)
    REPEAT          reduce using rule 42 (Ex -> ID .)
    GOSUB           reduce using rule 42 (Ex -> ID .)
    INPUT           reduce using rule 42 (Ex -> ID .)
    PRINT           reduce using rule 42 (Ex -> ID .)
    SUBPROCEDURE    reduce using rule 42 (Ex -> ID .)
    END             reduce using rule 42 (Ex -> ID .)
    RETURN          reduce using rule 42 (Ex -> ID .)
    UNTIL           reduce using rule 42 (Ex -> ID .)
    ELSE            reduce using rule 42 (Ex -> ID .)
    EIF             reduce using rule 42 (Ex -> ID .)
    WEND            reduce using rule 42 (Ex -> ID .)
    NEXT            reduce using rule 42 (Ex -> ID .)
    GREATHER        reduce using rule 42 (Ex -> ID .)
    GREATHEREQUAL   reduce using rule 42 (Ex -> ID .)
    SMALLER         reduce using rule 42 (Ex -> ID .)
    SMALLEREQUAL    reduce using rule 42 (Ex -> ID .)
    NOTEQUAL        reduce using rule 42 (Ex -> ID .)
    EQUALTO         reduce using rule 42 (Ex -> ID .)
    error           reduce using rule 42 (Ex -> ID .)
    CLOSINGPAR      reduce using rule 42 (Ex -> ID .)
    OPENBRACKET     shift and go to state 65
    MULTIPLY        reduce using rule 55 (saveID -> .)
    DIVIDE          reduce using rule 55 (saveID -> .)
    PLUS            reduce using rule 55 (saveID -> .)
    MINUS           reduce using rule 55 (saveID -> .)

  ! LET             [ reduce using rule 55 (saveID -> .) ]
  ! DIM             [ reduce using rule 55 (saveID -> .) ]
  ! IF              [ reduce using rule 55 (saveID -> .) ]
  ! FOR             [ reduce using rule 55 (saveID -> .) ]
  ! WHILE           [ reduce using rule 55 (saveID -> .) ]
  ! REPEAT          [ reduce using rule 55 (saveID -> .) ]
  ! GOSUB           [ reduce using rule 55 (saveID -> .) ]
  ! INPUT           [ reduce using rule 55 (saveID -> .) ]
  ! PRINT           [ reduce using rule 55 (saveID -> .) ]
  ! SUBPROCEDURE    [ reduce using rule 55 (saveID -> .) ]
  ! END             [ reduce using rule 55 (saveID -> .) ]
  ! RETURN          [ reduce using rule 55 (saveID -> .) ]
  ! UNTIL           [ reduce using rule 55 (saveID -> .) ]
  ! ELSE            [ reduce using rule 55 (saveID -> .) ]
  ! EIF             [ reduce using rule 55 (saveID -> .) ]
  ! WEND            [ reduce using rule 55 (saveID -> .) ]
  ! NEXT            [ reduce using rule 55 (saveID -> .) ]
  ! GREATHER        [ reduce using rule 55 (saveID -> .) ]
  ! GREATHEREQUAL   [ reduce using rule 55 (saveID -> .) ]
  ! SMALLER         [ reduce using rule 55 (saveID -> .) ]
  ! SMALLEREQUAL    [ reduce using rule 55 (saveID -> .) ]
  ! NOTEQUAL        [ reduce using rule 55 (saveID -> .) ]
  ! EQUALTO         [ reduce using rule 55 (saveID -> .) ]
  ! error           [ reduce using rule 55 (saveID -> .) ]
  ! CLOSINGPAR      [ reduce using rule 55 (saveID -> .) ]

    saveID                         shift and go to state 64

state 43

    (46) EA -> P .
    (47) P -> P . MULTIPLY N
    (48) P -> P . DIVIDE N

    PLUS            reduce using rule 46 (EA -> P .)
    MINUS           reduce using rule 46 (EA -> P .)
    LET             reduce using rule 46 (EA -> P .)
    DIM             reduce using rule 46 (EA -> P .)
    IF              reduce using rule 46 (EA -> P .)
    FOR             reduce using rule 46 (EA -> P .)
    WHILE           reduce using rule 46 (EA -> P .)
    REPEAT          reduce using rule 46 (EA -> P .)
    GOSUB           reduce using rule 46 (EA -> P .)
    INPUT           reduce using rule 46 (EA -> P .)
    PRINT           reduce using rule 46 (EA -> P .)
    SUBPROCEDURE    reduce using rule 46 (EA -> P .)
    END             reduce using rule 46 (EA -> P .)
    RETURN          reduce using rule 46 (EA -> P .)
    UNTIL           reduce using rule 46 (EA -> P .)
    ELSE            reduce using rule 46 (EA -> P .)
    EIF             reduce using rule 46 (EA -> P .)
    WEND            reduce using rule 46 (EA -> P .)
    NEXT            reduce using rule 46 (EA -> P .)
    GREATHER        reduce using rule 46 (EA -> P .)
    GREATHEREQUAL   reduce using rule 46 (EA -> P .)
    SMALLER         reduce using rule 46 (EA -> P .)
    SMALLEREQUAL    reduce using rule 46 (EA -> P .)
    NOTEQUAL        reduce using rule 46 (EA -> P .)
    EQUALTO         reduce using rule 46 (EA -> P .)
    error           reduce using rule 46 (EA -> P .)
    CLOSINGPAR      reduce using rule 46 (EA -> P .)
    TO              reduce using rule 46 (EA -> P .)
    CLOSINGBRACKET  reduce using rule 46 (EA -> P .)
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67


state 44

    (60) EL -> OPENPAR . O CLOSINGPAR
    (61) EL -> OPENPAR . O CLOSINGPAR OL EL
    (52) N -> OPENPAR . EA CLOSINGPAR
    (65) O -> . Ex GREATHER Ex
    (66) O -> . Ex GREATHEREQUAL Ex
    (67) O -> . Ex SMALLER Ex
    (68) O -> . Ex SMALLEREQUAL Ex
    (69) O -> . Ex NOTEQUAL Ex
    (70) O -> . Ex EQUALTO Ex
    (71) O -> . Ex error Ex
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    O                              shift and go to state 56
    EL                             shift and go to state 41
    EA                             shift and go to state 68
    Ex                             shift and go to state 57
    P                              shift and go to state 43
    ES                             shift and go to state 40
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 45

    (49) P -> N .

    MULTIPLY        reduce using rule 49 (P -> N .)
    DIVIDE          reduce using rule 49 (P -> N .)
    PLUS            reduce using rule 49 (P -> N .)
    MINUS           reduce using rule 49 (P -> N .)
    LET             reduce using rule 49 (P -> N .)
    DIM             reduce using rule 49 (P -> N .)
    IF              reduce using rule 49 (P -> N .)
    FOR             reduce using rule 49 (P -> N .)
    WHILE           reduce using rule 49 (P -> N .)
    REPEAT          reduce using rule 49 (P -> N .)
    GOSUB           reduce using rule 49 (P -> N .)
    INPUT           reduce using rule 49 (P -> N .)
    PRINT           reduce using rule 49 (P -> N .)
    SUBPROCEDURE    reduce using rule 49 (P -> N .)
    END             reduce using rule 49 (P -> N .)
    RETURN          reduce using rule 49 (P -> N .)
    UNTIL           reduce using rule 49 (P -> N .)
    ELSE            reduce using rule 49 (P -> N .)
    EIF             reduce using rule 49 (P -> N .)
    WEND            reduce using rule 49 (P -> N .)
    NEXT            reduce using rule 49 (P -> N .)
    GREATHER        reduce using rule 49 (P -> N .)
    GREATHEREQUAL   reduce using rule 49 (P -> N .)
    SMALLER         reduce using rule 49 (P -> N .)
    SMALLEREQUAL    reduce using rule 49 (P -> N .)
    NOTEQUAL        reduce using rule 49 (P -> N .)
    EQUALTO         reduce using rule 49 (P -> N .)
    error           reduce using rule 49 (P -> N .)
    CLOSINGPAR      reduce using rule 49 (P -> N .)
    TO              reduce using rule 49 (P -> N .)
    CLOSINGBRACKET  reduce using rule 49 (P -> N .)


state 46

    (50) N -> cte . saveID
    (55) saveID -> .

    MULTIPLY        reduce using rule 55 (saveID -> .)
    DIVIDE          reduce using rule 55 (saveID -> .)
    PLUS            reduce using rule 55 (saveID -> .)
    MINUS           reduce using rule 55 (saveID -> .)
    LET             reduce using rule 55 (saveID -> .)
    DIM             reduce using rule 55 (saveID -> .)
    IF              reduce using rule 55 (saveID -> .)
    FOR             reduce using rule 55 (saveID -> .)
    WHILE           reduce using rule 55 (saveID -> .)
    REPEAT          reduce using rule 55 (saveID -> .)
    GOSUB           reduce using rule 55 (saveID -> .)
    INPUT           reduce using rule 55 (saveID -> .)
    PRINT           reduce using rule 55 (saveID -> .)
    SUBPROCEDURE    reduce using rule 55 (saveID -> .)
    END             reduce using rule 55 (saveID -> .)
    RETURN          reduce using rule 55 (saveID -> .)
    UNTIL           reduce using rule 55 (saveID -> .)
    ELSE            reduce using rule 55 (saveID -> .)
    EIF             reduce using rule 55 (saveID -> .)
    WEND            reduce using rule 55 (saveID -> .)
    NEXT            reduce using rule 55 (saveID -> .)
    GREATHER        reduce using rule 55 (saveID -> .)
    GREATHEREQUAL   reduce using rule 55 (saveID -> .)
    SMALLER         reduce using rule 55 (saveID -> .)
    SMALLEREQUAL    reduce using rule 55 (saveID -> .)
    NOTEQUAL        reduce using rule 55 (saveID -> .)
    EQUALTO         reduce using rule 55 (saveID -> .)
    error           reduce using rule 55 (saveID -> .)
    CLOSINGPAR      reduce using rule 55 (saveID -> .)
    TO              reduce using rule 55 (saveID -> .)
    CLOSINGBRACKET  reduce using rule 55 (saveID -> .)

    saveID                         shift and go to state 69

state 47

    (56) cte -> INTVAL .

    MULTIPLY        reduce using rule 56 (cte -> INTVAL .)
    DIVIDE          reduce using rule 56 (cte -> INTVAL .)
    PLUS            reduce using rule 56 (cte -> INTVAL .)
    MINUS           reduce using rule 56 (cte -> INTVAL .)
    LET             reduce using rule 56 (cte -> INTVAL .)
    DIM             reduce using rule 56 (cte -> INTVAL .)
    IF              reduce using rule 56 (cte -> INTVAL .)
    FOR             reduce using rule 56 (cte -> INTVAL .)
    WHILE           reduce using rule 56 (cte -> INTVAL .)
    REPEAT          reduce using rule 56 (cte -> INTVAL .)
    GOSUB           reduce using rule 56 (cte -> INTVAL .)
    INPUT           reduce using rule 56 (cte -> INTVAL .)
    PRINT           reduce using rule 56 (cte -> INTVAL .)
    SUBPROCEDURE    reduce using rule 56 (cte -> INTVAL .)
    END             reduce using rule 56 (cte -> INTVAL .)
    RETURN          reduce using rule 56 (cte -> INTVAL .)
    UNTIL           reduce using rule 56 (cte -> INTVAL .)
    ELSE            reduce using rule 56 (cte -> INTVAL .)
    EIF             reduce using rule 56 (cte -> INTVAL .)
    WEND            reduce using rule 56 (cte -> INTVAL .)
    NEXT            reduce using rule 56 (cte -> INTVAL .)
    GREATHER        reduce using rule 56 (cte -> INTVAL .)
    GREATHEREQUAL   reduce using rule 56 (cte -> INTVAL .)
    SMALLER         reduce using rule 56 (cte -> INTVAL .)
    SMALLEREQUAL    reduce using rule 56 (cte -> INTVAL .)
    NOTEQUAL        reduce using rule 56 (cte -> INTVAL .)
    EQUALTO         reduce using rule 56 (cte -> INTVAL .)
    error           reduce using rule 56 (cte -> INTVAL .)
    CLOSINGPAR      reduce using rule 56 (cte -> INTVAL .)
    TO              reduce using rule 56 (cte -> INTVAL .)
    CLOSINGBRACKET  reduce using rule 56 (cte -> INTVAL .)


state 48

    (57) cte -> FLOATVAL .

    MULTIPLY        reduce using rule 57 (cte -> FLOATVAL .)
    DIVIDE          reduce using rule 57 (cte -> FLOATVAL .)
    PLUS            reduce using rule 57 (cte -> FLOATVAL .)
    MINUS           reduce using rule 57 (cte -> FLOATVAL .)
    LET             reduce using rule 57 (cte -> FLOATVAL .)
    DIM             reduce using rule 57 (cte -> FLOATVAL .)
    IF              reduce using rule 57 (cte -> FLOATVAL .)
    FOR             reduce using rule 57 (cte -> FLOATVAL .)
    WHILE           reduce using rule 57 (cte -> FLOATVAL .)
    REPEAT          reduce using rule 57 (cte -> FLOATVAL .)
    GOSUB           reduce using rule 57 (cte -> FLOATVAL .)
    INPUT           reduce using rule 57 (cte -> FLOATVAL .)
    PRINT           reduce using rule 57 (cte -> FLOATVAL .)
    SUBPROCEDURE    reduce using rule 57 (cte -> FLOATVAL .)
    END             reduce using rule 57 (cte -> FLOATVAL .)
    RETURN          reduce using rule 57 (cte -> FLOATVAL .)
    UNTIL           reduce using rule 57 (cte -> FLOATVAL .)
    ELSE            reduce using rule 57 (cte -> FLOATVAL .)
    EIF             reduce using rule 57 (cte -> FLOATVAL .)
    WEND            reduce using rule 57 (cte -> FLOATVAL .)
    NEXT            reduce using rule 57 (cte -> FLOATVAL .)
    GREATHER        reduce using rule 57 (cte -> FLOATVAL .)
    GREATHEREQUAL   reduce using rule 57 (cte -> FLOATVAL .)
    SMALLER         reduce using rule 57 (cte -> FLOATVAL .)
    SMALLEREQUAL    reduce using rule 57 (cte -> FLOATVAL .)
    NOTEQUAL        reduce using rule 57 (cte -> FLOATVAL .)
    EQUALTO         reduce using rule 57 (cte -> FLOATVAL .)
    error           reduce using rule 57 (cte -> FLOATVAL .)
    CLOSINGPAR      reduce using rule 57 (cte -> FLOATVAL .)
    TO              reduce using rule 57 (cte -> FLOATVAL .)
    CLOSINGBRACKET  reduce using rule 57 (cte -> FLOATVAL .)


state 49

    (2) V -> DIM setType Idv . AS T Arr

    AS              shift and go to state 70


state 50

    (34) Idv -> ID . COMA Idv
    (35) Idv -> ID .

    COMA            shift and go to state 71
    AS              reduce using rule 35 (Idv -> ID .)
    EQUALS          reduce using rule 35 (Idv -> ID .)
    CLOSINGBRACKET  reduce using rule 35 (Idv -> ID .)


state 51

    (1) PROGRAMA -> PROGRAM V M S END .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM V M S END .)


state 52

    (10) S -> SUBPROCEDURE ID . TWOPOINTS M RETURN S

    TWOPOINTS       shift and go to state 72


state 53

    (16) E -> LET setType Idv . EQUALS Ex

    EQUALS          shift and go to state 73


state 54

    (17) E -> DIM setType Idv . AS T Arr

    AS              shift and go to state 74


state 55

    (18) E -> IF EL THEN . first_conditional F Esf EIF final_conditional
    (29) first_conditional -> .

    LET             reduce using rule 29 (first_conditional -> .)
    DIM             reduce using rule 29 (first_conditional -> .)
    IF              reduce using rule 29 (first_conditional -> .)
    FOR             reduce using rule 29 (first_conditional -> .)
    WHILE           reduce using rule 29 (first_conditional -> .)
    REPEAT          reduce using rule 29 (first_conditional -> .)
    GOSUB           reduce using rule 29 (first_conditional -> .)
    INPUT           reduce using rule 29 (first_conditional -> .)
    PRINT           reduce using rule 29 (first_conditional -> .)
    ELSE            reduce using rule 29 (first_conditional -> .)
    EIF             reduce using rule 29 (first_conditional -> .)

    first_conditional              shift and go to state 75

state 56

    (60) EL -> OPENPAR O . CLOSINGPAR
    (61) EL -> OPENPAR O . CLOSINGPAR OL EL

    CLOSINGPAR      shift and go to state 76


state 57

    (65) O -> Ex . GREATHER Ex
    (66) O -> Ex . GREATHEREQUAL Ex
    (67) O -> Ex . SMALLER Ex
    (68) O -> Ex . SMALLEREQUAL Ex
    (69) O -> Ex . NOTEQUAL Ex
    (70) O -> Ex . EQUALTO Ex
    (71) O -> Ex . error Ex

    GREATHER        shift and go to state 77
    GREATHEREQUAL   shift and go to state 78
    SMALLER         shift and go to state 79
    SMALLEREQUAL    shift and go to state 80
    NOTEQUAL        shift and go to state 81
    EQUALTO         shift and go to state 82
    error           shift and go to state 83


state 58

    (19) E -> FOR ID EQUALS . EA TO Ex F NEXT ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 84
    OPENPAR         shift and go to state 86
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    EA                             shift and go to state 85
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 59

    (20) E -> WHILE while_first_conditional EL . DO while_second_conditional F WEND while_final_conditional

    DO              shift and go to state 87


state 60

    (21) E -> REPEAT while_first_conditional F . UNTIL EL repeat_conditional

    UNTIL           shift and go to state 88


state 61

    (23) E -> INPUT ES COMA . IDEx
    (37) IDEx -> . ID
    (38) IDEx -> . ID OPENBRACKET setType Idv CLOSINGBRACKET

    ID              shift and go to state 90

    IDEx                           shift and go to state 89

state 62

    (44) EA -> EA PLUS . P
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 84
    OPENPAR         shift and go to state 86
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    P                              shift and go to state 91
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 63

    (45) EA -> EA MINUS . P
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 84
    OPENPAR         shift and go to state 86
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    P                              shift and go to state 92
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 64

    (51) N -> ID saveID .

    MULTIPLY        reduce using rule 51 (N -> ID saveID .)
    DIVIDE          reduce using rule 51 (N -> ID saveID .)
    PLUS            reduce using rule 51 (N -> ID saveID .)
    MINUS           reduce using rule 51 (N -> ID saveID .)
    LET             reduce using rule 51 (N -> ID saveID .)
    DIM             reduce using rule 51 (N -> ID saveID .)
    IF              reduce using rule 51 (N -> ID saveID .)
    FOR             reduce using rule 51 (N -> ID saveID .)
    WHILE           reduce using rule 51 (N -> ID saveID .)
    REPEAT          reduce using rule 51 (N -> ID saveID .)
    GOSUB           reduce using rule 51 (N -> ID saveID .)
    INPUT           reduce using rule 51 (N -> ID saveID .)
    PRINT           reduce using rule 51 (N -> ID saveID .)
    SUBPROCEDURE    reduce using rule 51 (N -> ID saveID .)
    END             reduce using rule 51 (N -> ID saveID .)
    RETURN          reduce using rule 51 (N -> ID saveID .)
    UNTIL           reduce using rule 51 (N -> ID saveID .)
    ELSE            reduce using rule 51 (N -> ID saveID .)
    EIF             reduce using rule 51 (N -> ID saveID .)
    WEND            reduce using rule 51 (N -> ID saveID .)
    NEXT            reduce using rule 51 (N -> ID saveID .)
    GREATHER        reduce using rule 51 (N -> ID saveID .)
    GREATHEREQUAL   reduce using rule 51 (N -> ID saveID .)
    SMALLER         reduce using rule 51 (N -> ID saveID .)
    SMALLEREQUAL    reduce using rule 51 (N -> ID saveID .)
    NOTEQUAL        reduce using rule 51 (N -> ID saveID .)
    EQUALTO         reduce using rule 51 (N -> ID saveID .)
    error           reduce using rule 51 (N -> ID saveID .)
    CLOSINGPAR      reduce using rule 51 (N -> ID saveID .)
    TO              reduce using rule 51 (N -> ID saveID .)
    CLOSINGBRACKET  reduce using rule 51 (N -> ID saveID .)


state 65

    (53) N -> ID OPENBRACKET . INTVAL CLOSINGBRACKET
    (54) N -> ID OPENBRACKET . setType Idv CLOSINGBRACKET
    (36) setType -> .

    INTVAL          shift and go to state 93
    ID              reduce using rule 36 (setType -> .)

    setType                        shift and go to state 94

state 66

    (47) P -> P MULTIPLY . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 84
    OPENPAR         shift and go to state 86
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    N                              shift and go to state 95
    cte                            shift and go to state 46

state 67

    (48) P -> P DIVIDE . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 84
    OPENPAR         shift and go to state 86
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    N                              shift and go to state 96
    cte                            shift and go to state 46

state 68

    (52) N -> OPENPAR EA . CLOSINGPAR
    (44) EA -> EA . PLUS P
    (45) EA -> EA . MINUS P
    (39) Ex -> EA .

    CLOSINGPAR      shift and go to state 97
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    GREATHER        reduce using rule 39 (Ex -> EA .)
    GREATHEREQUAL   reduce using rule 39 (Ex -> EA .)
    SMALLER         reduce using rule 39 (Ex -> EA .)
    SMALLEREQUAL    reduce using rule 39 (Ex -> EA .)
    NOTEQUAL        reduce using rule 39 (Ex -> EA .)
    EQUALTO         reduce using rule 39 (Ex -> EA .)
    error           reduce using rule 39 (Ex -> EA .)


state 69

    (50) N -> cte saveID .

    MULTIPLY        reduce using rule 50 (N -> cte saveID .)
    DIVIDE          reduce using rule 50 (N -> cte saveID .)
    PLUS            reduce using rule 50 (N -> cte saveID .)
    MINUS           reduce using rule 50 (N -> cte saveID .)
    LET             reduce using rule 50 (N -> cte saveID .)
    DIM             reduce using rule 50 (N -> cte saveID .)
    IF              reduce using rule 50 (N -> cte saveID .)
    FOR             reduce using rule 50 (N -> cte saveID .)
    WHILE           reduce using rule 50 (N -> cte saveID .)
    REPEAT          reduce using rule 50 (N -> cte saveID .)
    GOSUB           reduce using rule 50 (N -> cte saveID .)
    INPUT           reduce using rule 50 (N -> cte saveID .)
    PRINT           reduce using rule 50 (N -> cte saveID .)
    SUBPROCEDURE    reduce using rule 50 (N -> cte saveID .)
    END             reduce using rule 50 (N -> cte saveID .)
    RETURN          reduce using rule 50 (N -> cte saveID .)
    UNTIL           reduce using rule 50 (N -> cte saveID .)
    ELSE            reduce using rule 50 (N -> cte saveID .)
    EIF             reduce using rule 50 (N -> cte saveID .)
    WEND            reduce using rule 50 (N -> cte saveID .)
    NEXT            reduce using rule 50 (N -> cte saveID .)
    GREATHER        reduce using rule 50 (N -> cte saveID .)
    GREATHEREQUAL   reduce using rule 50 (N -> cte saveID .)
    SMALLER         reduce using rule 50 (N -> cte saveID .)
    SMALLEREQUAL    reduce using rule 50 (N -> cte saveID .)
    NOTEQUAL        reduce using rule 50 (N -> cte saveID .)
    EQUALTO         reduce using rule 50 (N -> cte saveID .)
    error           reduce using rule 50 (N -> cte saveID .)
    CLOSINGPAR      reduce using rule 50 (N -> cte saveID .)
    TO              reduce using rule 50 (N -> cte saveID .)
    CLOSINGBRACKET  reduce using rule 50 (N -> cte saveID .)


state 70

    (2) V -> DIM setType Idv AS . T Arr
    (7) T -> . INT
    (8) T -> . FLOAT
    (9) T -> . WORD

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    WORD            shift and go to state 101

    T                              shift and go to state 98

state 71

    (34) Idv -> ID COMA . Idv
    (34) Idv -> . ID COMA Idv
    (35) Idv -> . ID

    ID              shift and go to state 50

    Idv                            shift and go to state 102

state 72

    (10) S -> SUBPROCEDURE ID TWOPOINTS . M RETURN S
    (12) M -> . F M
    (13) M -> . empty
    (14) F -> . E F
    (15) F -> . empty
    (72) empty -> .
    (16) E -> . LET setType Idv EQUALS Ex
    (17) E -> . DIM setType Idv AS T Arr
    (18) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (19) E -> . FOR ID EQUALS EA TO Ex F NEXT ID
    (20) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (21) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (22) E -> . GOSUB ID
    (23) E -> . INPUT ES COMA IDEx
    (24) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RETURN          reduce using rule 72 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 72 (empty -> .) ]
  ! DIM             [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! GOSUB           [ reduce using rule 72 (empty -> .) ]
  ! INPUT           [ reduce using rule 72 (empty -> .) ]
  ! PRINT           [ reduce using rule 72 (empty -> .) ]

    M                              shift and go to state 103
    F                              shift and go to state 7
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 73

    (16) E -> LET setType Idv EQUALS . Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    Ex                             shift and go to state 104
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 74

    (17) E -> DIM setType Idv AS . T Arr
    (7) T -> . INT
    (8) T -> . FLOAT
    (9) T -> . WORD

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    WORD            shift and go to state 101

    T                              shift and go to state 105

state 75

    (18) E -> IF EL THEN first_conditional . F Esf EIF final_conditional
    (14) F -> . E F
    (15) F -> . empty
    (16) E -> . LET setType Idv EQUALS Ex
    (17) E -> . DIM setType Idv AS T Arr
    (18) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (19) E -> . FOR ID EQUALS EA TO Ex F NEXT ID
    (20) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (21) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (22) E -> . GOSUB ID
    (23) E -> . INPUT ES COMA IDEx
    (24) E -> . PRINT Ex
    (72) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    ELSE            reduce using rule 72 (empty -> .)
    EIF             reduce using rule 72 (empty -> .)

    F                              shift and go to state 106
    E                              shift and go to state 9
    empty                          shift and go to state 25

state 76

    (60) EL -> OPENPAR O CLOSINGPAR .
    (61) EL -> OPENPAR O CLOSINGPAR . OL EL
    (62) OL -> . AND
    (63) OL -> . OR
    (64) OL -> . NOT

    THEN            reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    LET             reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    DIM             reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    IF              reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    FOR             reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    WHILE           reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    REPEAT          reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    GOSUB           reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    INPUT           reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    PRINT           reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    SUBPROCEDURE    reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    END             reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    RETURN          reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    UNTIL           reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    ELSE            reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    EIF             reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    WEND            reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    NEXT            reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    GREATHER        reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    GREATHEREQUAL   reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    SMALLER         reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    SMALLEREQUAL    reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    NOTEQUAL        reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    EQUALTO         reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    error           reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    DO              reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    CLOSINGPAR      reduce using rule 60 (EL -> OPENPAR O CLOSINGPAR .)
    AND             shift and go to state 108
    OR              shift and go to state 109
    NOT             shift and go to state 110

    OL                             shift and go to state 107

state 77

    (65) O -> Ex GREATHER . Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    Ex                             shift and go to state 111
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 78

    (66) O -> Ex GREATHEREQUAL . Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    Ex                             shift and go to state 112
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 79

    (67) O -> Ex SMALLER . Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    Ex                             shift and go to state 113
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 80

    (68) O -> Ex SMALLEREQUAL . Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    Ex                             shift and go to state 114
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 81

    (69) O -> Ex NOTEQUAL . Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    Ex                             shift and go to state 115
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 82

    (70) O -> Ex EQUALTO . Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    Ex                             shift and go to state 116
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 83

    (71) O -> Ex error . Ex
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    Ex                             shift and go to state 117
    EA                             shift and go to state 39
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 84

    (51) N -> ID . saveID
    (53) N -> ID . OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> ID . OPENBRACKET setType Idv CLOSINGBRACKET
    (55) saveID -> .

    OPENBRACKET     shift and go to state 65
    MULTIPLY        reduce using rule 55 (saveID -> .)
    DIVIDE          reduce using rule 55 (saveID -> .)
    TO              reduce using rule 55 (saveID -> .)
    PLUS            reduce using rule 55 (saveID -> .)
    MINUS           reduce using rule 55 (saveID -> .)
    LET             reduce using rule 55 (saveID -> .)
    DIM             reduce using rule 55 (saveID -> .)
    IF              reduce using rule 55 (saveID -> .)
    FOR             reduce using rule 55 (saveID -> .)
    WHILE           reduce using rule 55 (saveID -> .)
    REPEAT          reduce using rule 55 (saveID -> .)
    GOSUB           reduce using rule 55 (saveID -> .)
    INPUT           reduce using rule 55 (saveID -> .)
    PRINT           reduce using rule 55 (saveID -> .)
    SUBPROCEDURE    reduce using rule 55 (saveID -> .)
    END             reduce using rule 55 (saveID -> .)
    RETURN          reduce using rule 55 (saveID -> .)
    UNTIL           reduce using rule 55 (saveID -> .)
    ELSE            reduce using rule 55 (saveID -> .)
    EIF             reduce using rule 55 (saveID -> .)
    WEND            reduce using rule 55 (saveID -> .)
    NEXT            reduce using rule 55 (saveID -> .)
    GREATHER        reduce using rule 55 (saveID -> .)
    GREATHEREQUAL   reduce using rule 55 (saveID -> .)
    SMALLER         reduce using rule 55 (saveID -> .)
    SMALLEREQUAL    reduce using rule 55 (saveID -> .)
    NOTEQUAL        reduce using rule 55 (saveID -> .)
    EQUALTO         reduce using rule 55 (saveID -> .)
    error           reduce using rule 55 (saveID -> .)
    CLOSINGPAR      reduce using rule 55 (saveID -> .)
    CLOSINGBRACKET  reduce using rule 55 (saveID -> .)

    saveID                         shift and go to state 64

state 85

    (19) E -> FOR ID EQUALS EA . TO Ex F NEXT ID
    (44) EA -> EA . PLUS P
    (45) EA -> EA . MINUS P

    TO              shift and go to state 118
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 86

    (52) N -> OPENPAR . EA CLOSINGPAR
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 84
    OPENPAR         shift and go to state 86
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    EA                             shift and go to state 119
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 87

    (20) E -> WHILE while_first_conditional EL DO . while_second_conditional F WEND while_final_conditional
    (27) while_second_conditional -> .

    LET             reduce using rule 27 (while_second_conditional -> .)
    DIM             reduce using rule 27 (while_second_conditional -> .)
    IF              reduce using rule 27 (while_second_conditional -> .)
    FOR             reduce using rule 27 (while_second_conditional -> .)
    WHILE           reduce using rule 27 (while_second_conditional -> .)
    REPEAT          reduce using rule 27 (while_second_conditional -> .)
    GOSUB           reduce using rule 27 (while_second_conditional -> .)
    INPUT           reduce using rule 27 (while_second_conditional -> .)
    PRINT           reduce using rule 27 (while_second_conditional -> .)
    WEND            reduce using rule 27 (while_second_conditional -> .)

    while_second_conditional       shift and go to state 120

state 88

    (21) E -> REPEAT while_first_conditional F UNTIL . EL repeat_conditional
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 31

    EL                             shift and go to state 121

state 89

    (23) E -> INPUT ES COMA IDEx .

    LET             reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    DIM             reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    IF              reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    FOR             reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    WHILE           reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    REPEAT          reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    GOSUB           reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    INPUT           reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    PRINT           reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    SUBPROCEDURE    reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    END             reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    RETURN          reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    UNTIL           reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    ELSE            reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    EIF             reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    WEND            reduce using rule 23 (E -> INPUT ES COMA IDEx .)
    NEXT            reduce using rule 23 (E -> INPUT ES COMA IDEx .)


state 90

    (37) IDEx -> ID .
    (38) IDEx -> ID . OPENBRACKET setType Idv CLOSINGBRACKET

    LET             reduce using rule 37 (IDEx -> ID .)
    DIM             reduce using rule 37 (IDEx -> ID .)
    IF              reduce using rule 37 (IDEx -> ID .)
    FOR             reduce using rule 37 (IDEx -> ID .)
    WHILE           reduce using rule 37 (IDEx -> ID .)
    REPEAT          reduce using rule 37 (IDEx -> ID .)
    GOSUB           reduce using rule 37 (IDEx -> ID .)
    INPUT           reduce using rule 37 (IDEx -> ID .)
    PRINT           reduce using rule 37 (IDEx -> ID .)
    SUBPROCEDURE    reduce using rule 37 (IDEx -> ID .)
    END             reduce using rule 37 (IDEx -> ID .)
    RETURN          reduce using rule 37 (IDEx -> ID .)
    UNTIL           reduce using rule 37 (IDEx -> ID .)
    ELSE            reduce using rule 37 (IDEx -> ID .)
    EIF             reduce using rule 37 (IDEx -> ID .)
    WEND            reduce using rule 37 (IDEx -> ID .)
    NEXT            reduce using rule 37 (IDEx -> ID .)
    OPENBRACKET     shift and go to state 122


state 91

    (44) EA -> EA PLUS P .
    (47) P -> P . MULTIPLY N
    (48) P -> P . DIVIDE N

    PLUS            reduce using rule 44 (EA -> EA PLUS P .)
    MINUS           reduce using rule 44 (EA -> EA PLUS P .)
    LET             reduce using rule 44 (EA -> EA PLUS P .)
    DIM             reduce using rule 44 (EA -> EA PLUS P .)
    IF              reduce using rule 44 (EA -> EA PLUS P .)
    FOR             reduce using rule 44 (EA -> EA PLUS P .)
    WHILE           reduce using rule 44 (EA -> EA PLUS P .)
    REPEAT          reduce using rule 44 (EA -> EA PLUS P .)
    GOSUB           reduce using rule 44 (EA -> EA PLUS P .)
    INPUT           reduce using rule 44 (EA -> EA PLUS P .)
    PRINT           reduce using rule 44 (EA -> EA PLUS P .)
    SUBPROCEDURE    reduce using rule 44 (EA -> EA PLUS P .)
    END             reduce using rule 44 (EA -> EA PLUS P .)
    RETURN          reduce using rule 44 (EA -> EA PLUS P .)
    UNTIL           reduce using rule 44 (EA -> EA PLUS P .)
    ELSE            reduce using rule 44 (EA -> EA PLUS P .)
    EIF             reduce using rule 44 (EA -> EA PLUS P .)
    WEND            reduce using rule 44 (EA -> EA PLUS P .)
    NEXT            reduce using rule 44 (EA -> EA PLUS P .)
    GREATHER        reduce using rule 44 (EA -> EA PLUS P .)
    GREATHEREQUAL   reduce using rule 44 (EA -> EA PLUS P .)
    SMALLER         reduce using rule 44 (EA -> EA PLUS P .)
    SMALLEREQUAL    reduce using rule 44 (EA -> EA PLUS P .)
    NOTEQUAL        reduce using rule 44 (EA -> EA PLUS P .)
    EQUALTO         reduce using rule 44 (EA -> EA PLUS P .)
    error           reduce using rule 44 (EA -> EA PLUS P .)
    CLOSINGPAR      reduce using rule 44 (EA -> EA PLUS P .)
    TO              reduce using rule 44 (EA -> EA PLUS P .)
    CLOSINGBRACKET  reduce using rule 44 (EA -> EA PLUS P .)
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67


state 92

    (45) EA -> EA MINUS P .
    (47) P -> P . MULTIPLY N
    (48) P -> P . DIVIDE N

    PLUS            reduce using rule 45 (EA -> EA MINUS P .)
    MINUS           reduce using rule 45 (EA -> EA MINUS P .)
    LET             reduce using rule 45 (EA -> EA MINUS P .)
    DIM             reduce using rule 45 (EA -> EA MINUS P .)
    IF              reduce using rule 45 (EA -> EA MINUS P .)
    FOR             reduce using rule 45 (EA -> EA MINUS P .)
    WHILE           reduce using rule 45 (EA -> EA MINUS P .)
    REPEAT          reduce using rule 45 (EA -> EA MINUS P .)
    GOSUB           reduce using rule 45 (EA -> EA MINUS P .)
    INPUT           reduce using rule 45 (EA -> EA MINUS P .)
    PRINT           reduce using rule 45 (EA -> EA MINUS P .)
    SUBPROCEDURE    reduce using rule 45 (EA -> EA MINUS P .)
    END             reduce using rule 45 (EA -> EA MINUS P .)
    RETURN          reduce using rule 45 (EA -> EA MINUS P .)
    UNTIL           reduce using rule 45 (EA -> EA MINUS P .)
    ELSE            reduce using rule 45 (EA -> EA MINUS P .)
    EIF             reduce using rule 45 (EA -> EA MINUS P .)
    WEND            reduce using rule 45 (EA -> EA MINUS P .)
    NEXT            reduce using rule 45 (EA -> EA MINUS P .)
    GREATHER        reduce using rule 45 (EA -> EA MINUS P .)
    GREATHEREQUAL   reduce using rule 45 (EA -> EA MINUS P .)
    SMALLER         reduce using rule 45 (EA -> EA MINUS P .)
    SMALLEREQUAL    reduce using rule 45 (EA -> EA MINUS P .)
    NOTEQUAL        reduce using rule 45 (EA -> EA MINUS P .)
    EQUALTO         reduce using rule 45 (EA -> EA MINUS P .)
    error           reduce using rule 45 (EA -> EA MINUS P .)
    CLOSINGPAR      reduce using rule 45 (EA -> EA MINUS P .)
    TO              reduce using rule 45 (EA -> EA MINUS P .)
    CLOSINGBRACKET  reduce using rule 45 (EA -> EA MINUS P .)
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67


state 93

    (53) N -> ID OPENBRACKET INTVAL . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 123


state 94

    (54) N -> ID OPENBRACKET setType . Idv CLOSINGBRACKET
    (34) Idv -> . ID COMA Idv
    (35) Idv -> . ID

    ID              shift and go to state 50

    Idv                            shift and go to state 124

state 95

    (47) P -> P MULTIPLY N .

    MULTIPLY        reduce using rule 47 (P -> P MULTIPLY N .)
    DIVIDE          reduce using rule 47 (P -> P MULTIPLY N .)
    PLUS            reduce using rule 47 (P -> P MULTIPLY N .)
    MINUS           reduce using rule 47 (P -> P MULTIPLY N .)
    LET             reduce using rule 47 (P -> P MULTIPLY N .)
    DIM             reduce using rule 47 (P -> P MULTIPLY N .)
    IF              reduce using rule 47 (P -> P MULTIPLY N .)
    FOR             reduce using rule 47 (P -> P MULTIPLY N .)
    WHILE           reduce using rule 47 (P -> P MULTIPLY N .)
    REPEAT          reduce using rule 47 (P -> P MULTIPLY N .)
    GOSUB           reduce using rule 47 (P -> P MULTIPLY N .)
    INPUT           reduce using rule 47 (P -> P MULTIPLY N .)
    PRINT           reduce using rule 47 (P -> P MULTIPLY N .)
    SUBPROCEDURE    reduce using rule 47 (P -> P MULTIPLY N .)
    END             reduce using rule 47 (P -> P MULTIPLY N .)
    RETURN          reduce using rule 47 (P -> P MULTIPLY N .)
    UNTIL           reduce using rule 47 (P -> P MULTIPLY N .)
    ELSE            reduce using rule 47 (P -> P MULTIPLY N .)
    EIF             reduce using rule 47 (P -> P MULTIPLY N .)
    WEND            reduce using rule 47 (P -> P MULTIPLY N .)
    NEXT            reduce using rule 47 (P -> P MULTIPLY N .)
    GREATHER        reduce using rule 47 (P -> P MULTIPLY N .)
    GREATHEREQUAL   reduce using rule 47 (P -> P MULTIPLY N .)
    SMALLER         reduce using rule 47 (P -> P MULTIPLY N .)
    SMALLEREQUAL    reduce using rule 47 (P -> P MULTIPLY N .)
    NOTEQUAL        reduce using rule 47 (P -> P MULTIPLY N .)
    EQUALTO         reduce using rule 47 (P -> P MULTIPLY N .)
    error           reduce using rule 47 (P -> P MULTIPLY N .)
    CLOSINGPAR      reduce using rule 47 (P -> P MULTIPLY N .)
    TO              reduce using rule 47 (P -> P MULTIPLY N .)
    CLOSINGBRACKET  reduce using rule 47 (P -> P MULTIPLY N .)


state 96

    (48) P -> P DIVIDE N .

    MULTIPLY        reduce using rule 48 (P -> P DIVIDE N .)
    DIVIDE          reduce using rule 48 (P -> P DIVIDE N .)
    PLUS            reduce using rule 48 (P -> P DIVIDE N .)
    MINUS           reduce using rule 48 (P -> P DIVIDE N .)
    LET             reduce using rule 48 (P -> P DIVIDE N .)
    DIM             reduce using rule 48 (P -> P DIVIDE N .)
    IF              reduce using rule 48 (P -> P DIVIDE N .)
    FOR             reduce using rule 48 (P -> P DIVIDE N .)
    WHILE           reduce using rule 48 (P -> P DIVIDE N .)
    REPEAT          reduce using rule 48 (P -> P DIVIDE N .)
    GOSUB           reduce using rule 48 (P -> P DIVIDE N .)
    INPUT           reduce using rule 48 (P -> P DIVIDE N .)
    PRINT           reduce using rule 48 (P -> P DIVIDE N .)
    SUBPROCEDURE    reduce using rule 48 (P -> P DIVIDE N .)
    END             reduce using rule 48 (P -> P DIVIDE N .)
    RETURN          reduce using rule 48 (P -> P DIVIDE N .)
    UNTIL           reduce using rule 48 (P -> P DIVIDE N .)
    ELSE            reduce using rule 48 (P -> P DIVIDE N .)
    EIF             reduce using rule 48 (P -> P DIVIDE N .)
    WEND            reduce using rule 48 (P -> P DIVIDE N .)
    NEXT            reduce using rule 48 (P -> P DIVIDE N .)
    GREATHER        reduce using rule 48 (P -> P DIVIDE N .)
    GREATHEREQUAL   reduce using rule 48 (P -> P DIVIDE N .)
    SMALLER         reduce using rule 48 (P -> P DIVIDE N .)
    SMALLEREQUAL    reduce using rule 48 (P -> P DIVIDE N .)
    NOTEQUAL        reduce using rule 48 (P -> P DIVIDE N .)
    EQUALTO         reduce using rule 48 (P -> P DIVIDE N .)
    error           reduce using rule 48 (P -> P DIVIDE N .)
    CLOSINGPAR      reduce using rule 48 (P -> P DIVIDE N .)
    TO              reduce using rule 48 (P -> P DIVIDE N .)
    CLOSINGBRACKET  reduce using rule 48 (P -> P DIVIDE N .)


state 97

    (52) N -> OPENPAR EA CLOSINGPAR .

    MULTIPLY        reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    DIVIDE          reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    PLUS            reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    MINUS           reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    LET             reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    DIM             reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    IF              reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    FOR             reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    WHILE           reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    REPEAT          reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    GOSUB           reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    INPUT           reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    PRINT           reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    SUBPROCEDURE    reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    END             reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    RETURN          reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    UNTIL           reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    ELSE            reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    EIF             reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    WEND            reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    NEXT            reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    GREATHER        reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    GREATHEREQUAL   reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    SMALLER         reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    SMALLEREQUAL    reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    NOTEQUAL        reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    EQUALTO         reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    error           reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    CLOSINGPAR      reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    TO              reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)
    CLOSINGBRACKET  reduce using rule 52 (N -> OPENPAR EA CLOSINGPAR .)


state 98

    (2) V -> DIM setType Idv AS T . Arr
    (4) Arr -> . OPENBRACKET EA CLOSINGBRACKET Arr
    (5) Arr -> . OPENBRACKET ID CLOSINGBRACKET Arr
    (6) Arr -> . empty
    (72) empty -> .

    OPENBRACKET     shift and go to state 126
    LET             reduce using rule 72 (empty -> .)
    DIM             reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    REPEAT          reduce using rule 72 (empty -> .)
    GOSUB           reduce using rule 72 (empty -> .)
    INPUT           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    SUBPROCEDURE    reduce using rule 72 (empty -> .)
    END             reduce using rule 72 (empty -> .)

    Arr                            shift and go to state 125
    empty                          shift and go to state 127

state 99

    (7) T -> INT .

    OPENBRACKET     reduce using rule 7 (T -> INT .)
    LET             reduce using rule 7 (T -> INT .)
    DIM             reduce using rule 7 (T -> INT .)
    IF              reduce using rule 7 (T -> INT .)
    FOR             reduce using rule 7 (T -> INT .)
    WHILE           reduce using rule 7 (T -> INT .)
    REPEAT          reduce using rule 7 (T -> INT .)
    GOSUB           reduce using rule 7 (T -> INT .)
    INPUT           reduce using rule 7 (T -> INT .)
    PRINT           reduce using rule 7 (T -> INT .)
    SUBPROCEDURE    reduce using rule 7 (T -> INT .)
    END             reduce using rule 7 (T -> INT .)
    RETURN          reduce using rule 7 (T -> INT .)
    UNTIL           reduce using rule 7 (T -> INT .)
    ELSE            reduce using rule 7 (T -> INT .)
    EIF             reduce using rule 7 (T -> INT .)
    WEND            reduce using rule 7 (T -> INT .)
    NEXT            reduce using rule 7 (T -> INT .)


state 100

    (8) T -> FLOAT .

    OPENBRACKET     reduce using rule 8 (T -> FLOAT .)
    LET             reduce using rule 8 (T -> FLOAT .)
    DIM             reduce using rule 8 (T -> FLOAT .)
    IF              reduce using rule 8 (T -> FLOAT .)
    FOR             reduce using rule 8 (T -> FLOAT .)
    WHILE           reduce using rule 8 (T -> FLOAT .)
    REPEAT          reduce using rule 8 (T -> FLOAT .)
    GOSUB           reduce using rule 8 (T -> FLOAT .)
    INPUT           reduce using rule 8 (T -> FLOAT .)
    PRINT           reduce using rule 8 (T -> FLOAT .)
    SUBPROCEDURE    reduce using rule 8 (T -> FLOAT .)
    END             reduce using rule 8 (T -> FLOAT .)
    RETURN          reduce using rule 8 (T -> FLOAT .)
    UNTIL           reduce using rule 8 (T -> FLOAT .)
    ELSE            reduce using rule 8 (T -> FLOAT .)
    EIF             reduce using rule 8 (T -> FLOAT .)
    WEND            reduce using rule 8 (T -> FLOAT .)
    NEXT            reduce using rule 8 (T -> FLOAT .)


state 101

    (9) T -> WORD .

    OPENBRACKET     reduce using rule 9 (T -> WORD .)
    LET             reduce using rule 9 (T -> WORD .)
    DIM             reduce using rule 9 (T -> WORD .)
    IF              reduce using rule 9 (T -> WORD .)
    FOR             reduce using rule 9 (T -> WORD .)
    WHILE           reduce using rule 9 (T -> WORD .)
    REPEAT          reduce using rule 9 (T -> WORD .)
    GOSUB           reduce using rule 9 (T -> WORD .)
    INPUT           reduce using rule 9 (T -> WORD .)
    PRINT           reduce using rule 9 (T -> WORD .)
    SUBPROCEDURE    reduce using rule 9 (T -> WORD .)
    END             reduce using rule 9 (T -> WORD .)
    RETURN          reduce using rule 9 (T -> WORD .)
    UNTIL           reduce using rule 9 (T -> WORD .)
    ELSE            reduce using rule 9 (T -> WORD .)
    EIF             reduce using rule 9 (T -> WORD .)
    WEND            reduce using rule 9 (T -> WORD .)
    NEXT            reduce using rule 9 (T -> WORD .)


state 102

    (34) Idv -> ID COMA Idv .

    AS              reduce using rule 34 (Idv -> ID COMA Idv .)
    EQUALS          reduce using rule 34 (Idv -> ID COMA Idv .)
    CLOSINGBRACKET  reduce using rule 34 (Idv -> ID COMA Idv .)


state 103

    (10) S -> SUBPROCEDURE ID TWOPOINTS M . RETURN S

    RETURN          shift and go to state 128


state 104

    (16) E -> LET setType Idv EQUALS Ex .

    LET             reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    DIM             reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    IF              reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    FOR             reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    WHILE           reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    REPEAT          reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    GOSUB           reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    INPUT           reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    PRINT           reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    SUBPROCEDURE    reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    END             reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    RETURN          reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    UNTIL           reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    ELSE            reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    EIF             reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    WEND            reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)
    NEXT            reduce using rule 16 (E -> LET setType Idv EQUALS Ex .)


state 105

    (17) E -> DIM setType Idv AS T . Arr
    (4) Arr -> . OPENBRACKET EA CLOSINGBRACKET Arr
    (5) Arr -> . OPENBRACKET ID CLOSINGBRACKET Arr
    (6) Arr -> . empty
    (72) empty -> .

    OPENBRACKET     shift and go to state 126
    LET             reduce using rule 72 (empty -> .)
    DIM             reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    REPEAT          reduce using rule 72 (empty -> .)
    GOSUB           reduce using rule 72 (empty -> .)
    INPUT           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    SUBPROCEDURE    reduce using rule 72 (empty -> .)
    END             reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    UNTIL           reduce using rule 72 (empty -> .)
    ELSE            reduce using rule 72 (empty -> .)
    EIF             reduce using rule 72 (empty -> .)
    WEND            reduce using rule 72 (empty -> .)
    NEXT            reduce using rule 72 (empty -> .)

    Arr                            shift and go to state 129
    empty                          shift and go to state 127

state 106

    (18) E -> IF EL THEN first_conditional F . Esf EIF final_conditional
    (32) Esf -> . ELSE second_conditional F
    (33) Esf -> . empty
    (72) empty -> .

    ELSE            shift and go to state 131
    EIF             reduce using rule 72 (empty -> .)

    Esf                            shift and go to state 130
    empty                          shift and go to state 132

state 107

    (61) EL -> OPENPAR O CLOSINGPAR OL . EL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 31

    EL                             shift and go to state 133

state 108

    (62) OL -> AND .

    TRUE            reduce using rule 62 (OL -> AND .)
    FALSE           reduce using rule 62 (OL -> AND .)
    OPENPAR         reduce using rule 62 (OL -> AND .)


state 109

    (63) OL -> OR .

    TRUE            reduce using rule 63 (OL -> OR .)
    FALSE           reduce using rule 63 (OL -> OR .)
    OPENPAR         reduce using rule 63 (OL -> OR .)


state 110

    (64) OL -> NOT .

    TRUE            reduce using rule 64 (OL -> NOT .)
    FALSE           reduce using rule 64 (OL -> NOT .)
    OPENPAR         reduce using rule 64 (OL -> NOT .)


state 111

    (65) O -> Ex GREATHER Ex .

    CLOSINGPAR      reduce using rule 65 (O -> Ex GREATHER Ex .)


state 112

    (66) O -> Ex GREATHEREQUAL Ex .

    CLOSINGPAR      reduce using rule 66 (O -> Ex GREATHEREQUAL Ex .)


state 113

    (67) O -> Ex SMALLER Ex .

    CLOSINGPAR      reduce using rule 67 (O -> Ex SMALLER Ex .)


state 114

    (68) O -> Ex SMALLEREQUAL Ex .

    CLOSINGPAR      reduce using rule 68 (O -> Ex SMALLEREQUAL Ex .)


state 115

    (69) O -> Ex NOTEQUAL Ex .

    CLOSINGPAR      reduce using rule 69 (O -> Ex NOTEQUAL Ex .)


state 116

    (70) O -> Ex EQUALTO Ex .

    CLOSINGPAR      reduce using rule 70 (O -> Ex EQUALTO Ex .)


state 117

    (71) O -> Ex error Ex .

    CLOSINGPAR      reduce using rule 71 (O -> Ex error Ex .)


state 118

    (19) E -> FOR ID EQUALS EA TO . Ex F NEXT ID
    (39) Ex -> . EA
    (40) Ex -> . ES
    (41) Ex -> . EL
    (42) Ex -> . ID
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (43) ES -> . WORDVAL
    (58) EL -> . TRUE
    (59) EL -> . FALSE
    (60) EL -> . OPENPAR O CLOSINGPAR
    (61) EL -> . OPENPAR O CLOSINGPAR OL EL
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 42
    WORDVAL         shift and go to state 37
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    OPENPAR         shift and go to state 44
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    EA                             shift and go to state 39
    Ex                             shift and go to state 134
    ES                             shift and go to state 40
    EL                             shift and go to state 41
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 119

    (52) N -> OPENPAR EA . CLOSINGPAR
    (44) EA -> EA . PLUS P
    (45) EA -> EA . MINUS P

    CLOSINGPAR      shift and go to state 97
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 120

    (20) E -> WHILE while_first_conditional EL DO while_second_conditional . F WEND while_final_conditional
    (14) F -> . E F
    (15) F -> . empty
    (16) E -> . LET setType Idv EQUALS Ex
    (17) E -> . DIM setType Idv AS T Arr
    (18) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (19) E -> . FOR ID EQUALS EA TO Ex F NEXT ID
    (20) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (21) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (22) E -> . GOSUB ID
    (23) E -> . INPUT ES COMA IDEx
    (24) E -> . PRINT Ex
    (72) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    WEND            reduce using rule 72 (empty -> .)

    F                              shift and go to state 135
    E                              shift and go to state 9
    empty                          shift and go to state 25

state 121

    (21) E -> REPEAT while_first_conditional F UNTIL EL . repeat_conditional
    (25) repeat_conditional -> .

    LET             reduce using rule 25 (repeat_conditional -> .)
    DIM             reduce using rule 25 (repeat_conditional -> .)
    IF              reduce using rule 25 (repeat_conditional -> .)
    FOR             reduce using rule 25 (repeat_conditional -> .)
    WHILE           reduce using rule 25 (repeat_conditional -> .)
    REPEAT          reduce using rule 25 (repeat_conditional -> .)
    GOSUB           reduce using rule 25 (repeat_conditional -> .)
    INPUT           reduce using rule 25 (repeat_conditional -> .)
    PRINT           reduce using rule 25 (repeat_conditional -> .)
    SUBPROCEDURE    reduce using rule 25 (repeat_conditional -> .)
    END             reduce using rule 25 (repeat_conditional -> .)
    RETURN          reduce using rule 25 (repeat_conditional -> .)
    UNTIL           reduce using rule 25 (repeat_conditional -> .)
    ELSE            reduce using rule 25 (repeat_conditional -> .)
    EIF             reduce using rule 25 (repeat_conditional -> .)
    WEND            reduce using rule 25 (repeat_conditional -> .)
    NEXT            reduce using rule 25 (repeat_conditional -> .)

    repeat_conditional             shift and go to state 136

state 122

    (38) IDEx -> ID OPENBRACKET . setType Idv CLOSINGBRACKET
    (36) setType -> .

    ID              reduce using rule 36 (setType -> .)

    setType                        shift and go to state 137

state 123

    (53) N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .

    MULTIPLY        reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    DIVIDE          reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    PLUS            reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    MINUS           reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    LET             reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    DIM             reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    IF              reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    FOR             reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    WHILE           reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    REPEAT          reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    GOSUB           reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    INPUT           reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    PRINT           reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    END             reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    RETURN          reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    UNTIL           reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    ELSE            reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    EIF             reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    WEND            reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    NEXT            reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    GREATHER        reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    GREATHEREQUAL   reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    SMALLER         reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    SMALLEREQUAL    reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    NOTEQUAL        reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    EQUALTO         reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    error           reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    CLOSINGPAR      reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    TO              reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    CLOSINGBRACKET  reduce using rule 53 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)


state 124

    (54) N -> ID OPENBRACKET setType Idv . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 138


state 125

    (2) V -> DIM setType Idv AS T Arr .

    LET             reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    DIM             reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    IF              reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    FOR             reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    WHILE           reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    REPEAT          reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    GOSUB           reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    INPUT           reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    PRINT           reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    SUBPROCEDURE    reduce using rule 2 (V -> DIM setType Idv AS T Arr .)
    END             reduce using rule 2 (V -> DIM setType Idv AS T Arr .)


state 126

    (4) Arr -> OPENBRACKET . EA CLOSINGBRACKET Arr
    (5) Arr -> OPENBRACKET . ID CLOSINGBRACKET Arr
    (44) EA -> . EA PLUS P
    (45) EA -> . EA MINUS P
    (46) EA -> . P
    (47) P -> . P MULTIPLY N
    (48) P -> . P DIVIDE N
    (49) P -> . N
    (50) N -> . cte saveID
    (51) N -> . ID saveID
    (52) N -> . OPENPAR EA CLOSINGPAR
    (53) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (56) cte -> . INTVAL
    (57) cte -> . FLOATVAL

    ID              shift and go to state 140
    OPENPAR         shift and go to state 86
    INTVAL          shift and go to state 47
    FLOATVAL        shift and go to state 48

    EA                             shift and go to state 139
    P                              shift and go to state 43
    N                              shift and go to state 45
    cte                            shift and go to state 46

state 127

    (6) Arr -> empty .

    LET             reduce using rule 6 (Arr -> empty .)
    DIM             reduce using rule 6 (Arr -> empty .)
    IF              reduce using rule 6 (Arr -> empty .)
    FOR             reduce using rule 6 (Arr -> empty .)
    WHILE           reduce using rule 6 (Arr -> empty .)
    REPEAT          reduce using rule 6 (Arr -> empty .)
    GOSUB           reduce using rule 6 (Arr -> empty .)
    INPUT           reduce using rule 6 (Arr -> empty .)
    PRINT           reduce using rule 6 (Arr -> empty .)
    SUBPROCEDURE    reduce using rule 6 (Arr -> empty .)
    END             reduce using rule 6 (Arr -> empty .)
    RETURN          reduce using rule 6 (Arr -> empty .)
    UNTIL           reduce using rule 6 (Arr -> empty .)
    ELSE            reduce using rule 6 (Arr -> empty .)
    EIF             reduce using rule 6 (Arr -> empty .)
    WEND            reduce using rule 6 (Arr -> empty .)
    NEXT            reduce using rule 6 (Arr -> empty .)


state 128

    (10) S -> SUBPROCEDURE ID TWOPOINTS M RETURN . S
    (10) S -> . SUBPROCEDURE ID TWOPOINTS M RETURN S
    (11) S -> . empty
    (72) empty -> .

    SUBPROCEDURE    shift and go to state 21
    END             reduce using rule 72 (empty -> .)

    S                              shift and go to state 141
    empty                          shift and go to state 22

state 129

    (17) E -> DIM setType Idv AS T Arr .

    LET             reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    DIM             reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    IF              reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    FOR             reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    WHILE           reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    REPEAT          reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    GOSUB           reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    INPUT           reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    PRINT           reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    SUBPROCEDURE    reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    END             reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    RETURN          reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    UNTIL           reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    ELSE            reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    EIF             reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    WEND            reduce using rule 17 (E -> DIM setType Idv AS T Arr .)
    NEXT            reduce using rule 17 (E -> DIM setType Idv AS T Arr .)


state 130

    (18) E -> IF EL THEN first_conditional F Esf . EIF final_conditional

    EIF             shift and go to state 142


state 131

    (32) Esf -> ELSE . second_conditional F
    (30) second_conditional -> .

    LET             reduce using rule 30 (second_conditional -> .)
    DIM             reduce using rule 30 (second_conditional -> .)
    IF              reduce using rule 30 (second_conditional -> .)
    FOR             reduce using rule 30 (second_conditional -> .)
    WHILE           reduce using rule 30 (second_conditional -> .)
    REPEAT          reduce using rule 30 (second_conditional -> .)
    GOSUB           reduce using rule 30 (second_conditional -> .)
    INPUT           reduce using rule 30 (second_conditional -> .)
    PRINT           reduce using rule 30 (second_conditional -> .)
    EIF             reduce using rule 30 (second_conditional -> .)

    second_conditional             shift and go to state 143

state 132

    (33) Esf -> empty .

    EIF             reduce using rule 33 (Esf -> empty .)


state 133

    (61) EL -> OPENPAR O CLOSINGPAR OL EL .

    THEN            reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    LET             reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    DIM             reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    IF              reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    FOR             reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    WHILE           reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    REPEAT          reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GOSUB           reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    INPUT           reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    PRINT           reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SUBPROCEDURE    reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    END             reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    RETURN          reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    UNTIL           reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    ELSE            reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    EIF             reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    WEND            reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    NEXT            reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GREATHER        reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GREATHEREQUAL   reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SMALLER         reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SMALLEREQUAL    reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    NOTEQUAL        reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    EQUALTO         reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    error           reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    DO              reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    CLOSINGPAR      reduce using rule 61 (EL -> OPENPAR O CLOSINGPAR OL EL .)


state 134

    (19) E -> FOR ID EQUALS EA TO Ex . F NEXT ID
    (14) F -> . E F
    (15) F -> . empty
    (16) E -> . LET setType Idv EQUALS Ex
    (17) E -> . DIM setType Idv AS T Arr
    (18) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (19) E -> . FOR ID EQUALS EA TO Ex F NEXT ID
    (20) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (21) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (22) E -> . GOSUB ID
    (23) E -> . INPUT ES COMA IDEx
    (24) E -> . PRINT Ex
    (72) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    NEXT            reduce using rule 72 (empty -> .)

    F                              shift and go to state 144
    E                              shift and go to state 9
    empty                          shift and go to state 25

state 135

    (20) E -> WHILE while_first_conditional EL DO while_second_conditional F . WEND while_final_conditional

    WEND            shift and go to state 145


state 136

    (21) E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .

    LET             reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    DIM             reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    IF              reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    FOR             reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    WHILE           reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    REPEAT          reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    GOSUB           reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    INPUT           reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    PRINT           reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    SUBPROCEDURE    reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    END             reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    RETURN          reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    UNTIL           reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    ELSE            reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    EIF             reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    WEND            reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    NEXT            reduce using rule 21 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)


state 137

    (38) IDEx -> ID OPENBRACKET setType . Idv CLOSINGBRACKET
    (34) Idv -> . ID COMA Idv
    (35) Idv -> . ID

    ID              shift and go to state 50

    Idv                            shift and go to state 146

state 138

    (54) N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .

    MULTIPLY        reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    DIVIDE          reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    PLUS            reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    MINUS           reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    LET             reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    DIM             reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    IF              reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    FOR             reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WHILE           reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    REPEAT          reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GOSUB           reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    INPUT           reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    PRINT           reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    END             reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    RETURN          reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    UNTIL           reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    ELSE            reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    EIF             reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WEND            reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    NEXT            reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GREATHER        reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GREATHEREQUAL   reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SMALLER         reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SMALLEREQUAL    reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    NOTEQUAL        reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    EQUALTO         reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    error           reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    CLOSINGPAR      reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    TO              reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    CLOSINGBRACKET  reduce using rule 54 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)


state 139

    (4) Arr -> OPENBRACKET EA . CLOSINGBRACKET Arr
    (44) EA -> EA . PLUS P
    (45) EA -> EA . MINUS P

    CLOSINGBRACKET  shift and go to state 147
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 140

    (5) Arr -> OPENBRACKET ID . CLOSINGBRACKET Arr
    (51) N -> ID . saveID
    (53) N -> ID . OPENBRACKET INTVAL CLOSINGBRACKET
    (54) N -> ID . OPENBRACKET setType Idv CLOSINGBRACKET
    (55) saveID -> .

  ! shift/reduce conflict for CLOSINGBRACKET resolved as shift
    CLOSINGBRACKET  shift and go to state 148
    OPENBRACKET     shift and go to state 65
    MULTIPLY        reduce using rule 55 (saveID -> .)
    DIVIDE          reduce using rule 55 (saveID -> .)
    PLUS            reduce using rule 55 (saveID -> .)
    MINUS           reduce using rule 55 (saveID -> .)

  ! CLOSINGBRACKET  [ reduce using rule 55 (saveID -> .) ]

    saveID                         shift and go to state 64

state 141

    (10) S -> SUBPROCEDURE ID TWOPOINTS M RETURN S .

    END             reduce using rule 10 (S -> SUBPROCEDURE ID TWOPOINTS M RETURN S .)


state 142

    (18) E -> IF EL THEN first_conditional F Esf EIF . final_conditional
    (31) final_conditional -> .

    LET             reduce using rule 31 (final_conditional -> .)
    DIM             reduce using rule 31 (final_conditional -> .)
    IF              reduce using rule 31 (final_conditional -> .)
    FOR             reduce using rule 31 (final_conditional -> .)
    WHILE           reduce using rule 31 (final_conditional -> .)
    REPEAT          reduce using rule 31 (final_conditional -> .)
    GOSUB           reduce using rule 31 (final_conditional -> .)
    INPUT           reduce using rule 31 (final_conditional -> .)
    PRINT           reduce using rule 31 (final_conditional -> .)
    SUBPROCEDURE    reduce using rule 31 (final_conditional -> .)
    END             reduce using rule 31 (final_conditional -> .)
    RETURN          reduce using rule 31 (final_conditional -> .)
    UNTIL           reduce using rule 31 (final_conditional -> .)
    ELSE            reduce using rule 31 (final_conditional -> .)
    EIF             reduce using rule 31 (final_conditional -> .)
    WEND            reduce using rule 31 (final_conditional -> .)
    NEXT            reduce using rule 31 (final_conditional -> .)

    final_conditional              shift and go to state 149

state 143

    (32) Esf -> ELSE second_conditional . F
    (14) F -> . E F
    (15) F -> . empty
    (16) E -> . LET setType Idv EQUALS Ex
    (17) E -> . DIM setType Idv AS T Arr
    (18) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (19) E -> . FOR ID EQUALS EA TO Ex F NEXT ID
    (20) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (21) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (22) E -> . GOSUB ID
    (23) E -> . INPUT ES COMA IDEx
    (24) E -> . PRINT Ex
    (72) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    EIF             reduce using rule 72 (empty -> .)

    F                              shift and go to state 150
    E                              shift and go to state 9
    empty                          shift and go to state 25

state 144

    (19) E -> FOR ID EQUALS EA TO Ex F . NEXT ID

    NEXT            shift and go to state 151


state 145

    (20) E -> WHILE while_first_conditional EL DO while_second_conditional F WEND . while_final_conditional
    (28) while_final_conditional -> .

    LET             reduce using rule 28 (while_final_conditional -> .)
    DIM             reduce using rule 28 (while_final_conditional -> .)
    IF              reduce using rule 28 (while_final_conditional -> .)
    FOR             reduce using rule 28 (while_final_conditional -> .)
    WHILE           reduce using rule 28 (while_final_conditional -> .)
    REPEAT          reduce using rule 28 (while_final_conditional -> .)
    GOSUB           reduce using rule 28 (while_final_conditional -> .)
    INPUT           reduce using rule 28 (while_final_conditional -> .)
    PRINT           reduce using rule 28 (while_final_conditional -> .)
    SUBPROCEDURE    reduce using rule 28 (while_final_conditional -> .)
    END             reduce using rule 28 (while_final_conditional -> .)
    RETURN          reduce using rule 28 (while_final_conditional -> .)
    UNTIL           reduce using rule 28 (while_final_conditional -> .)
    ELSE            reduce using rule 28 (while_final_conditional -> .)
    EIF             reduce using rule 28 (while_final_conditional -> .)
    WEND            reduce using rule 28 (while_final_conditional -> .)
    NEXT            reduce using rule 28 (while_final_conditional -> .)

    while_final_conditional        shift and go to state 152

state 146

    (38) IDEx -> ID OPENBRACKET setType Idv . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 153


state 147

    (4) Arr -> OPENBRACKET EA CLOSINGBRACKET . Arr
    (4) Arr -> . OPENBRACKET EA CLOSINGBRACKET Arr
    (5) Arr -> . OPENBRACKET ID CLOSINGBRACKET Arr
    (6) Arr -> . empty
    (72) empty -> .

    OPENBRACKET     shift and go to state 126
    LET             reduce using rule 72 (empty -> .)
    DIM             reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    REPEAT          reduce using rule 72 (empty -> .)
    GOSUB           reduce using rule 72 (empty -> .)
    INPUT           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    SUBPROCEDURE    reduce using rule 72 (empty -> .)
    END             reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    UNTIL           reduce using rule 72 (empty -> .)
    ELSE            reduce using rule 72 (empty -> .)
    EIF             reduce using rule 72 (empty -> .)
    WEND            reduce using rule 72 (empty -> .)
    NEXT            reduce using rule 72 (empty -> .)

    Arr                            shift and go to state 154
    empty                          shift and go to state 127

state 148

    (5) Arr -> OPENBRACKET ID CLOSINGBRACKET . Arr
    (4) Arr -> . OPENBRACKET EA CLOSINGBRACKET Arr
    (5) Arr -> . OPENBRACKET ID CLOSINGBRACKET Arr
    (6) Arr -> . empty
    (72) empty -> .

    OPENBRACKET     shift and go to state 126
    LET             reduce using rule 72 (empty -> .)
    DIM             reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    REPEAT          reduce using rule 72 (empty -> .)
    GOSUB           reduce using rule 72 (empty -> .)
    INPUT           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    SUBPROCEDURE    reduce using rule 72 (empty -> .)
    END             reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    UNTIL           reduce using rule 72 (empty -> .)
    ELSE            reduce using rule 72 (empty -> .)
    EIF             reduce using rule 72 (empty -> .)
    WEND            reduce using rule 72 (empty -> .)
    NEXT            reduce using rule 72 (empty -> .)

    Arr                            shift and go to state 155
    empty                          shift and go to state 127

state 149

    (18) E -> IF EL THEN first_conditional F Esf EIF final_conditional .

    LET             reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    DIM             reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    IF              reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    FOR             reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    WHILE           reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    REPEAT          reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    GOSUB           reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    INPUT           reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    PRINT           reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    SUBPROCEDURE    reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    END             reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    RETURN          reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    UNTIL           reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    ELSE            reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    EIF             reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    WEND            reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    NEXT            reduce using rule 18 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)


state 150

    (32) Esf -> ELSE second_conditional F .

    EIF             reduce using rule 32 (Esf -> ELSE second_conditional F .)


state 151

    (19) E -> FOR ID EQUALS EA TO Ex F NEXT . ID

    ID              shift and go to state 156


state 152

    (20) E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .

    LET             reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    DIM             reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    IF              reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    FOR             reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    WHILE           reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    REPEAT          reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    GOSUB           reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    INPUT           reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    PRINT           reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    SUBPROCEDURE    reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    END             reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    RETURN          reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    UNTIL           reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    ELSE            reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    EIF             reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    WEND            reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    NEXT            reduce using rule 20 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)


state 153

    (38) IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .

    LET             reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    DIM             reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    IF              reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    FOR             reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WHILE           reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    REPEAT          reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GOSUB           reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    INPUT           reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    PRINT           reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    END             reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    RETURN          reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    UNTIL           reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    ELSE            reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    EIF             reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WEND            reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    NEXT            reduce using rule 38 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)


state 154

    (4) Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .

    LET             reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    DIM             reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    IF              reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    FOR             reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    WHILE           reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    REPEAT          reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    GOSUB           reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    INPUT           reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    PRINT           reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    SUBPROCEDURE    reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    END             reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    RETURN          reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    UNTIL           reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    ELSE            reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    EIF             reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    WEND            reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    NEXT            reduce using rule 4 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)


state 155

    (5) Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .

    LET             reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    DIM             reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    IF              reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    FOR             reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    WHILE           reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    REPEAT          reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    GOSUB           reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    INPUT           reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    PRINT           reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    SUBPROCEDURE    reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    END             reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    RETURN          reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    UNTIL           reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    ELSE            reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    EIF             reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    WEND            reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    NEXT            reduce using rule 5 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)


state 156

    (19) E -> FOR ID EQUALS EA TO Ex F NEXT ID .

    LET             reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    DIM             reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    IF              reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    FOR             reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    WHILE           reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    REPEAT          reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    GOSUB           reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    INPUT           reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    PRINT           reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    SUBPROCEDURE    reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    END             reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    RETURN          reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    UNTIL           reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    ELSE            reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    EIF             reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    WEND            reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)
    NEXT            reduce using rule 19 (E -> FOR ID EQUALS EA TO Ex F NEXT ID .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DIM in state 2 resolved as shift
WARNING: shift/reduce conflict for LET in state 3 resolved as shift
WARNING: shift/reduce conflict for DIM in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 3 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 3 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for LET in state 7 resolved as shift
WARNING: shift/reduce conflict for DIM in state 7 resolved as shift
WARNING: shift/reduce conflict for IF in state 7 resolved as shift
WARNING: shift/reduce conflict for FOR in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 7 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 7 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 7 resolved as shift
WARNING: shift/reduce conflict for LET in state 9 resolved as shift
WARNING: shift/reduce conflict for DIM in state 9 resolved as shift
WARNING: shift/reduce conflict for IF in state 9 resolved as shift
WARNING: shift/reduce conflict for FOR in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 9 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 9 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 9 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 9 resolved as shift
WARNING: shift/reduce conflict for LET in state 72 resolved as shift
WARNING: shift/reduce conflict for DIM in state 72 resolved as shift
WARNING: shift/reduce conflict for IF in state 72 resolved as shift
WARNING: shift/reduce conflict for FOR in state 72 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 72 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 72 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 72 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 72 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 72 resolved as shift
WARNING: shift/reduce conflict for CLOSINGBRACKET in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (M -> empty)
WARNING: rejected rule (F -> empty) in state 8
WARNING: reduce/reduce conflict in state 42 resolved using rule (Ex -> ID)
WARNING: rejected rule (saveID -> <empty>) in state 42
