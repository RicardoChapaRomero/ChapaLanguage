Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM V M endProgram S END
Rule 2     endProgram -> <empty>
Rule 3     V -> DIM setType Idv AS T Arr
Rule 4     V -> empty
Rule 5     Arr -> OPENBRACKET arr_space CLOSINGBRACKET
Rule 6     Arr -> empty
Rule 7     arr_space -> EA COMA arr_space
Rule 8     arr_space -> EA
Rule 9     T -> INT
Rule 10    T -> FLOAT
Rule 11    T -> WORD
Rule 12    S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S
Rule 13    S -> empty
Rule 14    fillSub -> <empty>
Rule 15    endProcedure -> <empty>
Rule 16    M -> F M
Rule 17    M -> empty
Rule 18    F -> E F
Rule 19    F -> empty
Rule 20    E -> LET setType Idv EQUALS EA
Rule 21    E -> DIM setType Idv AS T Arr
Rule 22    E -> IF EL THEN first_conditional F Esf EIF final_conditional
Rule 23    E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
Rule 24    E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
Rule 25    E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional
Rule 26    E -> GOSUB ID
Rule 27    E -> INPUT IDEx
Rule 28    E -> PRINT Ex
Rule 29    for_assignation -> <empty>
Rule 30    for_conditional -> <empty>
Rule 31    for_save_conditional -> <empty>
Rule 32    for_conditional_end -> <empty>
Rule 33    repeat_conditional -> <empty>
Rule 34    while_first_conditional -> <empty>
Rule 35    while_second_conditional -> <empty>
Rule 36    while_final_conditional -> <empty>
Rule 37    first_conditional -> <empty>
Rule 38    second_conditional -> <empty>
Rule 39    final_conditional -> <empty>
Rule 40    Esf -> ELSE second_conditional F
Rule 41    Esf -> empty
Rule 42    Idv -> ID COMA Idv
Rule 43    Idv -> ID
Rule 44    Idv -> ID Arr
Rule 45    setType -> <empty>
Rule 46    IDEx -> ID
Rule 47    IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET
Rule 48    Ex -> EA
Rule 49    Ex -> EL
Rule 50    ES -> WORDVAL
Rule 51    EA -> EA PLUS P
Rule 52    EA -> EA MINUS P
Rule 53    EA -> P
Rule 54    P -> P MULTIPLY N
Rule 55    P -> P DIVIDE N
Rule 56    P -> N
Rule 57    N -> cte saveID
Rule 58    N -> ID saveID
Rule 59    N -> OPENPAR EA CLOSINGPAR
Rule 60    N -> ID Arr
Rule 61    saveID -> <empty>
Rule 62    cte -> FLOATVAL
Rule 63    cte -> INTVAL
Rule 64    cte -> MINUS INTVAL
Rule 65    cte -> MINUS FLOATVAL
Rule 66    EL -> TRUE
Rule 67    EL -> FALSE
Rule 68    EL -> OPENPAR O CLOSINGPAR
Rule 69    EL -> OPENPAR O CLOSINGPAR OL EL
Rule 70    OL -> AND
Rule 71    OL -> OR
Rule 72    OL -> NOT
Rule 73    O -> EA GREATHER EA
Rule 74    O -> EA GREATHEREQUAL EA
Rule 75    O -> EA SMALLER EA
Rule 76    O -> EA SMALLEREQUAL EA
Rule 77    O -> EA NOTEQUAL EA
Rule 78    O -> EA EQUALTO EA
Rule 79    O -> Ex error Ex
Rule 80    empty -> <empty>

Terminals, with rules where they appear

AND                  : 70
AS                   : 3 21
CLOSINGBRACKET       : 5 47
CLOSINGPAR           : 59 68 69
COMA                 : 7 42
COMMENT              : 
DIM                  : 3 21
DIVIDE               : 55
DO                   : 23 24
EIF                  : 22
ELSE                 : 40
END                  : 1
EQUALS               : 20 23
EQUALTO              : 78
FALSE                : 67
FLOAT                : 10
FLOATVAL             : 62 65
FOR                  : 23
GOSUB                : 26
GREATHER             : 73
GREATHEREQUAL        : 74
ID                   : 12 23 23 26 42 43 44 46 47 58 60
IF                   : 22
INPUT                : 27
INT                  : 9
INTVAL               : 63 64
LET                  : 20
MINUS                : 52 64 65
MULTIPLY             : 54
NEXT                 : 23
NOT                  : 72
NOTEQUAL             : 77
OPENBRACKET          : 5 47
OPENPAR              : 59 68 69
OR                   : 71
PLUS                 : 51
PRINT                : 28
PROGRAM              : 1
REPEAT               : 25
RETURN               : 12
SMALLER              : 75
SMALLEREQUAL         : 76
SUBPROCEDURE         : 12
THEN                 : 22
TO                   : 23
TRUE                 : 66
TWOPOINTS            : 12
UNTIL                : 25
WEND                 : 24
WHILE                : 24
WORD                 : 11
WORDVAL              : 50
error                : 79

Nonterminals, with rules where they appear

Arr                  : 3 21 44 60
E                    : 18
EA                   : 7 8 20 23 23 48 51 52 59 73 73 74 74 75 75 76 76 77 77 78 78
EL                   : 22 24 25 49 69
ES                   : 
Esf                  : 22
Ex                   : 28 79 79
F                    : 16 18 22 23 24 25 40
IDEx                 : 27
Idv                  : 3 20 21 42 47
M                    : 1 12 16
N                    : 54 55 56
O                    : 68 69
OL                   : 69
P                    : 51 52 53 54 55
PROGRAMA             : 0
S                    : 1 12
T                    : 3 21
V                    : 1
arr_space            : 5 7
cte                  : 57
empty                : 4 6 13 17 19 41
endProcedure         : 12
endProgram           : 1
fillSub              : 12
final_conditional    : 22
first_conditional    : 22
for_assignation      : 23
for_conditional      : 23
for_conditional_end  : 23
for_save_conditional : 23
repeat_conditional   : 25
saveID               : 57 58
second_conditional   : 40
setType              : 3 20 21 47
while_final_conditional : 24
while_first_conditional : 24 25
while_second_conditional : 24

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM V M endProgram S END

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . V M endProgram S END
    (3) V -> . DIM setType Idv AS T Arr
    (4) V -> . empty
    (80) empty -> .

  ! shift/reduce conflict for DIM resolved as shift
    DIM             shift and go to state 4
    LET             reduce using rule 80 (empty -> .)
    IF              reduce using rule 80 (empty -> .)
    FOR             reduce using rule 80 (empty -> .)
    WHILE           reduce using rule 80 (empty -> .)
    REPEAT          reduce using rule 80 (empty -> .)
    GOSUB           reduce using rule 80 (empty -> .)
    INPUT           reduce using rule 80 (empty -> .)
    PRINT           reduce using rule 80 (empty -> .)
    SUBPROCEDURE    reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)

  ! DIM             [ reduce using rule 80 (empty -> .) ]

    V                              shift and go to state 3
    empty                          shift and go to state 5

state 3

    (1) PROGRAMA -> PROGRAM V . M endProgram S END
    (16) M -> . F M
    (17) M -> . empty
    (18) F -> . E F
    (19) F -> . empty
    (80) empty -> .
    (20) E -> . LET setType Idv EQUALS EA
    (21) E -> . DIM setType Idv AS T Arr
    (22) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (23) E -> . FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (24) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (25) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (26) E -> . GOSUB ID
    (27) E -> . INPUT IDEx
    (28) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    SUBPROCEDURE    reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 80 (empty -> .) ]
  ! DIM             [ reduce using rule 80 (empty -> .) ]
  ! IF              [ reduce using rule 80 (empty -> .) ]
  ! FOR             [ reduce using rule 80 (empty -> .) ]
  ! WHILE           [ reduce using rule 80 (empty -> .) ]
  ! REPEAT          [ reduce using rule 80 (empty -> .) ]
  ! GOSUB           [ reduce using rule 80 (empty -> .) ]
  ! INPUT           [ reduce using rule 80 (empty -> .) ]
  ! PRINT           [ reduce using rule 80 (empty -> .) ]

    M                              shift and go to state 6
    F                              shift and go to state 7
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 4

    (3) V -> DIM . setType Idv AS T Arr
    (45) setType -> .

    ID              reduce using rule 45 (setType -> .)

    setType                        shift and go to state 19

state 5

    (4) V -> empty .

    LET             reduce using rule 4 (V -> empty .)
    DIM             reduce using rule 4 (V -> empty .)
    IF              reduce using rule 4 (V -> empty .)
    FOR             reduce using rule 4 (V -> empty .)
    WHILE           reduce using rule 4 (V -> empty .)
    REPEAT          reduce using rule 4 (V -> empty .)
    GOSUB           reduce using rule 4 (V -> empty .)
    INPUT           reduce using rule 4 (V -> empty .)
    PRINT           reduce using rule 4 (V -> empty .)
    SUBPROCEDURE    reduce using rule 4 (V -> empty .)
    END             reduce using rule 4 (V -> empty .)


state 6

    (1) PROGRAMA -> PROGRAM V M . endProgram S END
    (2) endProgram -> .

    SUBPROCEDURE    reduce using rule 2 (endProgram -> .)
    END             reduce using rule 2 (endProgram -> .)

    endProgram                     shift and go to state 20

state 7

    (16) M -> F . M
    (16) M -> . F M
    (17) M -> . empty
    (18) F -> . E F
    (19) F -> . empty
    (80) empty -> .
    (20) E -> . LET setType Idv EQUALS EA
    (21) E -> . DIM setType Idv AS T Arr
    (22) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (23) E -> . FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (24) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (25) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (26) E -> . GOSUB ID
    (27) E -> . INPUT IDEx
    (28) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    SUBPROCEDURE    reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    RETURN          reduce using rule 80 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 80 (empty -> .) ]
  ! DIM             [ reduce using rule 80 (empty -> .) ]
  ! IF              [ reduce using rule 80 (empty -> .) ]
  ! FOR             [ reduce using rule 80 (empty -> .) ]
  ! WHILE           [ reduce using rule 80 (empty -> .) ]
  ! REPEAT          [ reduce using rule 80 (empty -> .) ]
  ! GOSUB           [ reduce using rule 80 (empty -> .) ]
  ! INPUT           [ reduce using rule 80 (empty -> .) ]
  ! PRINT           [ reduce using rule 80 (empty -> .) ]

    F                              shift and go to state 7
    M                              shift and go to state 21
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 8

    (17) M -> empty .
    (19) F -> empty .

  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 17 (M -> empty .)
  ! reduce/reduce conflict for END resolved using rule 17 (M -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 17 (M -> empty .)
    SUBPROCEDURE    reduce using rule 17 (M -> empty .)
    END             reduce using rule 17 (M -> empty .)
    RETURN          reduce using rule 17 (M -> empty .)
    LET             reduce using rule 19 (F -> empty .)
    DIM             reduce using rule 19 (F -> empty .)
    IF              reduce using rule 19 (F -> empty .)
    FOR             reduce using rule 19 (F -> empty .)
    WHILE           reduce using rule 19 (F -> empty .)
    REPEAT          reduce using rule 19 (F -> empty .)
    GOSUB           reduce using rule 19 (F -> empty .)
    INPUT           reduce using rule 19 (F -> empty .)
    PRINT           reduce using rule 19 (F -> empty .)

  ! SUBPROCEDURE    [ reduce using rule 19 (F -> empty .) ]
  ! END             [ reduce using rule 19 (F -> empty .) ]
  ! RETURN          [ reduce using rule 19 (F -> empty .) ]


state 9

    (18) F -> E . F
    (18) F -> . E F
    (19) F -> . empty
    (20) E -> . LET setType Idv EQUALS EA
    (21) E -> . DIM setType Idv AS T Arr
    (22) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (23) E -> . FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (24) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (25) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (26) E -> . GOSUB ID
    (27) E -> . INPUT IDEx
    (28) E -> . PRINT Ex
    (80) empty -> .

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    SUBPROCEDURE    reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    RETURN          reduce using rule 80 (empty -> .)
    UNTIL           reduce using rule 80 (empty -> .)
    ELSE            reduce using rule 80 (empty -> .)
    EIF             reduce using rule 80 (empty -> .)
    WEND            reduce using rule 80 (empty -> .)
    NEXT            reduce using rule 80 (empty -> .)

  ! LET             [ reduce using rule 80 (empty -> .) ]
  ! DIM             [ reduce using rule 80 (empty -> .) ]
  ! IF              [ reduce using rule 80 (empty -> .) ]
  ! FOR             [ reduce using rule 80 (empty -> .) ]
  ! WHILE           [ reduce using rule 80 (empty -> .) ]
  ! REPEAT          [ reduce using rule 80 (empty -> .) ]
  ! GOSUB           [ reduce using rule 80 (empty -> .) ]
  ! INPUT           [ reduce using rule 80 (empty -> .) ]
  ! PRINT           [ reduce using rule 80 (empty -> .) ]

    E                              shift and go to state 9
    F                              shift and go to state 22
    empty                          shift and go to state 23

state 10

    (20) E -> LET . setType Idv EQUALS EA
    (45) setType -> .

    ID              reduce using rule 45 (setType -> .)

    setType                        shift and go to state 24

state 11

    (21) E -> DIM . setType Idv AS T Arr
    (45) setType -> .

    ID              reduce using rule 45 (setType -> .)

    setType                        shift and go to state 25

state 12

    (22) E -> IF . EL THEN first_conditional F Esf EIF final_conditional
    (66) EL -> . TRUE
    (67) EL -> . FALSE
    (68) EL -> . OPENPAR O CLOSINGPAR
    (69) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 26

state 13

    (23) E -> FOR . ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end

    ID              shift and go to state 30


state 14

    (24) E -> WHILE . while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (34) while_first_conditional -> .

    TRUE            reduce using rule 34 (while_first_conditional -> .)
    FALSE           reduce using rule 34 (while_first_conditional -> .)
    OPENPAR         reduce using rule 34 (while_first_conditional -> .)

    while_first_conditional        shift and go to state 31

state 15

    (25) E -> REPEAT . while_first_conditional F UNTIL EL repeat_conditional
    (34) while_first_conditional -> .

    LET             reduce using rule 34 (while_first_conditional -> .)
    DIM             reduce using rule 34 (while_first_conditional -> .)
    IF              reduce using rule 34 (while_first_conditional -> .)
    FOR             reduce using rule 34 (while_first_conditional -> .)
    WHILE           reduce using rule 34 (while_first_conditional -> .)
    REPEAT          reduce using rule 34 (while_first_conditional -> .)
    GOSUB           reduce using rule 34 (while_first_conditional -> .)
    INPUT           reduce using rule 34 (while_first_conditional -> .)
    PRINT           reduce using rule 34 (while_first_conditional -> .)
    UNTIL           reduce using rule 34 (while_first_conditional -> .)

    while_first_conditional        shift and go to state 32

state 16

    (26) E -> GOSUB . ID

    ID              shift and go to state 33


state 17

    (27) E -> INPUT . IDEx
    (46) IDEx -> . ID
    (47) IDEx -> . ID OPENBRACKET setType Idv CLOSINGBRACKET

    ID              shift and go to state 35

    IDEx                           shift and go to state 34

state 18

    (28) E -> PRINT . Ex
    (48) Ex -> . EA
    (49) Ex -> . EL
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (66) EL -> . TRUE
    (67) EL -> . FALSE
    (68) EL -> . OPENPAR O CLOSINGPAR
    (69) EL -> . OPENPAR O CLOSINGPAR OL EL
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    ID              shift and go to state 44
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    Ex                             shift and go to state 36
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 19

    (3) V -> DIM setType . Idv AS T Arr
    (42) Idv -> . ID COMA Idv
    (43) Idv -> . ID
    (44) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 47

state 20

    (1) PROGRAMA -> PROGRAM V M endProgram . S END
    (12) S -> . SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S
    (13) S -> . empty
    (80) empty -> .

    SUBPROCEDURE    shift and go to state 50
    END             reduce using rule 80 (empty -> .)

    S                              shift and go to state 49
    empty                          shift and go to state 51

state 21

    (16) M -> F M .

    SUBPROCEDURE    reduce using rule 16 (M -> F M .)
    END             reduce using rule 16 (M -> F M .)
    RETURN          reduce using rule 16 (M -> F M .)


state 22

    (18) F -> E F .

    LET             reduce using rule 18 (F -> E F .)
    DIM             reduce using rule 18 (F -> E F .)
    IF              reduce using rule 18 (F -> E F .)
    FOR             reduce using rule 18 (F -> E F .)
    WHILE           reduce using rule 18 (F -> E F .)
    REPEAT          reduce using rule 18 (F -> E F .)
    GOSUB           reduce using rule 18 (F -> E F .)
    INPUT           reduce using rule 18 (F -> E F .)
    PRINT           reduce using rule 18 (F -> E F .)
    SUBPROCEDURE    reduce using rule 18 (F -> E F .)
    END             reduce using rule 18 (F -> E F .)
    RETURN          reduce using rule 18 (F -> E F .)
    UNTIL           reduce using rule 18 (F -> E F .)
    ELSE            reduce using rule 18 (F -> E F .)
    EIF             reduce using rule 18 (F -> E F .)
    WEND            reduce using rule 18 (F -> E F .)
    NEXT            reduce using rule 18 (F -> E F .)


state 23

    (19) F -> empty .

    LET             reduce using rule 19 (F -> empty .)
    DIM             reduce using rule 19 (F -> empty .)
    IF              reduce using rule 19 (F -> empty .)
    FOR             reduce using rule 19 (F -> empty .)
    WHILE           reduce using rule 19 (F -> empty .)
    REPEAT          reduce using rule 19 (F -> empty .)
    GOSUB           reduce using rule 19 (F -> empty .)
    INPUT           reduce using rule 19 (F -> empty .)
    PRINT           reduce using rule 19 (F -> empty .)
    SUBPROCEDURE    reduce using rule 19 (F -> empty .)
    END             reduce using rule 19 (F -> empty .)
    RETURN          reduce using rule 19 (F -> empty .)
    UNTIL           reduce using rule 19 (F -> empty .)
    ELSE            reduce using rule 19 (F -> empty .)
    EIF             reduce using rule 19 (F -> empty .)
    WEND            reduce using rule 19 (F -> empty .)
    NEXT            reduce using rule 19 (F -> empty .)


state 24

    (20) E -> LET setType . Idv EQUALS EA
    (42) Idv -> . ID COMA Idv
    (43) Idv -> . ID
    (44) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 52

state 25

    (21) E -> DIM setType . Idv AS T Arr
    (42) Idv -> . ID COMA Idv
    (43) Idv -> . ID
    (44) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 53

state 26

    (22) E -> IF EL . THEN first_conditional F Esf EIF final_conditional

    THEN            shift and go to state 54


state 27

    (66) EL -> TRUE .

    THEN            reduce using rule 66 (EL -> TRUE .)
    LET             reduce using rule 66 (EL -> TRUE .)
    DIM             reduce using rule 66 (EL -> TRUE .)
    IF              reduce using rule 66 (EL -> TRUE .)
    FOR             reduce using rule 66 (EL -> TRUE .)
    WHILE           reduce using rule 66 (EL -> TRUE .)
    REPEAT          reduce using rule 66 (EL -> TRUE .)
    GOSUB           reduce using rule 66 (EL -> TRUE .)
    INPUT           reduce using rule 66 (EL -> TRUE .)
    PRINT           reduce using rule 66 (EL -> TRUE .)
    SUBPROCEDURE    reduce using rule 66 (EL -> TRUE .)
    END             reduce using rule 66 (EL -> TRUE .)
    RETURN          reduce using rule 66 (EL -> TRUE .)
    UNTIL           reduce using rule 66 (EL -> TRUE .)
    ELSE            reduce using rule 66 (EL -> TRUE .)
    EIF             reduce using rule 66 (EL -> TRUE .)
    WEND            reduce using rule 66 (EL -> TRUE .)
    NEXT            reduce using rule 66 (EL -> TRUE .)
    error           reduce using rule 66 (EL -> TRUE .)
    DO              reduce using rule 66 (EL -> TRUE .)
    CLOSINGPAR      reduce using rule 66 (EL -> TRUE .)


state 28

    (67) EL -> FALSE .

    THEN            reduce using rule 67 (EL -> FALSE .)
    LET             reduce using rule 67 (EL -> FALSE .)
    DIM             reduce using rule 67 (EL -> FALSE .)
    IF              reduce using rule 67 (EL -> FALSE .)
    FOR             reduce using rule 67 (EL -> FALSE .)
    WHILE           reduce using rule 67 (EL -> FALSE .)
    REPEAT          reduce using rule 67 (EL -> FALSE .)
    GOSUB           reduce using rule 67 (EL -> FALSE .)
    INPUT           reduce using rule 67 (EL -> FALSE .)
    PRINT           reduce using rule 67 (EL -> FALSE .)
    SUBPROCEDURE    reduce using rule 67 (EL -> FALSE .)
    END             reduce using rule 67 (EL -> FALSE .)
    RETURN          reduce using rule 67 (EL -> FALSE .)
    UNTIL           reduce using rule 67 (EL -> FALSE .)
    ELSE            reduce using rule 67 (EL -> FALSE .)
    EIF             reduce using rule 67 (EL -> FALSE .)
    WEND            reduce using rule 67 (EL -> FALSE .)
    NEXT            reduce using rule 67 (EL -> FALSE .)
    error           reduce using rule 67 (EL -> FALSE .)
    DO              reduce using rule 67 (EL -> FALSE .)
    CLOSINGPAR      reduce using rule 67 (EL -> FALSE .)


state 29

    (68) EL -> OPENPAR . O CLOSINGPAR
    (69) EL -> OPENPAR . O CLOSINGPAR OL EL
    (73) O -> . EA GREATHER EA
    (74) O -> . EA GREATHEREQUAL EA
    (75) O -> . EA SMALLER EA
    (76) O -> . EA SMALLEREQUAL EA
    (77) O -> . EA NOTEQUAL EA
    (78) O -> . EA EQUALTO EA
    (79) O -> . Ex error Ex
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (48) Ex -> . EA
    (49) Ex -> . EL
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (66) EL -> . TRUE
    (67) EL -> . FALSE
    (68) EL -> . OPENPAR O CLOSINGPAR
    (69) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    ID              shift and go to state 44
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    O                              shift and go to state 55
    EL                             shift and go to state 38
    EA                             shift and go to state 56
    Ex                             shift and go to state 57
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 30

    (23) E -> FOR ID . EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end

    EQUALS          shift and go to state 58


state 31

    (24) E -> WHILE while_first_conditional . EL DO while_second_conditional F WEND while_final_conditional
    (66) EL -> . TRUE
    (67) EL -> . FALSE
    (68) EL -> . OPENPAR O CLOSINGPAR
    (69) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 59

state 32

    (25) E -> REPEAT while_first_conditional . F UNTIL EL repeat_conditional
    (18) F -> . E F
    (19) F -> . empty
    (20) E -> . LET setType Idv EQUALS EA
    (21) E -> . DIM setType Idv AS T Arr
    (22) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (23) E -> . FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (24) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (25) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (26) E -> . GOSUB ID
    (27) E -> . INPUT IDEx
    (28) E -> . PRINT Ex
    (80) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    UNTIL           reduce using rule 80 (empty -> .)

    F                              shift and go to state 60
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 33

    (26) E -> GOSUB ID .

    LET             reduce using rule 26 (E -> GOSUB ID .)
    DIM             reduce using rule 26 (E -> GOSUB ID .)
    IF              reduce using rule 26 (E -> GOSUB ID .)
    FOR             reduce using rule 26 (E -> GOSUB ID .)
    WHILE           reduce using rule 26 (E -> GOSUB ID .)
    REPEAT          reduce using rule 26 (E -> GOSUB ID .)
    GOSUB           reduce using rule 26 (E -> GOSUB ID .)
    INPUT           reduce using rule 26 (E -> GOSUB ID .)
    PRINT           reduce using rule 26 (E -> GOSUB ID .)
    SUBPROCEDURE    reduce using rule 26 (E -> GOSUB ID .)
    END             reduce using rule 26 (E -> GOSUB ID .)
    RETURN          reduce using rule 26 (E -> GOSUB ID .)
    UNTIL           reduce using rule 26 (E -> GOSUB ID .)
    ELSE            reduce using rule 26 (E -> GOSUB ID .)
    EIF             reduce using rule 26 (E -> GOSUB ID .)
    WEND            reduce using rule 26 (E -> GOSUB ID .)
    NEXT            reduce using rule 26 (E -> GOSUB ID .)


state 34

    (27) E -> INPUT IDEx .

    LET             reduce using rule 27 (E -> INPUT IDEx .)
    DIM             reduce using rule 27 (E -> INPUT IDEx .)
    IF              reduce using rule 27 (E -> INPUT IDEx .)
    FOR             reduce using rule 27 (E -> INPUT IDEx .)
    WHILE           reduce using rule 27 (E -> INPUT IDEx .)
    REPEAT          reduce using rule 27 (E -> INPUT IDEx .)
    GOSUB           reduce using rule 27 (E -> INPUT IDEx .)
    INPUT           reduce using rule 27 (E -> INPUT IDEx .)
    PRINT           reduce using rule 27 (E -> INPUT IDEx .)
    SUBPROCEDURE    reduce using rule 27 (E -> INPUT IDEx .)
    END             reduce using rule 27 (E -> INPUT IDEx .)
    RETURN          reduce using rule 27 (E -> INPUT IDEx .)
    UNTIL           reduce using rule 27 (E -> INPUT IDEx .)
    ELSE            reduce using rule 27 (E -> INPUT IDEx .)
    EIF             reduce using rule 27 (E -> INPUT IDEx .)
    WEND            reduce using rule 27 (E -> INPUT IDEx .)
    NEXT            reduce using rule 27 (E -> INPUT IDEx .)


state 35

    (46) IDEx -> ID .
    (47) IDEx -> ID . OPENBRACKET setType Idv CLOSINGBRACKET

    LET             reduce using rule 46 (IDEx -> ID .)
    DIM             reduce using rule 46 (IDEx -> ID .)
    IF              reduce using rule 46 (IDEx -> ID .)
    FOR             reduce using rule 46 (IDEx -> ID .)
    WHILE           reduce using rule 46 (IDEx -> ID .)
    REPEAT          reduce using rule 46 (IDEx -> ID .)
    GOSUB           reduce using rule 46 (IDEx -> ID .)
    INPUT           reduce using rule 46 (IDEx -> ID .)
    PRINT           reduce using rule 46 (IDEx -> ID .)
    SUBPROCEDURE    reduce using rule 46 (IDEx -> ID .)
    END             reduce using rule 46 (IDEx -> ID .)
    RETURN          reduce using rule 46 (IDEx -> ID .)
    UNTIL           reduce using rule 46 (IDEx -> ID .)
    ELSE            reduce using rule 46 (IDEx -> ID .)
    EIF             reduce using rule 46 (IDEx -> ID .)
    WEND            reduce using rule 46 (IDEx -> ID .)
    NEXT            reduce using rule 46 (IDEx -> ID .)
    OPENBRACKET     shift and go to state 61


state 36

    (28) E -> PRINT Ex .

    LET             reduce using rule 28 (E -> PRINT Ex .)
    DIM             reduce using rule 28 (E -> PRINT Ex .)
    IF              reduce using rule 28 (E -> PRINT Ex .)
    FOR             reduce using rule 28 (E -> PRINT Ex .)
    WHILE           reduce using rule 28 (E -> PRINT Ex .)
    REPEAT          reduce using rule 28 (E -> PRINT Ex .)
    GOSUB           reduce using rule 28 (E -> PRINT Ex .)
    INPUT           reduce using rule 28 (E -> PRINT Ex .)
    PRINT           reduce using rule 28 (E -> PRINT Ex .)
    SUBPROCEDURE    reduce using rule 28 (E -> PRINT Ex .)
    END             reduce using rule 28 (E -> PRINT Ex .)
    RETURN          reduce using rule 28 (E -> PRINT Ex .)
    UNTIL           reduce using rule 28 (E -> PRINT Ex .)
    ELSE            reduce using rule 28 (E -> PRINT Ex .)
    EIF             reduce using rule 28 (E -> PRINT Ex .)
    WEND            reduce using rule 28 (E -> PRINT Ex .)
    NEXT            reduce using rule 28 (E -> PRINT Ex .)


state 37

    (48) Ex -> EA .
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    LET             reduce using rule 48 (Ex -> EA .)
    DIM             reduce using rule 48 (Ex -> EA .)
    IF              reduce using rule 48 (Ex -> EA .)
    FOR             reduce using rule 48 (Ex -> EA .)
    WHILE           reduce using rule 48 (Ex -> EA .)
    REPEAT          reduce using rule 48 (Ex -> EA .)
    GOSUB           reduce using rule 48 (Ex -> EA .)
    INPUT           reduce using rule 48 (Ex -> EA .)
    PRINT           reduce using rule 48 (Ex -> EA .)
    SUBPROCEDURE    reduce using rule 48 (Ex -> EA .)
    END             reduce using rule 48 (Ex -> EA .)
    RETURN          reduce using rule 48 (Ex -> EA .)
    UNTIL           reduce using rule 48 (Ex -> EA .)
    ELSE            reduce using rule 48 (Ex -> EA .)
    EIF             reduce using rule 48 (Ex -> EA .)
    WEND            reduce using rule 48 (Ex -> EA .)
    NEXT            reduce using rule 48 (Ex -> EA .)
    CLOSINGPAR      reduce using rule 48 (Ex -> EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 38

    (49) Ex -> EL .

    LET             reduce using rule 49 (Ex -> EL .)
    DIM             reduce using rule 49 (Ex -> EL .)
    IF              reduce using rule 49 (Ex -> EL .)
    FOR             reduce using rule 49 (Ex -> EL .)
    WHILE           reduce using rule 49 (Ex -> EL .)
    REPEAT          reduce using rule 49 (Ex -> EL .)
    GOSUB           reduce using rule 49 (Ex -> EL .)
    INPUT           reduce using rule 49 (Ex -> EL .)
    PRINT           reduce using rule 49 (Ex -> EL .)
    SUBPROCEDURE    reduce using rule 49 (Ex -> EL .)
    END             reduce using rule 49 (Ex -> EL .)
    RETURN          reduce using rule 49 (Ex -> EL .)
    UNTIL           reduce using rule 49 (Ex -> EL .)
    ELSE            reduce using rule 49 (Ex -> EL .)
    EIF             reduce using rule 49 (Ex -> EL .)
    WEND            reduce using rule 49 (Ex -> EL .)
    NEXT            reduce using rule 49 (Ex -> EL .)
    error           reduce using rule 49 (Ex -> EL .)
    CLOSINGPAR      reduce using rule 49 (Ex -> EL .)


state 39

    (53) EA -> P .
    (54) P -> P . MULTIPLY N
    (55) P -> P . DIVIDE N

    PLUS            reduce using rule 53 (EA -> P .)
    MINUS           reduce using rule 53 (EA -> P .)
    LET             reduce using rule 53 (EA -> P .)
    DIM             reduce using rule 53 (EA -> P .)
    IF              reduce using rule 53 (EA -> P .)
    FOR             reduce using rule 53 (EA -> P .)
    WHILE           reduce using rule 53 (EA -> P .)
    REPEAT          reduce using rule 53 (EA -> P .)
    GOSUB           reduce using rule 53 (EA -> P .)
    INPUT           reduce using rule 53 (EA -> P .)
    PRINT           reduce using rule 53 (EA -> P .)
    SUBPROCEDURE    reduce using rule 53 (EA -> P .)
    END             reduce using rule 53 (EA -> P .)
    RETURN          reduce using rule 53 (EA -> P .)
    UNTIL           reduce using rule 53 (EA -> P .)
    ELSE            reduce using rule 53 (EA -> P .)
    EIF             reduce using rule 53 (EA -> P .)
    WEND            reduce using rule 53 (EA -> P .)
    NEXT            reduce using rule 53 (EA -> P .)
    GREATHER        reduce using rule 53 (EA -> P .)
    GREATHEREQUAL   reduce using rule 53 (EA -> P .)
    SMALLER         reduce using rule 53 (EA -> P .)
    SMALLEREQUAL    reduce using rule 53 (EA -> P .)
    NOTEQUAL        reduce using rule 53 (EA -> P .)
    EQUALTO         reduce using rule 53 (EA -> P .)
    error           reduce using rule 53 (EA -> P .)
    CLOSINGPAR      reduce using rule 53 (EA -> P .)
    TO              reduce using rule 53 (EA -> P .)
    COMA            reduce using rule 53 (EA -> P .)
    CLOSINGBRACKET  reduce using rule 53 (EA -> P .)
    DO              reduce using rule 53 (EA -> P .)
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65


state 40

    (64) cte -> MINUS . INTVAL
    (65) cte -> MINUS . FLOATVAL

    INTVAL          shift and go to state 66
    FLOATVAL        shift and go to state 67


state 41

    (68) EL -> OPENPAR . O CLOSINGPAR
    (69) EL -> OPENPAR . O CLOSINGPAR OL EL
    (59) N -> OPENPAR . EA CLOSINGPAR
    (73) O -> . EA GREATHER EA
    (74) O -> . EA GREATHEREQUAL EA
    (75) O -> . EA SMALLER EA
    (76) O -> . EA SMALLEREQUAL EA
    (77) O -> . EA NOTEQUAL EA
    (78) O -> . EA EQUALTO EA
    (79) O -> . Ex error Ex
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (48) Ex -> . EA
    (49) Ex -> . EL
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (66) EL -> . TRUE
    (67) EL -> . FALSE
    (68) EL -> . OPENPAR O CLOSINGPAR
    (69) EL -> . OPENPAR O CLOSINGPAR OL EL
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    ID              shift and go to state 44
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    O                              shift and go to state 55
    EL                             shift and go to state 38
    EA                             shift and go to state 68
    Ex                             shift and go to state 57
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 42

    (56) P -> N .

    MULTIPLY        reduce using rule 56 (P -> N .)
    DIVIDE          reduce using rule 56 (P -> N .)
    PLUS            reduce using rule 56 (P -> N .)
    MINUS           reduce using rule 56 (P -> N .)
    LET             reduce using rule 56 (P -> N .)
    DIM             reduce using rule 56 (P -> N .)
    IF              reduce using rule 56 (P -> N .)
    FOR             reduce using rule 56 (P -> N .)
    WHILE           reduce using rule 56 (P -> N .)
    REPEAT          reduce using rule 56 (P -> N .)
    GOSUB           reduce using rule 56 (P -> N .)
    INPUT           reduce using rule 56 (P -> N .)
    PRINT           reduce using rule 56 (P -> N .)
    SUBPROCEDURE    reduce using rule 56 (P -> N .)
    END             reduce using rule 56 (P -> N .)
    RETURN          reduce using rule 56 (P -> N .)
    UNTIL           reduce using rule 56 (P -> N .)
    ELSE            reduce using rule 56 (P -> N .)
    EIF             reduce using rule 56 (P -> N .)
    WEND            reduce using rule 56 (P -> N .)
    NEXT            reduce using rule 56 (P -> N .)
    GREATHER        reduce using rule 56 (P -> N .)
    GREATHEREQUAL   reduce using rule 56 (P -> N .)
    SMALLER         reduce using rule 56 (P -> N .)
    SMALLEREQUAL    reduce using rule 56 (P -> N .)
    NOTEQUAL        reduce using rule 56 (P -> N .)
    EQUALTO         reduce using rule 56 (P -> N .)
    error           reduce using rule 56 (P -> N .)
    CLOSINGPAR      reduce using rule 56 (P -> N .)
    TO              reduce using rule 56 (P -> N .)
    COMA            reduce using rule 56 (P -> N .)
    CLOSINGBRACKET  reduce using rule 56 (P -> N .)
    DO              reduce using rule 56 (P -> N .)


state 43

    (57) N -> cte . saveID
    (61) saveID -> .

    MULTIPLY        reduce using rule 61 (saveID -> .)
    DIVIDE          reduce using rule 61 (saveID -> .)
    PLUS            reduce using rule 61 (saveID -> .)
    MINUS           reduce using rule 61 (saveID -> .)
    LET             reduce using rule 61 (saveID -> .)
    DIM             reduce using rule 61 (saveID -> .)
    IF              reduce using rule 61 (saveID -> .)
    FOR             reduce using rule 61 (saveID -> .)
    WHILE           reduce using rule 61 (saveID -> .)
    REPEAT          reduce using rule 61 (saveID -> .)
    GOSUB           reduce using rule 61 (saveID -> .)
    INPUT           reduce using rule 61 (saveID -> .)
    PRINT           reduce using rule 61 (saveID -> .)
    SUBPROCEDURE    reduce using rule 61 (saveID -> .)
    END             reduce using rule 61 (saveID -> .)
    RETURN          reduce using rule 61 (saveID -> .)
    UNTIL           reduce using rule 61 (saveID -> .)
    ELSE            reduce using rule 61 (saveID -> .)
    EIF             reduce using rule 61 (saveID -> .)
    WEND            reduce using rule 61 (saveID -> .)
    NEXT            reduce using rule 61 (saveID -> .)
    GREATHER        reduce using rule 61 (saveID -> .)
    GREATHEREQUAL   reduce using rule 61 (saveID -> .)
    SMALLER         reduce using rule 61 (saveID -> .)
    SMALLEREQUAL    reduce using rule 61 (saveID -> .)
    NOTEQUAL        reduce using rule 61 (saveID -> .)
    EQUALTO         reduce using rule 61 (saveID -> .)
    error           reduce using rule 61 (saveID -> .)
    CLOSINGPAR      reduce using rule 61 (saveID -> .)
    TO              reduce using rule 61 (saveID -> .)
    COMA            reduce using rule 61 (saveID -> .)
    CLOSINGBRACKET  reduce using rule 61 (saveID -> .)
    DO              reduce using rule 61 (saveID -> .)

    saveID                         shift and go to state 69

state 44

    (58) N -> ID . saveID
    (60) N -> ID . Arr
    (61) saveID -> .
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (80) empty -> .

  ! reduce/reduce conflict for MULTIPLY resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for LET resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for DIM resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for IF resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for FOR resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for GOSUB resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for INPUT resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for END resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for EIF resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for WEND resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for NEXT resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for GREATHER resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for SMALLER resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for SMALLEREQUAL resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for EQUALTO resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for error resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for CLOSINGPAR resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for TO resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for COMA resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for CLOSINGBRACKET resolved using rule 61 (saveID -> .)
  ! reduce/reduce conflict for DO resolved using rule 61 (saveID -> .)
    MULTIPLY        reduce using rule 61 (saveID -> .)
    DIVIDE          reduce using rule 61 (saveID -> .)
    PLUS            reduce using rule 61 (saveID -> .)
    MINUS           reduce using rule 61 (saveID -> .)
    LET             reduce using rule 61 (saveID -> .)
    DIM             reduce using rule 61 (saveID -> .)
    IF              reduce using rule 61 (saveID -> .)
    FOR             reduce using rule 61 (saveID -> .)
    WHILE           reduce using rule 61 (saveID -> .)
    REPEAT          reduce using rule 61 (saveID -> .)
    GOSUB           reduce using rule 61 (saveID -> .)
    INPUT           reduce using rule 61 (saveID -> .)
    PRINT           reduce using rule 61 (saveID -> .)
    SUBPROCEDURE    reduce using rule 61 (saveID -> .)
    END             reduce using rule 61 (saveID -> .)
    RETURN          reduce using rule 61 (saveID -> .)
    UNTIL           reduce using rule 61 (saveID -> .)
    ELSE            reduce using rule 61 (saveID -> .)
    EIF             reduce using rule 61 (saveID -> .)
    WEND            reduce using rule 61 (saveID -> .)
    NEXT            reduce using rule 61 (saveID -> .)
    GREATHER        reduce using rule 61 (saveID -> .)
    GREATHEREQUAL   reduce using rule 61 (saveID -> .)
    SMALLER         reduce using rule 61 (saveID -> .)
    SMALLEREQUAL    reduce using rule 61 (saveID -> .)
    NOTEQUAL        reduce using rule 61 (saveID -> .)
    EQUALTO         reduce using rule 61 (saveID -> .)
    error           reduce using rule 61 (saveID -> .)
    CLOSINGPAR      reduce using rule 61 (saveID -> .)
    TO              reduce using rule 61 (saveID -> .)
    COMA            reduce using rule 61 (saveID -> .)
    CLOSINGBRACKET  reduce using rule 61 (saveID -> .)
    DO              reduce using rule 61 (saveID -> .)
    OPENBRACKET     shift and go to state 72

  ! MULTIPLY        [ reduce using rule 80 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 80 (empty -> .) ]
  ! PLUS            [ reduce using rule 80 (empty -> .) ]
  ! MINUS           [ reduce using rule 80 (empty -> .) ]
  ! LET             [ reduce using rule 80 (empty -> .) ]
  ! DIM             [ reduce using rule 80 (empty -> .) ]
  ! IF              [ reduce using rule 80 (empty -> .) ]
  ! FOR             [ reduce using rule 80 (empty -> .) ]
  ! WHILE           [ reduce using rule 80 (empty -> .) ]
  ! REPEAT          [ reduce using rule 80 (empty -> .) ]
  ! GOSUB           [ reduce using rule 80 (empty -> .) ]
  ! INPUT           [ reduce using rule 80 (empty -> .) ]
  ! PRINT           [ reduce using rule 80 (empty -> .) ]
  ! SUBPROCEDURE    [ reduce using rule 80 (empty -> .) ]
  ! END             [ reduce using rule 80 (empty -> .) ]
  ! RETURN          [ reduce using rule 80 (empty -> .) ]
  ! UNTIL           [ reduce using rule 80 (empty -> .) ]
  ! ELSE            [ reduce using rule 80 (empty -> .) ]
  ! EIF             [ reduce using rule 80 (empty -> .) ]
  ! WEND            [ reduce using rule 80 (empty -> .) ]
  ! NEXT            [ reduce using rule 80 (empty -> .) ]
  ! GREATHER        [ reduce using rule 80 (empty -> .) ]
  ! GREATHEREQUAL   [ reduce using rule 80 (empty -> .) ]
  ! SMALLER         [ reduce using rule 80 (empty -> .) ]
  ! SMALLEREQUAL    [ reduce using rule 80 (empty -> .) ]
  ! NOTEQUAL        [ reduce using rule 80 (empty -> .) ]
  ! EQUALTO         [ reduce using rule 80 (empty -> .) ]
  ! error           [ reduce using rule 80 (empty -> .) ]
  ! CLOSINGPAR      [ reduce using rule 80 (empty -> .) ]
  ! TO              [ reduce using rule 80 (empty -> .) ]
  ! COMA            [ reduce using rule 80 (empty -> .) ]
  ! CLOSINGBRACKET  [ reduce using rule 80 (empty -> .) ]
  ! DO              [ reduce using rule 80 (empty -> .) ]

    saveID                         shift and go to state 70
    Arr                            shift and go to state 71
    empty                          shift and go to state 73

state 45

    (62) cte -> FLOATVAL .

    MULTIPLY        reduce using rule 62 (cte -> FLOATVAL .)
    DIVIDE          reduce using rule 62 (cte -> FLOATVAL .)
    PLUS            reduce using rule 62 (cte -> FLOATVAL .)
    MINUS           reduce using rule 62 (cte -> FLOATVAL .)
    LET             reduce using rule 62 (cte -> FLOATVAL .)
    DIM             reduce using rule 62 (cte -> FLOATVAL .)
    IF              reduce using rule 62 (cte -> FLOATVAL .)
    FOR             reduce using rule 62 (cte -> FLOATVAL .)
    WHILE           reduce using rule 62 (cte -> FLOATVAL .)
    REPEAT          reduce using rule 62 (cte -> FLOATVAL .)
    GOSUB           reduce using rule 62 (cte -> FLOATVAL .)
    INPUT           reduce using rule 62 (cte -> FLOATVAL .)
    PRINT           reduce using rule 62 (cte -> FLOATVAL .)
    SUBPROCEDURE    reduce using rule 62 (cte -> FLOATVAL .)
    END             reduce using rule 62 (cte -> FLOATVAL .)
    RETURN          reduce using rule 62 (cte -> FLOATVAL .)
    UNTIL           reduce using rule 62 (cte -> FLOATVAL .)
    ELSE            reduce using rule 62 (cte -> FLOATVAL .)
    EIF             reduce using rule 62 (cte -> FLOATVAL .)
    WEND            reduce using rule 62 (cte -> FLOATVAL .)
    NEXT            reduce using rule 62 (cte -> FLOATVAL .)
    GREATHER        reduce using rule 62 (cte -> FLOATVAL .)
    GREATHEREQUAL   reduce using rule 62 (cte -> FLOATVAL .)
    SMALLER         reduce using rule 62 (cte -> FLOATVAL .)
    SMALLEREQUAL    reduce using rule 62 (cte -> FLOATVAL .)
    NOTEQUAL        reduce using rule 62 (cte -> FLOATVAL .)
    EQUALTO         reduce using rule 62 (cte -> FLOATVAL .)
    error           reduce using rule 62 (cte -> FLOATVAL .)
    CLOSINGPAR      reduce using rule 62 (cte -> FLOATVAL .)
    TO              reduce using rule 62 (cte -> FLOATVAL .)
    COMA            reduce using rule 62 (cte -> FLOATVAL .)
    CLOSINGBRACKET  reduce using rule 62 (cte -> FLOATVAL .)
    DO              reduce using rule 62 (cte -> FLOATVAL .)


state 46

    (63) cte -> INTVAL .

    MULTIPLY        reduce using rule 63 (cte -> INTVAL .)
    DIVIDE          reduce using rule 63 (cte -> INTVAL .)
    PLUS            reduce using rule 63 (cte -> INTVAL .)
    MINUS           reduce using rule 63 (cte -> INTVAL .)
    LET             reduce using rule 63 (cte -> INTVAL .)
    DIM             reduce using rule 63 (cte -> INTVAL .)
    IF              reduce using rule 63 (cte -> INTVAL .)
    FOR             reduce using rule 63 (cte -> INTVAL .)
    WHILE           reduce using rule 63 (cte -> INTVAL .)
    REPEAT          reduce using rule 63 (cte -> INTVAL .)
    GOSUB           reduce using rule 63 (cte -> INTVAL .)
    INPUT           reduce using rule 63 (cte -> INTVAL .)
    PRINT           reduce using rule 63 (cte -> INTVAL .)
    SUBPROCEDURE    reduce using rule 63 (cte -> INTVAL .)
    END             reduce using rule 63 (cte -> INTVAL .)
    RETURN          reduce using rule 63 (cte -> INTVAL .)
    UNTIL           reduce using rule 63 (cte -> INTVAL .)
    ELSE            reduce using rule 63 (cte -> INTVAL .)
    EIF             reduce using rule 63 (cte -> INTVAL .)
    WEND            reduce using rule 63 (cte -> INTVAL .)
    NEXT            reduce using rule 63 (cte -> INTVAL .)
    GREATHER        reduce using rule 63 (cte -> INTVAL .)
    GREATHEREQUAL   reduce using rule 63 (cte -> INTVAL .)
    SMALLER         reduce using rule 63 (cte -> INTVAL .)
    SMALLEREQUAL    reduce using rule 63 (cte -> INTVAL .)
    NOTEQUAL        reduce using rule 63 (cte -> INTVAL .)
    EQUALTO         reduce using rule 63 (cte -> INTVAL .)
    error           reduce using rule 63 (cte -> INTVAL .)
    CLOSINGPAR      reduce using rule 63 (cte -> INTVAL .)
    TO              reduce using rule 63 (cte -> INTVAL .)
    COMA            reduce using rule 63 (cte -> INTVAL .)
    CLOSINGBRACKET  reduce using rule 63 (cte -> INTVAL .)
    DO              reduce using rule 63 (cte -> INTVAL .)


state 47

    (3) V -> DIM setType Idv . AS T Arr

    AS              shift and go to state 74


state 48

    (42) Idv -> ID . COMA Idv
    (43) Idv -> ID .
    (44) Idv -> ID . Arr
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (80) empty -> .

  ! reduce/reduce conflict for AS resolved using rule 43 (Idv -> ID .)
  ! reduce/reduce conflict for EQUALS resolved using rule 43 (Idv -> ID .)
  ! reduce/reduce conflict for CLOSINGBRACKET resolved using rule 43 (Idv -> ID .)
    COMA            shift and go to state 75
    AS              reduce using rule 43 (Idv -> ID .)
    EQUALS          reduce using rule 43 (Idv -> ID .)
    CLOSINGBRACKET  reduce using rule 43 (Idv -> ID .)
    OPENBRACKET     shift and go to state 72

  ! AS              [ reduce using rule 80 (empty -> .) ]
  ! EQUALS          [ reduce using rule 80 (empty -> .) ]
  ! CLOSINGBRACKET  [ reduce using rule 80 (empty -> .) ]

    Arr                            shift and go to state 76
    empty                          shift and go to state 73

state 49

    (1) PROGRAMA -> PROGRAM V M endProgram S . END

    END             shift and go to state 77


state 50

    (12) S -> SUBPROCEDURE . ID fillSub TWOPOINTS M RETURN endProcedure S

    ID              shift and go to state 78


state 51

    (13) S -> empty .

    END             reduce using rule 13 (S -> empty .)


state 52

    (20) E -> LET setType Idv . EQUALS EA

    EQUALS          shift and go to state 79


state 53

    (21) E -> DIM setType Idv . AS T Arr

    AS              shift and go to state 80


state 54

    (22) E -> IF EL THEN . first_conditional F Esf EIF final_conditional
    (37) first_conditional -> .

    LET             reduce using rule 37 (first_conditional -> .)
    DIM             reduce using rule 37 (first_conditional -> .)
    IF              reduce using rule 37 (first_conditional -> .)
    FOR             reduce using rule 37 (first_conditional -> .)
    WHILE           reduce using rule 37 (first_conditional -> .)
    REPEAT          reduce using rule 37 (first_conditional -> .)
    GOSUB           reduce using rule 37 (first_conditional -> .)
    INPUT           reduce using rule 37 (first_conditional -> .)
    PRINT           reduce using rule 37 (first_conditional -> .)
    ELSE            reduce using rule 37 (first_conditional -> .)
    EIF             reduce using rule 37 (first_conditional -> .)

    first_conditional              shift and go to state 81

state 55

    (68) EL -> OPENPAR O . CLOSINGPAR
    (69) EL -> OPENPAR O . CLOSINGPAR OL EL

    CLOSINGPAR      shift and go to state 82


state 56

    (73) O -> EA . GREATHER EA
    (74) O -> EA . GREATHEREQUAL EA
    (75) O -> EA . SMALLER EA
    (76) O -> EA . SMALLEREQUAL EA
    (77) O -> EA . NOTEQUAL EA
    (78) O -> EA . EQUALTO EA
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P
    (48) Ex -> EA .

    GREATHER        shift and go to state 83
    GREATHEREQUAL   shift and go to state 84
    SMALLER         shift and go to state 85
    SMALLEREQUAL    shift and go to state 86
    NOTEQUAL        shift and go to state 87
    EQUALTO         shift and go to state 88
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    error           reduce using rule 48 (Ex -> EA .)


state 57

    (79) O -> Ex . error Ex

    error           shift and go to state 89


state 58

    (23) E -> FOR ID EQUALS . EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 90
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 59

    (24) E -> WHILE while_first_conditional EL . DO while_second_conditional F WEND while_final_conditional

    DO              shift and go to state 92


state 60

    (25) E -> REPEAT while_first_conditional F . UNTIL EL repeat_conditional

    UNTIL           shift and go to state 93


state 61

    (47) IDEx -> ID OPENBRACKET . setType Idv CLOSINGBRACKET
    (45) setType -> .

    ID              reduce using rule 45 (setType -> .)

    setType                        shift and go to state 94

state 62

    (51) EA -> EA PLUS . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    P                              shift and go to state 95
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 63

    (52) EA -> EA MINUS . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    P                              shift and go to state 96
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 64

    (54) P -> P MULTIPLY . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    N                              shift and go to state 97
    cte                            shift and go to state 43

state 65

    (55) P -> P DIVIDE . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    N                              shift and go to state 98
    cte                            shift and go to state 43

state 66

    (64) cte -> MINUS INTVAL .

    MULTIPLY        reduce using rule 64 (cte -> MINUS INTVAL .)
    DIVIDE          reduce using rule 64 (cte -> MINUS INTVAL .)
    PLUS            reduce using rule 64 (cte -> MINUS INTVAL .)
    MINUS           reduce using rule 64 (cte -> MINUS INTVAL .)
    LET             reduce using rule 64 (cte -> MINUS INTVAL .)
    DIM             reduce using rule 64 (cte -> MINUS INTVAL .)
    IF              reduce using rule 64 (cte -> MINUS INTVAL .)
    FOR             reduce using rule 64 (cte -> MINUS INTVAL .)
    WHILE           reduce using rule 64 (cte -> MINUS INTVAL .)
    REPEAT          reduce using rule 64 (cte -> MINUS INTVAL .)
    GOSUB           reduce using rule 64 (cte -> MINUS INTVAL .)
    INPUT           reduce using rule 64 (cte -> MINUS INTVAL .)
    PRINT           reduce using rule 64 (cte -> MINUS INTVAL .)
    SUBPROCEDURE    reduce using rule 64 (cte -> MINUS INTVAL .)
    END             reduce using rule 64 (cte -> MINUS INTVAL .)
    RETURN          reduce using rule 64 (cte -> MINUS INTVAL .)
    UNTIL           reduce using rule 64 (cte -> MINUS INTVAL .)
    ELSE            reduce using rule 64 (cte -> MINUS INTVAL .)
    EIF             reduce using rule 64 (cte -> MINUS INTVAL .)
    WEND            reduce using rule 64 (cte -> MINUS INTVAL .)
    NEXT            reduce using rule 64 (cte -> MINUS INTVAL .)
    GREATHER        reduce using rule 64 (cte -> MINUS INTVAL .)
    GREATHEREQUAL   reduce using rule 64 (cte -> MINUS INTVAL .)
    SMALLER         reduce using rule 64 (cte -> MINUS INTVAL .)
    SMALLEREQUAL    reduce using rule 64 (cte -> MINUS INTVAL .)
    NOTEQUAL        reduce using rule 64 (cte -> MINUS INTVAL .)
    EQUALTO         reduce using rule 64 (cte -> MINUS INTVAL .)
    error           reduce using rule 64 (cte -> MINUS INTVAL .)
    CLOSINGPAR      reduce using rule 64 (cte -> MINUS INTVAL .)
    TO              reduce using rule 64 (cte -> MINUS INTVAL .)
    COMA            reduce using rule 64 (cte -> MINUS INTVAL .)
    CLOSINGBRACKET  reduce using rule 64 (cte -> MINUS INTVAL .)
    DO              reduce using rule 64 (cte -> MINUS INTVAL .)


state 67

    (65) cte -> MINUS FLOATVAL .

    MULTIPLY        reduce using rule 65 (cte -> MINUS FLOATVAL .)
    DIVIDE          reduce using rule 65 (cte -> MINUS FLOATVAL .)
    PLUS            reduce using rule 65 (cte -> MINUS FLOATVAL .)
    MINUS           reduce using rule 65 (cte -> MINUS FLOATVAL .)
    LET             reduce using rule 65 (cte -> MINUS FLOATVAL .)
    DIM             reduce using rule 65 (cte -> MINUS FLOATVAL .)
    IF              reduce using rule 65 (cte -> MINUS FLOATVAL .)
    FOR             reduce using rule 65 (cte -> MINUS FLOATVAL .)
    WHILE           reduce using rule 65 (cte -> MINUS FLOATVAL .)
    REPEAT          reduce using rule 65 (cte -> MINUS FLOATVAL .)
    GOSUB           reduce using rule 65 (cte -> MINUS FLOATVAL .)
    INPUT           reduce using rule 65 (cte -> MINUS FLOATVAL .)
    PRINT           reduce using rule 65 (cte -> MINUS FLOATVAL .)
    SUBPROCEDURE    reduce using rule 65 (cte -> MINUS FLOATVAL .)
    END             reduce using rule 65 (cte -> MINUS FLOATVAL .)
    RETURN          reduce using rule 65 (cte -> MINUS FLOATVAL .)
    UNTIL           reduce using rule 65 (cte -> MINUS FLOATVAL .)
    ELSE            reduce using rule 65 (cte -> MINUS FLOATVAL .)
    EIF             reduce using rule 65 (cte -> MINUS FLOATVAL .)
    WEND            reduce using rule 65 (cte -> MINUS FLOATVAL .)
    NEXT            reduce using rule 65 (cte -> MINUS FLOATVAL .)
    GREATHER        reduce using rule 65 (cte -> MINUS FLOATVAL .)
    GREATHEREQUAL   reduce using rule 65 (cte -> MINUS FLOATVAL .)
    SMALLER         reduce using rule 65 (cte -> MINUS FLOATVAL .)
    SMALLEREQUAL    reduce using rule 65 (cte -> MINUS FLOATVAL .)
    NOTEQUAL        reduce using rule 65 (cte -> MINUS FLOATVAL .)
    EQUALTO         reduce using rule 65 (cte -> MINUS FLOATVAL .)
    error           reduce using rule 65 (cte -> MINUS FLOATVAL .)
    CLOSINGPAR      reduce using rule 65 (cte -> MINUS FLOATVAL .)
    TO              reduce using rule 65 (cte -> MINUS FLOATVAL .)
    COMA            reduce using rule 65 (cte -> MINUS FLOATVAL .)
    CLOSINGBRACKET  reduce using rule 65 (cte -> MINUS FLOATVAL .)
    DO              reduce using rule 65 (cte -> MINUS FLOATVAL .)


state 68

    (59) N -> OPENPAR EA . CLOSINGPAR
    (73) O -> EA . GREATHER EA
    (74) O -> EA . GREATHEREQUAL EA
    (75) O -> EA . SMALLER EA
    (76) O -> EA . SMALLEREQUAL EA
    (77) O -> EA . NOTEQUAL EA
    (78) O -> EA . EQUALTO EA
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P
    (48) Ex -> EA .

    CLOSINGPAR      shift and go to state 99
    GREATHER        shift and go to state 83
    GREATHEREQUAL   shift and go to state 84
    SMALLER         shift and go to state 85
    SMALLEREQUAL    shift and go to state 86
    NOTEQUAL        shift and go to state 87
    EQUALTO         shift and go to state 88
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    error           reduce using rule 48 (Ex -> EA .)


state 69

    (57) N -> cte saveID .

    MULTIPLY        reduce using rule 57 (N -> cte saveID .)
    DIVIDE          reduce using rule 57 (N -> cte saveID .)
    PLUS            reduce using rule 57 (N -> cte saveID .)
    MINUS           reduce using rule 57 (N -> cte saveID .)
    LET             reduce using rule 57 (N -> cte saveID .)
    DIM             reduce using rule 57 (N -> cte saveID .)
    IF              reduce using rule 57 (N -> cte saveID .)
    FOR             reduce using rule 57 (N -> cte saveID .)
    WHILE           reduce using rule 57 (N -> cte saveID .)
    REPEAT          reduce using rule 57 (N -> cte saveID .)
    GOSUB           reduce using rule 57 (N -> cte saveID .)
    INPUT           reduce using rule 57 (N -> cte saveID .)
    PRINT           reduce using rule 57 (N -> cte saveID .)
    SUBPROCEDURE    reduce using rule 57 (N -> cte saveID .)
    END             reduce using rule 57 (N -> cte saveID .)
    RETURN          reduce using rule 57 (N -> cte saveID .)
    UNTIL           reduce using rule 57 (N -> cte saveID .)
    ELSE            reduce using rule 57 (N -> cte saveID .)
    EIF             reduce using rule 57 (N -> cte saveID .)
    WEND            reduce using rule 57 (N -> cte saveID .)
    NEXT            reduce using rule 57 (N -> cte saveID .)
    GREATHER        reduce using rule 57 (N -> cte saveID .)
    GREATHEREQUAL   reduce using rule 57 (N -> cte saveID .)
    SMALLER         reduce using rule 57 (N -> cte saveID .)
    SMALLEREQUAL    reduce using rule 57 (N -> cte saveID .)
    NOTEQUAL        reduce using rule 57 (N -> cte saveID .)
    EQUALTO         reduce using rule 57 (N -> cte saveID .)
    error           reduce using rule 57 (N -> cte saveID .)
    CLOSINGPAR      reduce using rule 57 (N -> cte saveID .)
    TO              reduce using rule 57 (N -> cte saveID .)
    COMA            reduce using rule 57 (N -> cte saveID .)
    CLOSINGBRACKET  reduce using rule 57 (N -> cte saveID .)
    DO              reduce using rule 57 (N -> cte saveID .)


state 70

    (58) N -> ID saveID .

    MULTIPLY        reduce using rule 58 (N -> ID saveID .)
    DIVIDE          reduce using rule 58 (N -> ID saveID .)
    PLUS            reduce using rule 58 (N -> ID saveID .)
    MINUS           reduce using rule 58 (N -> ID saveID .)
    LET             reduce using rule 58 (N -> ID saveID .)
    DIM             reduce using rule 58 (N -> ID saveID .)
    IF              reduce using rule 58 (N -> ID saveID .)
    FOR             reduce using rule 58 (N -> ID saveID .)
    WHILE           reduce using rule 58 (N -> ID saveID .)
    REPEAT          reduce using rule 58 (N -> ID saveID .)
    GOSUB           reduce using rule 58 (N -> ID saveID .)
    INPUT           reduce using rule 58 (N -> ID saveID .)
    PRINT           reduce using rule 58 (N -> ID saveID .)
    SUBPROCEDURE    reduce using rule 58 (N -> ID saveID .)
    END             reduce using rule 58 (N -> ID saveID .)
    RETURN          reduce using rule 58 (N -> ID saveID .)
    UNTIL           reduce using rule 58 (N -> ID saveID .)
    ELSE            reduce using rule 58 (N -> ID saveID .)
    EIF             reduce using rule 58 (N -> ID saveID .)
    WEND            reduce using rule 58 (N -> ID saveID .)
    NEXT            reduce using rule 58 (N -> ID saveID .)
    GREATHER        reduce using rule 58 (N -> ID saveID .)
    GREATHEREQUAL   reduce using rule 58 (N -> ID saveID .)
    SMALLER         reduce using rule 58 (N -> ID saveID .)
    SMALLEREQUAL    reduce using rule 58 (N -> ID saveID .)
    NOTEQUAL        reduce using rule 58 (N -> ID saveID .)
    EQUALTO         reduce using rule 58 (N -> ID saveID .)
    error           reduce using rule 58 (N -> ID saveID .)
    CLOSINGPAR      reduce using rule 58 (N -> ID saveID .)
    TO              reduce using rule 58 (N -> ID saveID .)
    COMA            reduce using rule 58 (N -> ID saveID .)
    CLOSINGBRACKET  reduce using rule 58 (N -> ID saveID .)
    DO              reduce using rule 58 (N -> ID saveID .)


state 71

    (60) N -> ID Arr .

    MULTIPLY        reduce using rule 60 (N -> ID Arr .)
    DIVIDE          reduce using rule 60 (N -> ID Arr .)
    PLUS            reduce using rule 60 (N -> ID Arr .)
    MINUS           reduce using rule 60 (N -> ID Arr .)
    LET             reduce using rule 60 (N -> ID Arr .)
    DIM             reduce using rule 60 (N -> ID Arr .)
    IF              reduce using rule 60 (N -> ID Arr .)
    FOR             reduce using rule 60 (N -> ID Arr .)
    WHILE           reduce using rule 60 (N -> ID Arr .)
    REPEAT          reduce using rule 60 (N -> ID Arr .)
    GOSUB           reduce using rule 60 (N -> ID Arr .)
    INPUT           reduce using rule 60 (N -> ID Arr .)
    PRINT           reduce using rule 60 (N -> ID Arr .)
    SUBPROCEDURE    reduce using rule 60 (N -> ID Arr .)
    END             reduce using rule 60 (N -> ID Arr .)
    RETURN          reduce using rule 60 (N -> ID Arr .)
    UNTIL           reduce using rule 60 (N -> ID Arr .)
    ELSE            reduce using rule 60 (N -> ID Arr .)
    EIF             reduce using rule 60 (N -> ID Arr .)
    WEND            reduce using rule 60 (N -> ID Arr .)
    NEXT            reduce using rule 60 (N -> ID Arr .)
    GREATHER        reduce using rule 60 (N -> ID Arr .)
    GREATHEREQUAL   reduce using rule 60 (N -> ID Arr .)
    SMALLER         reduce using rule 60 (N -> ID Arr .)
    SMALLEREQUAL    reduce using rule 60 (N -> ID Arr .)
    NOTEQUAL        reduce using rule 60 (N -> ID Arr .)
    EQUALTO         reduce using rule 60 (N -> ID Arr .)
    error           reduce using rule 60 (N -> ID Arr .)
    CLOSINGPAR      reduce using rule 60 (N -> ID Arr .)
    TO              reduce using rule 60 (N -> ID Arr .)
    COMA            reduce using rule 60 (N -> ID Arr .)
    CLOSINGBRACKET  reduce using rule 60 (N -> ID Arr .)
    DO              reduce using rule 60 (N -> ID Arr .)


state 72

    (5) Arr -> OPENBRACKET . arr_space CLOSINGBRACKET
    (7) arr_space -> . EA COMA arr_space
    (8) arr_space -> . EA
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    arr_space                      shift and go to state 100
    EA                             shift and go to state 101
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 73

    (6) Arr -> empty .

    MULTIPLY        reduce using rule 6 (Arr -> empty .)
    DIVIDE          reduce using rule 6 (Arr -> empty .)
    PLUS            reduce using rule 6 (Arr -> empty .)
    MINUS           reduce using rule 6 (Arr -> empty .)
    LET             reduce using rule 6 (Arr -> empty .)
    DIM             reduce using rule 6 (Arr -> empty .)
    IF              reduce using rule 6 (Arr -> empty .)
    FOR             reduce using rule 6 (Arr -> empty .)
    WHILE           reduce using rule 6 (Arr -> empty .)
    REPEAT          reduce using rule 6 (Arr -> empty .)
    GOSUB           reduce using rule 6 (Arr -> empty .)
    INPUT           reduce using rule 6 (Arr -> empty .)
    PRINT           reduce using rule 6 (Arr -> empty .)
    SUBPROCEDURE    reduce using rule 6 (Arr -> empty .)
    END             reduce using rule 6 (Arr -> empty .)
    RETURN          reduce using rule 6 (Arr -> empty .)
    UNTIL           reduce using rule 6 (Arr -> empty .)
    ELSE            reduce using rule 6 (Arr -> empty .)
    EIF             reduce using rule 6 (Arr -> empty .)
    WEND            reduce using rule 6 (Arr -> empty .)
    NEXT            reduce using rule 6 (Arr -> empty .)
    GREATHER        reduce using rule 6 (Arr -> empty .)
    GREATHEREQUAL   reduce using rule 6 (Arr -> empty .)
    SMALLER         reduce using rule 6 (Arr -> empty .)
    SMALLEREQUAL    reduce using rule 6 (Arr -> empty .)
    NOTEQUAL        reduce using rule 6 (Arr -> empty .)
    EQUALTO         reduce using rule 6 (Arr -> empty .)
    error           reduce using rule 6 (Arr -> empty .)
    CLOSINGPAR      reduce using rule 6 (Arr -> empty .)
    TO              reduce using rule 6 (Arr -> empty .)
    COMA            reduce using rule 6 (Arr -> empty .)
    CLOSINGBRACKET  reduce using rule 6 (Arr -> empty .)
    DO              reduce using rule 6 (Arr -> empty .)
    AS              reduce using rule 6 (Arr -> empty .)
    EQUALS          reduce using rule 6 (Arr -> empty .)


state 74

    (3) V -> DIM setType Idv AS . T Arr
    (9) T -> . INT
    (10) T -> . FLOAT
    (11) T -> . WORD

    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    WORD            shift and go to state 105

    T                              shift and go to state 102

state 75

    (42) Idv -> ID COMA . Idv
    (42) Idv -> . ID COMA Idv
    (43) Idv -> . ID
    (44) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 106

state 76

    (44) Idv -> ID Arr .

    AS              reduce using rule 44 (Idv -> ID Arr .)
    EQUALS          reduce using rule 44 (Idv -> ID Arr .)
    CLOSINGBRACKET  reduce using rule 44 (Idv -> ID Arr .)


state 77

    (1) PROGRAMA -> PROGRAM V M endProgram S END .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM V M endProgram S END .)


state 78

    (12) S -> SUBPROCEDURE ID . fillSub TWOPOINTS M RETURN endProcedure S
    (14) fillSub -> .

    TWOPOINTS       reduce using rule 14 (fillSub -> .)

    fillSub                        shift and go to state 107

state 79

    (20) E -> LET setType Idv EQUALS . EA
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 108
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 80

    (21) E -> DIM setType Idv AS . T Arr
    (9) T -> . INT
    (10) T -> . FLOAT
    (11) T -> . WORD

    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    WORD            shift and go to state 105

    T                              shift and go to state 109

state 81

    (22) E -> IF EL THEN first_conditional . F Esf EIF final_conditional
    (18) F -> . E F
    (19) F -> . empty
    (20) E -> . LET setType Idv EQUALS EA
    (21) E -> . DIM setType Idv AS T Arr
    (22) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (23) E -> . FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (24) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (25) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (26) E -> . GOSUB ID
    (27) E -> . INPUT IDEx
    (28) E -> . PRINT Ex
    (80) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    ELSE            reduce using rule 80 (empty -> .)
    EIF             reduce using rule 80 (empty -> .)

    F                              shift and go to state 110
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 82

    (68) EL -> OPENPAR O CLOSINGPAR .
    (69) EL -> OPENPAR O CLOSINGPAR . OL EL
    (70) OL -> . AND
    (71) OL -> . OR
    (72) OL -> . NOT

    THEN            reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    LET             reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    DIM             reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    IF              reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    FOR             reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    WHILE           reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    REPEAT          reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    GOSUB           reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    INPUT           reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    PRINT           reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    SUBPROCEDURE    reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    END             reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    RETURN          reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    UNTIL           reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    ELSE            reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    EIF             reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    WEND            reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    NEXT            reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    error           reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    DO              reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    CLOSINGPAR      reduce using rule 68 (EL -> OPENPAR O CLOSINGPAR .)
    AND             shift and go to state 112
    OR              shift and go to state 113
    NOT             shift and go to state 114

    OL                             shift and go to state 111

state 83

    (73) O -> EA GREATHER . EA
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 115
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 84

    (74) O -> EA GREATHEREQUAL . EA
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 116
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 85

    (75) O -> EA SMALLER . EA
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 117
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 86

    (76) O -> EA SMALLEREQUAL . EA
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 118
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 87

    (77) O -> EA NOTEQUAL . EA
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 119
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 88

    (78) O -> EA EQUALTO . EA
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 120
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 89

    (79) O -> Ex error . Ex
    (48) Ex -> . EA
    (49) Ex -> . EL
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (66) EL -> . TRUE
    (67) EL -> . FALSE
    (68) EL -> . OPENPAR O CLOSINGPAR
    (69) EL -> . OPENPAR O CLOSINGPAR OL EL
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    ID              shift and go to state 44
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    Ex                             shift and go to state 121
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 90

    (23) E -> FOR ID EQUALS EA . for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P
    (29) for_assignation -> .

    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TO              reduce using rule 29 (for_assignation -> .)

    for_assignation                shift and go to state 122

state 91

    (59) N -> OPENPAR . EA CLOSINGPAR
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 123
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 92

    (24) E -> WHILE while_first_conditional EL DO . while_second_conditional F WEND while_final_conditional
    (35) while_second_conditional -> .

    LET             reduce using rule 35 (while_second_conditional -> .)
    DIM             reduce using rule 35 (while_second_conditional -> .)
    IF              reduce using rule 35 (while_second_conditional -> .)
    FOR             reduce using rule 35 (while_second_conditional -> .)
    WHILE           reduce using rule 35 (while_second_conditional -> .)
    REPEAT          reduce using rule 35 (while_second_conditional -> .)
    GOSUB           reduce using rule 35 (while_second_conditional -> .)
    INPUT           reduce using rule 35 (while_second_conditional -> .)
    PRINT           reduce using rule 35 (while_second_conditional -> .)
    WEND            reduce using rule 35 (while_second_conditional -> .)

    while_second_conditional       shift and go to state 124

state 93

    (25) E -> REPEAT while_first_conditional F UNTIL . EL repeat_conditional
    (66) EL -> . TRUE
    (67) EL -> . FALSE
    (68) EL -> . OPENPAR O CLOSINGPAR
    (69) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 125

state 94

    (47) IDEx -> ID OPENBRACKET setType . Idv CLOSINGBRACKET
    (42) Idv -> . ID COMA Idv
    (43) Idv -> . ID
    (44) Idv -> . ID Arr

    ID              shift and go to state 48

    Idv                            shift and go to state 126

state 95

    (51) EA -> EA PLUS P .
    (54) P -> P . MULTIPLY N
    (55) P -> P . DIVIDE N

    PLUS            reduce using rule 51 (EA -> EA PLUS P .)
    MINUS           reduce using rule 51 (EA -> EA PLUS P .)
    LET             reduce using rule 51 (EA -> EA PLUS P .)
    DIM             reduce using rule 51 (EA -> EA PLUS P .)
    IF              reduce using rule 51 (EA -> EA PLUS P .)
    FOR             reduce using rule 51 (EA -> EA PLUS P .)
    WHILE           reduce using rule 51 (EA -> EA PLUS P .)
    REPEAT          reduce using rule 51 (EA -> EA PLUS P .)
    GOSUB           reduce using rule 51 (EA -> EA PLUS P .)
    INPUT           reduce using rule 51 (EA -> EA PLUS P .)
    PRINT           reduce using rule 51 (EA -> EA PLUS P .)
    SUBPROCEDURE    reduce using rule 51 (EA -> EA PLUS P .)
    END             reduce using rule 51 (EA -> EA PLUS P .)
    RETURN          reduce using rule 51 (EA -> EA PLUS P .)
    UNTIL           reduce using rule 51 (EA -> EA PLUS P .)
    ELSE            reduce using rule 51 (EA -> EA PLUS P .)
    EIF             reduce using rule 51 (EA -> EA PLUS P .)
    WEND            reduce using rule 51 (EA -> EA PLUS P .)
    NEXT            reduce using rule 51 (EA -> EA PLUS P .)
    GREATHER        reduce using rule 51 (EA -> EA PLUS P .)
    GREATHEREQUAL   reduce using rule 51 (EA -> EA PLUS P .)
    SMALLER         reduce using rule 51 (EA -> EA PLUS P .)
    SMALLEREQUAL    reduce using rule 51 (EA -> EA PLUS P .)
    NOTEQUAL        reduce using rule 51 (EA -> EA PLUS P .)
    EQUALTO         reduce using rule 51 (EA -> EA PLUS P .)
    error           reduce using rule 51 (EA -> EA PLUS P .)
    CLOSINGPAR      reduce using rule 51 (EA -> EA PLUS P .)
    TO              reduce using rule 51 (EA -> EA PLUS P .)
    COMA            reduce using rule 51 (EA -> EA PLUS P .)
    CLOSINGBRACKET  reduce using rule 51 (EA -> EA PLUS P .)
    DO              reduce using rule 51 (EA -> EA PLUS P .)
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65


state 96

    (52) EA -> EA MINUS P .
    (54) P -> P . MULTIPLY N
    (55) P -> P . DIVIDE N

    PLUS            reduce using rule 52 (EA -> EA MINUS P .)
    MINUS           reduce using rule 52 (EA -> EA MINUS P .)
    LET             reduce using rule 52 (EA -> EA MINUS P .)
    DIM             reduce using rule 52 (EA -> EA MINUS P .)
    IF              reduce using rule 52 (EA -> EA MINUS P .)
    FOR             reduce using rule 52 (EA -> EA MINUS P .)
    WHILE           reduce using rule 52 (EA -> EA MINUS P .)
    REPEAT          reduce using rule 52 (EA -> EA MINUS P .)
    GOSUB           reduce using rule 52 (EA -> EA MINUS P .)
    INPUT           reduce using rule 52 (EA -> EA MINUS P .)
    PRINT           reduce using rule 52 (EA -> EA MINUS P .)
    SUBPROCEDURE    reduce using rule 52 (EA -> EA MINUS P .)
    END             reduce using rule 52 (EA -> EA MINUS P .)
    RETURN          reduce using rule 52 (EA -> EA MINUS P .)
    UNTIL           reduce using rule 52 (EA -> EA MINUS P .)
    ELSE            reduce using rule 52 (EA -> EA MINUS P .)
    EIF             reduce using rule 52 (EA -> EA MINUS P .)
    WEND            reduce using rule 52 (EA -> EA MINUS P .)
    NEXT            reduce using rule 52 (EA -> EA MINUS P .)
    GREATHER        reduce using rule 52 (EA -> EA MINUS P .)
    GREATHEREQUAL   reduce using rule 52 (EA -> EA MINUS P .)
    SMALLER         reduce using rule 52 (EA -> EA MINUS P .)
    SMALLEREQUAL    reduce using rule 52 (EA -> EA MINUS P .)
    NOTEQUAL        reduce using rule 52 (EA -> EA MINUS P .)
    EQUALTO         reduce using rule 52 (EA -> EA MINUS P .)
    error           reduce using rule 52 (EA -> EA MINUS P .)
    CLOSINGPAR      reduce using rule 52 (EA -> EA MINUS P .)
    TO              reduce using rule 52 (EA -> EA MINUS P .)
    COMA            reduce using rule 52 (EA -> EA MINUS P .)
    CLOSINGBRACKET  reduce using rule 52 (EA -> EA MINUS P .)
    DO              reduce using rule 52 (EA -> EA MINUS P .)
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65


state 97

    (54) P -> P MULTIPLY N .

    MULTIPLY        reduce using rule 54 (P -> P MULTIPLY N .)
    DIVIDE          reduce using rule 54 (P -> P MULTIPLY N .)
    PLUS            reduce using rule 54 (P -> P MULTIPLY N .)
    MINUS           reduce using rule 54 (P -> P MULTIPLY N .)
    LET             reduce using rule 54 (P -> P MULTIPLY N .)
    DIM             reduce using rule 54 (P -> P MULTIPLY N .)
    IF              reduce using rule 54 (P -> P MULTIPLY N .)
    FOR             reduce using rule 54 (P -> P MULTIPLY N .)
    WHILE           reduce using rule 54 (P -> P MULTIPLY N .)
    REPEAT          reduce using rule 54 (P -> P MULTIPLY N .)
    GOSUB           reduce using rule 54 (P -> P MULTIPLY N .)
    INPUT           reduce using rule 54 (P -> P MULTIPLY N .)
    PRINT           reduce using rule 54 (P -> P MULTIPLY N .)
    SUBPROCEDURE    reduce using rule 54 (P -> P MULTIPLY N .)
    END             reduce using rule 54 (P -> P MULTIPLY N .)
    RETURN          reduce using rule 54 (P -> P MULTIPLY N .)
    UNTIL           reduce using rule 54 (P -> P MULTIPLY N .)
    ELSE            reduce using rule 54 (P -> P MULTIPLY N .)
    EIF             reduce using rule 54 (P -> P MULTIPLY N .)
    WEND            reduce using rule 54 (P -> P MULTIPLY N .)
    NEXT            reduce using rule 54 (P -> P MULTIPLY N .)
    GREATHER        reduce using rule 54 (P -> P MULTIPLY N .)
    GREATHEREQUAL   reduce using rule 54 (P -> P MULTIPLY N .)
    SMALLER         reduce using rule 54 (P -> P MULTIPLY N .)
    SMALLEREQUAL    reduce using rule 54 (P -> P MULTIPLY N .)
    NOTEQUAL        reduce using rule 54 (P -> P MULTIPLY N .)
    EQUALTO         reduce using rule 54 (P -> P MULTIPLY N .)
    error           reduce using rule 54 (P -> P MULTIPLY N .)
    CLOSINGPAR      reduce using rule 54 (P -> P MULTIPLY N .)
    TO              reduce using rule 54 (P -> P MULTIPLY N .)
    COMA            reduce using rule 54 (P -> P MULTIPLY N .)
    CLOSINGBRACKET  reduce using rule 54 (P -> P MULTIPLY N .)
    DO              reduce using rule 54 (P -> P MULTIPLY N .)


state 98

    (55) P -> P DIVIDE N .

    MULTIPLY        reduce using rule 55 (P -> P DIVIDE N .)
    DIVIDE          reduce using rule 55 (P -> P DIVIDE N .)
    PLUS            reduce using rule 55 (P -> P DIVIDE N .)
    MINUS           reduce using rule 55 (P -> P DIVIDE N .)
    LET             reduce using rule 55 (P -> P DIVIDE N .)
    DIM             reduce using rule 55 (P -> P DIVIDE N .)
    IF              reduce using rule 55 (P -> P DIVIDE N .)
    FOR             reduce using rule 55 (P -> P DIVIDE N .)
    WHILE           reduce using rule 55 (P -> P DIVIDE N .)
    REPEAT          reduce using rule 55 (P -> P DIVIDE N .)
    GOSUB           reduce using rule 55 (P -> P DIVIDE N .)
    INPUT           reduce using rule 55 (P -> P DIVIDE N .)
    PRINT           reduce using rule 55 (P -> P DIVIDE N .)
    SUBPROCEDURE    reduce using rule 55 (P -> P DIVIDE N .)
    END             reduce using rule 55 (P -> P DIVIDE N .)
    RETURN          reduce using rule 55 (P -> P DIVIDE N .)
    UNTIL           reduce using rule 55 (P -> P DIVIDE N .)
    ELSE            reduce using rule 55 (P -> P DIVIDE N .)
    EIF             reduce using rule 55 (P -> P DIVIDE N .)
    WEND            reduce using rule 55 (P -> P DIVIDE N .)
    NEXT            reduce using rule 55 (P -> P DIVIDE N .)
    GREATHER        reduce using rule 55 (P -> P DIVIDE N .)
    GREATHEREQUAL   reduce using rule 55 (P -> P DIVIDE N .)
    SMALLER         reduce using rule 55 (P -> P DIVIDE N .)
    SMALLEREQUAL    reduce using rule 55 (P -> P DIVIDE N .)
    NOTEQUAL        reduce using rule 55 (P -> P DIVIDE N .)
    EQUALTO         reduce using rule 55 (P -> P DIVIDE N .)
    error           reduce using rule 55 (P -> P DIVIDE N .)
    CLOSINGPAR      reduce using rule 55 (P -> P DIVIDE N .)
    TO              reduce using rule 55 (P -> P DIVIDE N .)
    COMA            reduce using rule 55 (P -> P DIVIDE N .)
    CLOSINGBRACKET  reduce using rule 55 (P -> P DIVIDE N .)
    DO              reduce using rule 55 (P -> P DIVIDE N .)


state 99

    (59) N -> OPENPAR EA CLOSINGPAR .

    MULTIPLY        reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    DIVIDE          reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    PLUS            reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    MINUS           reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    LET             reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    DIM             reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    IF              reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    FOR             reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    WHILE           reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    REPEAT          reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    GOSUB           reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    INPUT           reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    PRINT           reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    SUBPROCEDURE    reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    END             reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    RETURN          reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    UNTIL           reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    ELSE            reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    EIF             reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    WEND            reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    NEXT            reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    GREATHER        reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    GREATHEREQUAL   reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    SMALLER         reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    SMALLEREQUAL    reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    NOTEQUAL        reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    EQUALTO         reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    error           reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    CLOSINGPAR      reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    TO              reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    COMA            reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    CLOSINGBRACKET  reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)
    DO              reduce using rule 59 (N -> OPENPAR EA CLOSINGPAR .)


state 100

    (5) Arr -> OPENBRACKET arr_space . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 127


state 101

    (7) arr_space -> EA . COMA arr_space
    (8) arr_space -> EA .
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    COMA            shift and go to state 128
    CLOSINGBRACKET  reduce using rule 8 (arr_space -> EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 102

    (3) V -> DIM setType Idv AS T . Arr
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (80) empty -> .

    OPENBRACKET     shift and go to state 72
    LET             reduce using rule 80 (empty -> .)
    DIM             reduce using rule 80 (empty -> .)
    IF              reduce using rule 80 (empty -> .)
    FOR             reduce using rule 80 (empty -> .)
    WHILE           reduce using rule 80 (empty -> .)
    REPEAT          reduce using rule 80 (empty -> .)
    GOSUB           reduce using rule 80 (empty -> .)
    INPUT           reduce using rule 80 (empty -> .)
    PRINT           reduce using rule 80 (empty -> .)
    SUBPROCEDURE    reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)

    Arr                            shift and go to state 129
    empty                          shift and go to state 73

state 103

    (9) T -> INT .

    OPENBRACKET     reduce using rule 9 (T -> INT .)
    LET             reduce using rule 9 (T -> INT .)
    DIM             reduce using rule 9 (T -> INT .)
    IF              reduce using rule 9 (T -> INT .)
    FOR             reduce using rule 9 (T -> INT .)
    WHILE           reduce using rule 9 (T -> INT .)
    REPEAT          reduce using rule 9 (T -> INT .)
    GOSUB           reduce using rule 9 (T -> INT .)
    INPUT           reduce using rule 9 (T -> INT .)
    PRINT           reduce using rule 9 (T -> INT .)
    SUBPROCEDURE    reduce using rule 9 (T -> INT .)
    END             reduce using rule 9 (T -> INT .)
    RETURN          reduce using rule 9 (T -> INT .)
    UNTIL           reduce using rule 9 (T -> INT .)
    ELSE            reduce using rule 9 (T -> INT .)
    EIF             reduce using rule 9 (T -> INT .)
    WEND            reduce using rule 9 (T -> INT .)
    NEXT            reduce using rule 9 (T -> INT .)


state 104

    (10) T -> FLOAT .

    OPENBRACKET     reduce using rule 10 (T -> FLOAT .)
    LET             reduce using rule 10 (T -> FLOAT .)
    DIM             reduce using rule 10 (T -> FLOAT .)
    IF              reduce using rule 10 (T -> FLOAT .)
    FOR             reduce using rule 10 (T -> FLOAT .)
    WHILE           reduce using rule 10 (T -> FLOAT .)
    REPEAT          reduce using rule 10 (T -> FLOAT .)
    GOSUB           reduce using rule 10 (T -> FLOAT .)
    INPUT           reduce using rule 10 (T -> FLOAT .)
    PRINT           reduce using rule 10 (T -> FLOAT .)
    SUBPROCEDURE    reduce using rule 10 (T -> FLOAT .)
    END             reduce using rule 10 (T -> FLOAT .)
    RETURN          reduce using rule 10 (T -> FLOAT .)
    UNTIL           reduce using rule 10 (T -> FLOAT .)
    ELSE            reduce using rule 10 (T -> FLOAT .)
    EIF             reduce using rule 10 (T -> FLOAT .)
    WEND            reduce using rule 10 (T -> FLOAT .)
    NEXT            reduce using rule 10 (T -> FLOAT .)


state 105

    (11) T -> WORD .

    OPENBRACKET     reduce using rule 11 (T -> WORD .)
    LET             reduce using rule 11 (T -> WORD .)
    DIM             reduce using rule 11 (T -> WORD .)
    IF              reduce using rule 11 (T -> WORD .)
    FOR             reduce using rule 11 (T -> WORD .)
    WHILE           reduce using rule 11 (T -> WORD .)
    REPEAT          reduce using rule 11 (T -> WORD .)
    GOSUB           reduce using rule 11 (T -> WORD .)
    INPUT           reduce using rule 11 (T -> WORD .)
    PRINT           reduce using rule 11 (T -> WORD .)
    SUBPROCEDURE    reduce using rule 11 (T -> WORD .)
    END             reduce using rule 11 (T -> WORD .)
    RETURN          reduce using rule 11 (T -> WORD .)
    UNTIL           reduce using rule 11 (T -> WORD .)
    ELSE            reduce using rule 11 (T -> WORD .)
    EIF             reduce using rule 11 (T -> WORD .)
    WEND            reduce using rule 11 (T -> WORD .)
    NEXT            reduce using rule 11 (T -> WORD .)


state 106

    (42) Idv -> ID COMA Idv .

    AS              reduce using rule 42 (Idv -> ID COMA Idv .)
    EQUALS          reduce using rule 42 (Idv -> ID COMA Idv .)
    CLOSINGBRACKET  reduce using rule 42 (Idv -> ID COMA Idv .)


state 107

    (12) S -> SUBPROCEDURE ID fillSub . TWOPOINTS M RETURN endProcedure S

    TWOPOINTS       shift and go to state 130


state 108

    (20) E -> LET setType Idv EQUALS EA .
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    LET             reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    DIM             reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    IF              reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    FOR             reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    WHILE           reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    REPEAT          reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    GOSUB           reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    INPUT           reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    PRINT           reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    SUBPROCEDURE    reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    END             reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    RETURN          reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    UNTIL           reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    ELSE            reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    EIF             reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    WEND            reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    NEXT            reduce using rule 20 (E -> LET setType Idv EQUALS EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 109

    (21) E -> DIM setType Idv AS T . Arr
    (5) Arr -> . OPENBRACKET arr_space CLOSINGBRACKET
    (6) Arr -> . empty
    (80) empty -> .

    OPENBRACKET     shift and go to state 72
    LET             reduce using rule 80 (empty -> .)
    DIM             reduce using rule 80 (empty -> .)
    IF              reduce using rule 80 (empty -> .)
    FOR             reduce using rule 80 (empty -> .)
    WHILE           reduce using rule 80 (empty -> .)
    REPEAT          reduce using rule 80 (empty -> .)
    GOSUB           reduce using rule 80 (empty -> .)
    INPUT           reduce using rule 80 (empty -> .)
    PRINT           reduce using rule 80 (empty -> .)
    SUBPROCEDURE    reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    RETURN          reduce using rule 80 (empty -> .)
    UNTIL           reduce using rule 80 (empty -> .)
    ELSE            reduce using rule 80 (empty -> .)
    EIF             reduce using rule 80 (empty -> .)
    WEND            reduce using rule 80 (empty -> .)
    NEXT            reduce using rule 80 (empty -> .)

    Arr                            shift and go to state 131
    empty                          shift and go to state 73

state 110

    (22) E -> IF EL THEN first_conditional F . Esf EIF final_conditional
    (40) Esf -> . ELSE second_conditional F
    (41) Esf -> . empty
    (80) empty -> .

    ELSE            shift and go to state 133
    EIF             reduce using rule 80 (empty -> .)

    Esf                            shift and go to state 132
    empty                          shift and go to state 134

state 111

    (69) EL -> OPENPAR O CLOSINGPAR OL . EL
    (66) EL -> . TRUE
    (67) EL -> . FALSE
    (68) EL -> . OPENPAR O CLOSINGPAR
    (69) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 135

state 112

    (70) OL -> AND .

    TRUE            reduce using rule 70 (OL -> AND .)
    FALSE           reduce using rule 70 (OL -> AND .)
    OPENPAR         reduce using rule 70 (OL -> AND .)


state 113

    (71) OL -> OR .

    TRUE            reduce using rule 71 (OL -> OR .)
    FALSE           reduce using rule 71 (OL -> OR .)
    OPENPAR         reduce using rule 71 (OL -> OR .)


state 114

    (72) OL -> NOT .

    TRUE            reduce using rule 72 (OL -> NOT .)
    FALSE           reduce using rule 72 (OL -> NOT .)
    OPENPAR         reduce using rule 72 (OL -> NOT .)


state 115

    (73) O -> EA GREATHER EA .
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    CLOSINGPAR      reduce using rule 73 (O -> EA GREATHER EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 116

    (74) O -> EA GREATHEREQUAL EA .
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    CLOSINGPAR      reduce using rule 74 (O -> EA GREATHEREQUAL EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 117

    (75) O -> EA SMALLER EA .
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    CLOSINGPAR      reduce using rule 75 (O -> EA SMALLER EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 118

    (76) O -> EA SMALLEREQUAL EA .
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    CLOSINGPAR      reduce using rule 76 (O -> EA SMALLEREQUAL EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 119

    (77) O -> EA NOTEQUAL EA .
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    CLOSINGPAR      reduce using rule 77 (O -> EA NOTEQUAL EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 120

    (78) O -> EA EQUALTO EA .
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    CLOSINGPAR      reduce using rule 78 (O -> EA EQUALTO EA .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 121

    (79) O -> Ex error Ex .

    CLOSINGPAR      reduce using rule 79 (O -> Ex error Ex .)


state 122

    (23) E -> FOR ID EQUALS EA for_assignation . TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end

    TO              shift and go to state 136


state 123

    (59) N -> OPENPAR EA . CLOSINGPAR
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P

    CLOSINGPAR      shift and go to state 99
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 124

    (24) E -> WHILE while_first_conditional EL DO while_second_conditional . F WEND while_final_conditional
    (18) F -> . E F
    (19) F -> . empty
    (20) E -> . LET setType Idv EQUALS EA
    (21) E -> . DIM setType Idv AS T Arr
    (22) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (23) E -> . FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (24) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (25) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (26) E -> . GOSUB ID
    (27) E -> . INPUT IDEx
    (28) E -> . PRINT Ex
    (80) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    WEND            reduce using rule 80 (empty -> .)

    F                              shift and go to state 137
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 125

    (25) E -> REPEAT while_first_conditional F UNTIL EL . repeat_conditional
    (33) repeat_conditional -> .

    LET             reduce using rule 33 (repeat_conditional -> .)
    DIM             reduce using rule 33 (repeat_conditional -> .)
    IF              reduce using rule 33 (repeat_conditional -> .)
    FOR             reduce using rule 33 (repeat_conditional -> .)
    WHILE           reduce using rule 33 (repeat_conditional -> .)
    REPEAT          reduce using rule 33 (repeat_conditional -> .)
    GOSUB           reduce using rule 33 (repeat_conditional -> .)
    INPUT           reduce using rule 33 (repeat_conditional -> .)
    PRINT           reduce using rule 33 (repeat_conditional -> .)
    SUBPROCEDURE    reduce using rule 33 (repeat_conditional -> .)
    END             reduce using rule 33 (repeat_conditional -> .)
    RETURN          reduce using rule 33 (repeat_conditional -> .)
    UNTIL           reduce using rule 33 (repeat_conditional -> .)
    ELSE            reduce using rule 33 (repeat_conditional -> .)
    EIF             reduce using rule 33 (repeat_conditional -> .)
    WEND            reduce using rule 33 (repeat_conditional -> .)
    NEXT            reduce using rule 33 (repeat_conditional -> .)

    repeat_conditional             shift and go to state 138

state 126

    (47) IDEx -> ID OPENBRACKET setType Idv . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 139


state 127

    (5) Arr -> OPENBRACKET arr_space CLOSINGBRACKET .

    MULTIPLY        reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    DIVIDE          reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    PLUS            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    MINUS           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    LET             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    DIM             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    IF              reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    FOR             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    WHILE           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    REPEAT          reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    GOSUB           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    INPUT           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    PRINT           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    END             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    RETURN          reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    UNTIL           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    ELSE            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    EIF             reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    WEND            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    NEXT            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    GREATHER        reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    GREATHEREQUAL   reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    SMALLER         reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    SMALLEREQUAL    reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    NOTEQUAL        reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    EQUALTO         reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    error           reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    CLOSINGPAR      reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    TO              reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    COMA            reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    CLOSINGBRACKET  reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    DO              reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    AS              reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)
    EQUALS          reduce using rule 5 (Arr -> OPENBRACKET arr_space CLOSINGBRACKET .)


state 128

    (7) arr_space -> EA COMA . arr_space
    (7) arr_space -> . EA COMA arr_space
    (8) arr_space -> . EA
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 101
    arr_space                      shift and go to state 140
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 129

    (3) V -> DIM setType Idv AS T Arr .

    LET             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    DIM             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    IF              reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    FOR             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    WHILE           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    REPEAT          reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    GOSUB           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    INPUT           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    PRINT           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    SUBPROCEDURE    reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    END             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)


state 130

    (12) S -> SUBPROCEDURE ID fillSub TWOPOINTS . M RETURN endProcedure S
    (16) M -> . F M
    (17) M -> . empty
    (18) F -> . E F
    (19) F -> . empty
    (80) empty -> .
    (20) E -> . LET setType Idv EQUALS EA
    (21) E -> . DIM setType Idv AS T Arr
    (22) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (23) E -> . FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (24) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (25) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (26) E -> . GOSUB ID
    (27) E -> . INPUT IDEx
    (28) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RETURN          reduce using rule 80 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 80 (empty -> .) ]
  ! DIM             [ reduce using rule 80 (empty -> .) ]
  ! IF              [ reduce using rule 80 (empty -> .) ]
  ! FOR             [ reduce using rule 80 (empty -> .) ]
  ! WHILE           [ reduce using rule 80 (empty -> .) ]
  ! REPEAT          [ reduce using rule 80 (empty -> .) ]
  ! GOSUB           [ reduce using rule 80 (empty -> .) ]
  ! INPUT           [ reduce using rule 80 (empty -> .) ]
  ! PRINT           [ reduce using rule 80 (empty -> .) ]

    M                              shift and go to state 141
    F                              shift and go to state 7
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 131

    (21) E -> DIM setType Idv AS T Arr .

    LET             reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    DIM             reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    IF              reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    FOR             reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    WHILE           reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    REPEAT          reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    GOSUB           reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    INPUT           reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    PRINT           reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    SUBPROCEDURE    reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    END             reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    RETURN          reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    UNTIL           reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    ELSE            reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    EIF             reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    WEND            reduce using rule 21 (E -> DIM setType Idv AS T Arr .)
    NEXT            reduce using rule 21 (E -> DIM setType Idv AS T Arr .)


state 132

    (22) E -> IF EL THEN first_conditional F Esf . EIF final_conditional

    EIF             shift and go to state 142


state 133

    (40) Esf -> ELSE . second_conditional F
    (38) second_conditional -> .

    LET             reduce using rule 38 (second_conditional -> .)
    DIM             reduce using rule 38 (second_conditional -> .)
    IF              reduce using rule 38 (second_conditional -> .)
    FOR             reduce using rule 38 (second_conditional -> .)
    WHILE           reduce using rule 38 (second_conditional -> .)
    REPEAT          reduce using rule 38 (second_conditional -> .)
    GOSUB           reduce using rule 38 (second_conditional -> .)
    INPUT           reduce using rule 38 (second_conditional -> .)
    PRINT           reduce using rule 38 (second_conditional -> .)
    EIF             reduce using rule 38 (second_conditional -> .)

    second_conditional             shift and go to state 143

state 134

    (41) Esf -> empty .

    EIF             reduce using rule 41 (Esf -> empty .)


state 135

    (69) EL -> OPENPAR O CLOSINGPAR OL EL .

    THEN            reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    LET             reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    DIM             reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    IF              reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    FOR             reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    WHILE           reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    REPEAT          reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GOSUB           reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    INPUT           reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    PRINT           reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SUBPROCEDURE    reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    END             reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    RETURN          reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    UNTIL           reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    ELSE            reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    EIF             reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    WEND            reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    NEXT            reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    error           reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    DO              reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    CLOSINGPAR      reduce using rule 69 (EL -> OPENPAR O CLOSINGPAR OL EL .)


state 136

    (23) E -> FOR ID EQUALS EA for_assignation TO . EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (51) EA -> . EA PLUS P
    (52) EA -> . EA MINUS P
    (53) EA -> . P
    (54) P -> . P MULTIPLY N
    (55) P -> . P DIVIDE N
    (56) P -> . N
    (57) N -> . cte saveID
    (58) N -> . ID saveID
    (59) N -> . OPENPAR EA CLOSINGPAR
    (60) N -> . ID Arr
    (62) cte -> . FLOATVAL
    (63) cte -> . INTVAL
    (64) cte -> . MINUS INTVAL
    (65) cte -> . MINUS FLOATVAL

    ID              shift and go to state 44
    OPENPAR         shift and go to state 91
    FLOATVAL        shift and go to state 45
    INTVAL          shift and go to state 46
    MINUS           shift and go to state 40

    EA                             shift and go to state 144
    P                              shift and go to state 39
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 137

    (24) E -> WHILE while_first_conditional EL DO while_second_conditional F . WEND while_final_conditional

    WEND            shift and go to state 145


state 138

    (25) E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .

    LET             reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    DIM             reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    IF              reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    FOR             reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    WHILE           reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    REPEAT          reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    GOSUB           reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    INPUT           reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    PRINT           reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    SUBPROCEDURE    reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    END             reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    RETURN          reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    UNTIL           reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    ELSE            reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    EIF             reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    WEND            reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    NEXT            reduce using rule 25 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)


state 139

    (47) IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .

    LET             reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    DIM             reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    IF              reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    FOR             reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WHILE           reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    REPEAT          reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GOSUB           reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    INPUT           reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    PRINT           reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    END             reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    RETURN          reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    UNTIL           reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    ELSE            reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    EIF             reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WEND            reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    NEXT            reduce using rule 47 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)


state 140

    (7) arr_space -> EA COMA arr_space .

    CLOSINGBRACKET  reduce using rule 7 (arr_space -> EA COMA arr_space .)


state 141

    (12) S -> SUBPROCEDURE ID fillSub TWOPOINTS M . RETURN endProcedure S

    RETURN          shift and go to state 146


state 142

    (22) E -> IF EL THEN first_conditional F Esf EIF . final_conditional
    (39) final_conditional -> .

    LET             reduce using rule 39 (final_conditional -> .)
    DIM             reduce using rule 39 (final_conditional -> .)
    IF              reduce using rule 39 (final_conditional -> .)
    FOR             reduce using rule 39 (final_conditional -> .)
    WHILE           reduce using rule 39 (final_conditional -> .)
    REPEAT          reduce using rule 39 (final_conditional -> .)
    GOSUB           reduce using rule 39 (final_conditional -> .)
    INPUT           reduce using rule 39 (final_conditional -> .)
    PRINT           reduce using rule 39 (final_conditional -> .)
    SUBPROCEDURE    reduce using rule 39 (final_conditional -> .)
    END             reduce using rule 39 (final_conditional -> .)
    RETURN          reduce using rule 39 (final_conditional -> .)
    UNTIL           reduce using rule 39 (final_conditional -> .)
    ELSE            reduce using rule 39 (final_conditional -> .)
    EIF             reduce using rule 39 (final_conditional -> .)
    WEND            reduce using rule 39 (final_conditional -> .)
    NEXT            reduce using rule 39 (final_conditional -> .)

    final_conditional              shift and go to state 147

state 143

    (40) Esf -> ELSE second_conditional . F
    (18) F -> . E F
    (19) F -> . empty
    (20) E -> . LET setType Idv EQUALS EA
    (21) E -> . DIM setType Idv AS T Arr
    (22) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (23) E -> . FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (24) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (25) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (26) E -> . GOSUB ID
    (27) E -> . INPUT IDEx
    (28) E -> . PRINT Ex
    (80) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    EIF             reduce using rule 80 (empty -> .)

    F                              shift and go to state 148
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 144

    (23) E -> FOR ID EQUALS EA for_assignation TO EA . for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (51) EA -> EA . PLUS P
    (52) EA -> EA . MINUS P
    (30) for_conditional -> .

    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DO              reduce using rule 30 (for_conditional -> .)

    for_conditional                shift and go to state 149

state 145

    (24) E -> WHILE while_first_conditional EL DO while_second_conditional F WEND . while_final_conditional
    (36) while_final_conditional -> .

    LET             reduce using rule 36 (while_final_conditional -> .)
    DIM             reduce using rule 36 (while_final_conditional -> .)
    IF              reduce using rule 36 (while_final_conditional -> .)
    FOR             reduce using rule 36 (while_final_conditional -> .)
    WHILE           reduce using rule 36 (while_final_conditional -> .)
    REPEAT          reduce using rule 36 (while_final_conditional -> .)
    GOSUB           reduce using rule 36 (while_final_conditional -> .)
    INPUT           reduce using rule 36 (while_final_conditional -> .)
    PRINT           reduce using rule 36 (while_final_conditional -> .)
    SUBPROCEDURE    reduce using rule 36 (while_final_conditional -> .)
    END             reduce using rule 36 (while_final_conditional -> .)
    RETURN          reduce using rule 36 (while_final_conditional -> .)
    UNTIL           reduce using rule 36 (while_final_conditional -> .)
    ELSE            reduce using rule 36 (while_final_conditional -> .)
    EIF             reduce using rule 36 (while_final_conditional -> .)
    WEND            reduce using rule 36 (while_final_conditional -> .)
    NEXT            reduce using rule 36 (while_final_conditional -> .)

    while_final_conditional        shift and go to state 150

state 146

    (12) S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN . endProcedure S
    (15) endProcedure -> .

    SUBPROCEDURE    reduce using rule 15 (endProcedure -> .)
    END             reduce using rule 15 (endProcedure -> .)

    endProcedure                   shift and go to state 151

state 147

    (22) E -> IF EL THEN first_conditional F Esf EIF final_conditional .

    LET             reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    DIM             reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    IF              reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    FOR             reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    WHILE           reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    REPEAT          reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    GOSUB           reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    INPUT           reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    PRINT           reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    SUBPROCEDURE    reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    END             reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    RETURN          reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    UNTIL           reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    ELSE            reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    EIF             reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    WEND            reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    NEXT            reduce using rule 22 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)


state 148

    (40) Esf -> ELSE second_conditional F .

    EIF             reduce using rule 40 (Esf -> ELSE second_conditional F .)


state 149

    (23) E -> FOR ID EQUALS EA for_assignation TO EA for_conditional . DO for_save_conditional F NEXT ID for_conditional_end

    DO              shift and go to state 152


state 150

    (24) E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .

    LET             reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    DIM             reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    IF              reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    FOR             reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    WHILE           reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    REPEAT          reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    GOSUB           reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    INPUT           reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    PRINT           reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    SUBPROCEDURE    reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    END             reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    RETURN          reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    UNTIL           reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    ELSE            reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    EIF             reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    WEND            reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    NEXT            reduce using rule 24 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)


state 151

    (12) S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure . S
    (12) S -> . SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S
    (13) S -> . empty
    (80) empty -> .

    SUBPROCEDURE    shift and go to state 50
    END             reduce using rule 80 (empty -> .)

    S                              shift and go to state 153
    empty                          shift and go to state 51

state 152

    (23) E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO . for_save_conditional F NEXT ID for_conditional_end
    (31) for_save_conditional -> .

    LET             reduce using rule 31 (for_save_conditional -> .)
    DIM             reduce using rule 31 (for_save_conditional -> .)
    IF              reduce using rule 31 (for_save_conditional -> .)
    FOR             reduce using rule 31 (for_save_conditional -> .)
    WHILE           reduce using rule 31 (for_save_conditional -> .)
    REPEAT          reduce using rule 31 (for_save_conditional -> .)
    GOSUB           reduce using rule 31 (for_save_conditional -> .)
    INPUT           reduce using rule 31 (for_save_conditional -> .)
    PRINT           reduce using rule 31 (for_save_conditional -> .)
    NEXT            reduce using rule 31 (for_save_conditional -> .)

    for_save_conditional           shift and go to state 154

state 153

    (12) S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S .

    END             reduce using rule 12 (S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S .)


state 154

    (23) E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional . F NEXT ID for_conditional_end
    (18) F -> . E F
    (19) F -> . empty
    (20) E -> . LET setType Idv EQUALS EA
    (21) E -> . DIM setType Idv AS T Arr
    (22) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (23) E -> . FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (24) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (25) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (26) E -> . GOSUB ID
    (27) E -> . INPUT IDEx
    (28) E -> . PRINT Ex
    (80) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    NEXT            reduce using rule 80 (empty -> .)

    F                              shift and go to state 155
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 155

    (23) E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F . NEXT ID for_conditional_end

    NEXT            shift and go to state 156


state 156

    (23) E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT . ID for_conditional_end

    ID              shift and go to state 157


state 157

    (23) E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID . for_conditional_end
    (32) for_conditional_end -> .

    LET             reduce using rule 32 (for_conditional_end -> .)
    DIM             reduce using rule 32 (for_conditional_end -> .)
    IF              reduce using rule 32 (for_conditional_end -> .)
    FOR             reduce using rule 32 (for_conditional_end -> .)
    WHILE           reduce using rule 32 (for_conditional_end -> .)
    REPEAT          reduce using rule 32 (for_conditional_end -> .)
    GOSUB           reduce using rule 32 (for_conditional_end -> .)
    INPUT           reduce using rule 32 (for_conditional_end -> .)
    PRINT           reduce using rule 32 (for_conditional_end -> .)
    SUBPROCEDURE    reduce using rule 32 (for_conditional_end -> .)
    END             reduce using rule 32 (for_conditional_end -> .)
    RETURN          reduce using rule 32 (for_conditional_end -> .)
    UNTIL           reduce using rule 32 (for_conditional_end -> .)
    ELSE            reduce using rule 32 (for_conditional_end -> .)
    EIF             reduce using rule 32 (for_conditional_end -> .)
    WEND            reduce using rule 32 (for_conditional_end -> .)
    NEXT            reduce using rule 32 (for_conditional_end -> .)

    for_conditional_end            shift and go to state 158

state 158

    (23) E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .

    LET             reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    DIM             reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    IF              reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    FOR             reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    WHILE           reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    REPEAT          reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    GOSUB           reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    INPUT           reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    PRINT           reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    SUBPROCEDURE    reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    END             reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    RETURN          reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    UNTIL           reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    ELSE            reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    EIF             reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    WEND            reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    NEXT            reduce using rule 23 (E -> FOR ID EQUALS EA for_assignation TO EA for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DIM in state 2 resolved as shift
WARNING: shift/reduce conflict for LET in state 3 resolved as shift
WARNING: shift/reduce conflict for DIM in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 3 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 3 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for LET in state 7 resolved as shift
WARNING: shift/reduce conflict for DIM in state 7 resolved as shift
WARNING: shift/reduce conflict for IF in state 7 resolved as shift
WARNING: shift/reduce conflict for FOR in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 7 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 7 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 7 resolved as shift
WARNING: shift/reduce conflict for LET in state 9 resolved as shift
WARNING: shift/reduce conflict for DIM in state 9 resolved as shift
WARNING: shift/reduce conflict for IF in state 9 resolved as shift
WARNING: shift/reduce conflict for FOR in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 9 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 9 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 9 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 9 resolved as shift
WARNING: shift/reduce conflict for LET in state 130 resolved as shift
WARNING: shift/reduce conflict for DIM in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for FOR in state 130 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 130 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 130 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 130 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 130 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 130 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (M -> empty)
WARNING: rejected rule (F -> empty) in state 8
WARNING: reduce/reduce conflict in state 44 resolved using rule (saveID -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 44
WARNING: reduce/reduce conflict in state 48 resolved using rule (Idv -> ID)
WARNING: rejected rule (empty -> <empty>) in state 48
