
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS CLOSINGBRACKET CLOSINGPAR COMA COMMENT DIM DIVIDE EIF ELSE END EQUALS EQUALTO FALSE FLOAT FLOATVAL FOR GOSUB GREATHER GREATHEREQUAL ID IF INPUT INT INTVAL LET MINUS MULTIPLY NEXT NOT NOTEQUAL OPENBRACKET OPENPAR OR PLUS PRINT PROGRAM RETURN SMALLER SMALLEREQUAL SUBPROCEDURE THEN TO TRUE TWOPOINTS WEND WHILE WORD WORDVAL\n  PROGRAMA : PROGRAM V M S END\n  \n    V : DIM setType Idv AS T Arr V\n      | empty\n  \n  Arr : OPENBRACKET EA CLOSINGBRACKET Arr\n      | OPENBRACKET ID CLOSINGBRACKET Arr\n      | empty\n  \n  T : INT\n    | FLOAT\n    | WORD\n  \n  S : SUBPROCEDURE ID TWOPOINTS M RETURN S\n    | empty\n  \n  M : F M\n    | empty\n  \n  F : E F\n    | empty\n  \n  E : LET setType Idv EQUALS Ex\n    | DIM setType Idv AS T Arr\n    | IF EL THEN F Esf EIF\n    | FOR ID EQUALS EA TO Ex F NEXT ID\n    | WHILE OPENPAR EL CLOSINGPAR F WEND\n    | GOSUB ID\n    | INPUT ES COMA IDEx\n    | PRINT Ex\n  \n  Idv : ID COMA Idv\n      | ID\n  \n  setType :\n  \n  Esf : ELSE F\n      | empty\n  \n  IDEx : ID\n       | ID OPENBRACKET setType Idv CLOSINGBRACKET\n  \n  Ex : EA\n     | ES\n     | EL\n     | ID\n  \n  ES : WORDVAL\n  \n  EA : P PLUS EA\n     | P MINUS EA\n     | P \n  \n  P : N MULTIPLY P\n    | N DIVIDE P\n    | N\n  \n  N : cte\n    | ID\n    | OPENPAR EA CLOSINGPAR\n    | ID OPENBRACKET INTVAL CLOSINGBRACKET\n    | ID OPENBRACKET setType Idv CLOSINGBRACKET\n  \n  cte : INTVAL\n      | FLOATVAL\n  \n  EL : TRUE \n     | FALSE \n     | OPENPAR O CLOSINGPAR Olt\n  \n  Olt : OL OPENPAR O CLOSINGPAR Olt\n      | empty\n  \n  OL : AND\n     | OR\n     | NOT\n  \n  O : WORD EQUALTO WORD\n    | EA OPR EA\n    | ID OPR ID\n    | ID OPR EA\n    | EA OPR ID\n  \n  OPR : EQUALTO\n      | GREATHER\n      | GREATHEREQUAL\n      | SMALLER\n      | SMALLEREQUAL\n      | NOTEQUAL\n  \n  empty :\n  '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,49,],[0,-1,]),'DIM':([2,3,5,7,8,9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,70,75,76,87,88,89,92,93,94,95,96,97,98,99,100,103,104,106,108,110,122,124,126,128,129,132,133,135,136,143,144,145,147,148,149,150,151,],[4,11,-3,11,-15,11,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,11,11,-43,-68,11,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,11,-51,-53,-45,4,-6,-17,-18,11,-20,-46,-2,-68,-68,-68,-30,-4,-5,-52,-19,]),'LET':([2,3,5,7,8,9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,70,75,76,87,88,89,92,93,94,95,96,97,98,99,100,103,104,106,108,110,122,124,126,128,129,132,133,135,136,143,144,145,147,148,149,150,151,],[-68,10,-3,10,-15,10,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,10,10,-43,-68,10,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,10,-51,-53,-45,-68,-6,-17,-18,10,-20,-46,-2,-68,-68,-68,-30,-4,-5,-52,-19,]),'IF':([2,3,5,7,8,9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,70,75,76,87,88,89,92,93,94,95,96,97,98,99,100,103,104,106,108,110,122,124,126,128,129,132,133,135,136,143,144,145,147,148,149,150,151,],[-68,12,-3,12,-15,12,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,12,12,-43,-68,12,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,12,-51,-53,-45,-68,-6,-17,-18,12,-20,-46,-2,-68,-68,-68,-30,-4,-5,-52,-19,]),'FOR':([2,3,5,7,8,9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,70,75,76,87,88,89,92,93,94,95,96,97,98,99,100,103,104,106,108,110,122,124,126,128,129,132,133,135,136,143,144,145,147,148,149,150,151,],[-68,13,-3,13,-15,13,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,13,13,-43,-68,13,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,13,-51,-53,-45,-68,-6,-17,-18,13,-20,-46,-2,-68,-68,-68,-30,-4,-5,-52,-19,]),'WHILE':([2,3,5,7,8,9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,70,75,76,87,88,89,92,93,94,95,96,97,98,99,100,103,104,106,108,110,122,124,126,128,129,132,133,135,136,143,144,145,147,148,149,150,151,],[-68,14,-3,14,-15,14,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,14,14,-43,-68,14,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,14,-51,-53,-45,-68,-6,-17,-18,14,-20,-46,-2,-68,-68,-68,-30,-4,-5,-52,-19,]),'GOSUB':([2,3,5,7,8,9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,70,75,76,87,88,89,92,93,94,95,96,97,98,99,100,103,104,106,108,110,122,124,126,128,129,132,133,135,136,143,144,145,147,148,149,150,151,],[-68,15,-3,15,-15,15,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,15,15,-43,-68,15,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,15,-51,-53,-45,-68,-6,-17,-18,15,-20,-46,-2,-68,-68,-68,-30,-4,-5,-52,-19,]),'INPUT':([2,3,5,7,8,9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,70,75,76,87,88,89,92,93,94,95,96,97,98,99,100,103,104,106,108,110,122,124,126,128,129,132,133,135,136,143,144,145,147,148,149,150,151,],[-68,16,-3,16,-15,16,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,16,16,-43,-68,16,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,16,-51,-53,-45,-68,-6,-17,-18,16,-20,-46,-2,-68,-68,-68,-30,-4,-5,-52,-19,]),'PRINT':([2,3,5,7,8,9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,70,75,76,87,88,89,92,93,94,95,96,97,98,99,100,103,104,106,108,110,122,124,126,128,129,132,133,135,136,143,144,145,147,148,149,150,151,],[-68,17,-3,17,-15,17,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,17,17,-43,-68,17,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,17,-51,-53,-45,-68,-6,-17,-18,17,-20,-46,-2,-68,-68,-68,-30,-4,-5,-52,-19,]),'SUBPROCEDURE':([2,3,5,6,7,8,9,22,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,75,76,88,89,92,93,94,95,96,97,98,99,100,103,104,108,110,122,124,126,127,128,129,133,135,136,143,144,145,147,148,149,150,151,],[-68,-68,-3,20,-68,-13,-68,-12,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,-43,-68,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,-51,-53,-45,-68,-6,20,-17,-18,-20,-46,-2,-68,-68,-68,-30,-4,-5,-52,-19,]),'END':([2,3,5,6,7,8,9,19,21,22,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,75,76,88,89,92,93,94,95,96,97,98,99,100,103,104,108,110,122,124,126,127,128,129,133,135,136,139,143,144,145,147,148,149,150,151,],[-68,-68,-3,-68,-68,-13,-68,49,-11,-12,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,-43,-68,-22,-29,-36,-37,-44,-39,-40,-68,-7,-8,-9,-16,-68,-51,-53,-45,-68,-6,-68,-17,-18,-20,-46,-2,-10,-68,-68,-68,-30,-4,-5,-52,-19,]),'ID':([4,10,11,13,15,17,18,20,25,26,30,42,54,59,61,62,63,64,66,67,69,71,78,79,80,81,82,83,84,85,91,119,121,125,131,134,146,],[-26,-26,-26,31,33,40,48,50,48,48,58,58,75,75,89,-26,75,75,75,75,48,40,116,-62,-63,-64,-65,-66,-67,117,48,40,-26,138,58,48,151,]),'RETURN':([7,8,9,22,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,70,75,76,88,89,92,93,94,95,96,98,99,100,102,103,104,108,110,122,126,128,129,133,135,143,144,145,147,148,149,150,151,],[-68,-13,-68,-12,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,-68,-43,-68,-22,-29,-36,-37,-44,-39,-40,-7,-8,-9,127,-16,-68,-51,-53,-45,-6,-17,-18,-20,-46,-68,-68,-68,-30,-4,-5,-52,-19,]),'ELSE':([9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,73,75,76,88,89,92,93,94,95,96,98,99,100,103,104,108,110,122,126,128,129,133,135,143,144,145,147,148,149,150,151,],[-68,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,-68,106,-43,-68,-22,-29,-36,-37,-44,-39,-40,-7,-8,-9,-16,-68,-51,-53,-45,-6,-17,-18,-20,-46,-68,-68,-68,-30,-4,-5,-52,-19,]),'EIF':([9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,53,73,75,76,88,89,92,93,94,95,96,98,99,100,103,104,105,106,107,108,110,122,126,128,129,130,133,135,143,144,145,147,148,149,150,151,],[-68,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,-68,-68,-43,-68,-22,-29,-36,-37,-44,-39,-40,-7,-8,-9,-16,-68,129,-68,-28,-51,-53,-45,-6,-17,-18,-27,-20,-46,-68,-68,-68,-30,-4,-5,-52,-19,]),'WEND':([9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,75,76,87,88,89,92,93,94,95,96,98,99,100,103,104,108,110,120,122,126,128,129,133,135,143,144,145,147,148,149,150,151,],[-68,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,-43,-68,-68,-22,-29,-36,-37,-44,-39,-40,-7,-8,-9,-16,-68,-51,-53,133,-45,-6,-17,-18,-20,-46,-68,-68,-68,-30,-4,-5,-52,-19,]),'NEXT':([9,23,24,28,29,33,35,36,37,38,39,40,41,43,44,45,46,75,76,88,89,92,93,94,95,96,98,99,100,103,104,108,110,122,126,128,129,132,133,135,141,143,144,145,147,148,149,150,151,],[-68,-14,-15,-49,-50,-21,-35,-23,-31,-32,-33,-34,-38,-41,-42,-47,-48,-43,-68,-22,-29,-36,-37,-44,-39,-40,-7,-8,-9,-16,-68,-51,-53,-45,-6,-17,-18,-68,-20,-46,146,-68,-68,-68,-30,-4,-5,-52,-19,]),'TRUE':([12,17,32,71,119,],[28,28,28,28,28,]),'FALSE':([12,17,32,71,119,],[29,29,29,29,29,]),'OPENPAR':([12,14,17,30,32,42,54,59,63,64,66,67,71,78,79,80,81,82,83,84,85,109,111,112,113,119,125,131,],[30,32,42,54,30,54,54,54,54,54,54,54,42,54,-62,-63,-64,-65,-66,-67,54,131,-54,-55,-56,42,54,54,]),'WORDVAL':([16,17,71,119,],[35,35,35,35,]),'INTVAL':([17,30,42,54,59,62,63,64,66,67,71,78,79,80,81,82,83,84,85,119,125,131,],[45,45,45,45,45,90,45,45,45,45,45,45,-62,-63,-64,-65,-66,-67,45,45,45,45,]),'FLOATVAL':([17,30,42,54,59,63,64,66,67,71,78,79,80,81,82,83,84,85,119,125,131,],[46,46,46,46,46,46,46,46,46,46,46,-62,-63,-64,-65,-66,-67,46,46,46,46,]),'THEN':([27,28,29,76,108,110,145,150,],[53,-49,-50,-68,-51,-53,-68,-52,]),'CLOSINGPAR':([28,29,41,43,44,45,46,55,58,60,65,74,75,76,92,93,94,95,96,108,110,114,115,116,117,118,122,135,140,145,150,],[-49,-50,-38,-41,-42,-47,-48,76,-43,87,94,94,-43,-68,-36,-37,-44,-39,-40,-51,-53,-57,-58,-43,-43,-60,-45,-46,145,-68,-52,]),'WORD':([30,42,68,72,77,131,],[56,56,100,100,114,56,]),'EQUALS':([31,48,51,101,],[59,-25,71,-24,]),'COMA':([34,35,48,],[61,-35,69,]),'MULTIPLY':([40,43,44,45,46,58,75,94,116,117,122,135,138,],[-43,66,-42,-47,-48,-43,-43,-44,-43,-43,-45,-46,-43,]),'DIVIDE':([40,43,44,45,46,58,75,94,116,117,122,135,138,],[-43,67,-42,-47,-48,-43,-43,-44,-43,-43,-45,-46,-43,]),'PLUS':([40,41,43,44,45,46,58,75,94,95,96,116,117,122,135,138,],[-43,63,-41,-42,-47,-48,-43,-43,-44,-39,-40,-43,-43,-45,-46,-43,]),'MINUS':([40,41,43,44,45,46,58,75,94,95,96,116,117,122,135,138,],[-43,64,-41,-42,-47,-48,-43,-43,-44,-39,-40,-43,-43,-45,-46,-43,]),'OPENBRACKET':([40,58,75,89,97,98,99,100,104,116,117,138,143,144,],[62,62,62,121,125,-7,-8,-9,125,62,62,62,125,125,]),'EQUALTO':([41,43,44,45,46,56,57,58,65,75,92,93,94,95,96,122,135,],[-38,-41,-42,-47,-48,77,79,79,79,-43,-36,-37,-44,-39,-40,-45,-46,]),'GREATHER':([41,43,44,45,46,57,58,65,75,92,93,94,95,96,122,135,],[-38,-41,-42,-47,-48,80,80,80,-43,-36,-37,-44,-39,-40,-45,-46,]),'GREATHEREQUAL':([41,43,44,45,46,57,58,65,75,92,93,94,95,96,122,135,],[-38,-41,-42,-47,-48,81,81,81,-43,-36,-37,-44,-39,-40,-45,-46,]),'SMALLER':([41,43,44,45,46,57,58,65,75,92,93,94,95,96,122,135,],[-38,-41,-42,-47,-48,82,82,82,-43,-36,-37,-44,-39,-40,-45,-46,]),'SMALLEREQUAL':([41,43,44,45,46,57,58,65,75,92,93,94,95,96,122,135,],[-38,-41,-42,-47,-48,83,83,83,-43,-36,-37,-44,-39,-40,-45,-46,]),'NOTEQUAL':([41,43,44,45,46,57,58,65,75,92,93,94,95,96,122,135,],[-38,-41,-42,-47,-48,84,84,84,-43,-36,-37,-44,-39,-40,-45,-46,]),'TO':([41,43,44,45,46,75,86,92,93,94,95,96,122,135,],[-38,-41,-42,-47,-48,-43,119,-36,-37,-44,-39,-40,-45,-46,]),'CLOSINGBRACKET':([41,43,44,45,46,48,75,90,92,93,94,95,96,101,122,123,135,137,138,142,],[-38,-41,-42,-47,-48,-25,-43,122,-36,-37,-44,-39,-40,-24,-45,135,-46,143,144,147,]),'AS':([47,48,52,101,],[68,-25,72,-24,]),'TWOPOINTS':([50,],[70,]),'INT':([68,72,],[98,98,]),'FLOAT':([68,72,],[99,99,]),'AND':([76,145,],[111,111,]),'OR':([76,145,],[112,112,]),'NOT':([76,145,],[113,113,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAMA':([0,],[1,]),'V':([2,124,],[3,136,]),'empty':([2,3,6,7,9,53,70,73,76,87,97,104,106,124,127,132,143,144,145,],[5,8,21,8,24,24,8,107,110,24,126,126,24,5,21,24,126,126,110,]),'M':([3,7,70,],[6,22,102,]),'F':([3,7,9,53,70,87,106,132,],[7,7,23,73,7,120,130,141,]),'E':([3,7,9,53,70,87,106,132,],[9,9,9,9,9,9,9,9,]),'setType':([4,10,11,62,121,],[18,25,26,91,134,]),'S':([6,127,],[19,139,]),'EL':([12,17,32,71,119,],[27,39,60,39,39,]),'ES':([16,17,71,119,],[34,38,38,38,]),'Ex':([17,71,119,],[36,103,132,]),'EA':([17,30,42,54,59,63,64,71,78,85,119,125,131,],[37,57,65,74,86,92,93,37,115,118,37,137,57,]),'P':([17,30,42,54,59,63,64,66,67,71,78,85,119,125,131,],[41,41,41,41,41,41,41,95,96,41,41,41,41,41,41,]),'N':([17,30,42,54,59,63,64,66,67,71,78,85,119,125,131,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'cte':([17,30,42,54,59,63,64,66,67,71,78,85,119,125,131,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'Idv':([18,25,26,69,91,134,],[47,51,52,101,123,142,]),'O':([30,42,131,],[55,55,140,]),'OPR':([57,58,65,],[78,85,78,]),'IDEx':([61,],[88,]),'T':([68,72,],[97,104,]),'Esf':([73,],[105,]),'Olt':([76,145,],[108,150,]),'OL':([76,145,],[109,109,]),'Arr':([97,104,143,144,],[124,128,148,149,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAMA","S'",1,None,None,None),
  ('PROGRAMA -> PROGRAM V M S END','PROGRAMA',5,'p_PROGRAMA','syntax_analyzer.py',319),
  ('V -> DIM setType Idv AS T Arr V','V',7,'p_V','syntax_analyzer.py',325),
  ('V -> empty','V',1,'p_V','syntax_analyzer.py',326),
  ('Arr -> OPENBRACKET EA CLOSINGBRACKET Arr','Arr',4,'p_Arr','syntax_analyzer.py',335),
  ('Arr -> OPENBRACKET ID CLOSINGBRACKET Arr','Arr',4,'p_Arr','syntax_analyzer.py',336),
  ('Arr -> empty','Arr',1,'p_Arr','syntax_analyzer.py',337),
  ('T -> INT','T',1,'p_T','syntax_analyzer.py',342),
  ('T -> FLOAT','T',1,'p_T','syntax_analyzer.py',343),
  ('T -> WORD','T',1,'p_T','syntax_analyzer.py',344),
  ('S -> SUBPROCEDURE ID TWOPOINTS M RETURN S','S',6,'p_S','syntax_analyzer.py',350),
  ('S -> empty','S',1,'p_S','syntax_analyzer.py',351),
  ('M -> F M','M',2,'p_M','syntax_analyzer.py',356),
  ('M -> empty','M',1,'p_M','syntax_analyzer.py',357),
  ('F -> E F','F',2,'p_F','syntax_analyzer.py',362),
  ('F -> empty','F',1,'p_F','syntax_analyzer.py',363),
  ('E -> LET setType Idv EQUALS Ex','E',5,'p_E','syntax_analyzer.py',368),
  ('E -> DIM setType Idv AS T Arr','E',6,'p_E','syntax_analyzer.py',369),
  ('E -> IF EL THEN F Esf EIF','E',6,'p_E','syntax_analyzer.py',370),
  ('E -> FOR ID EQUALS EA TO Ex F NEXT ID','E',9,'p_E','syntax_analyzer.py',371),
  ('E -> WHILE OPENPAR EL CLOSINGPAR F WEND','E',6,'p_E','syntax_analyzer.py',372),
  ('E -> GOSUB ID','E',2,'p_E','syntax_analyzer.py',373),
  ('E -> INPUT ES COMA IDEx','E',4,'p_E','syntax_analyzer.py',374),
  ('E -> PRINT Ex','E',2,'p_E','syntax_analyzer.py',375),
  ('Idv -> ID COMA Idv','Idv',3,'p_Idv','syntax_analyzer.py',384),
  ('Idv -> ID','Idv',1,'p_Idv','syntax_analyzer.py',385),
  ('setType -> <empty>','setType',0,'p_setType','syntax_analyzer.py',393),
  ('Esf -> ELSE F','Esf',2,'p_Esf','syntax_analyzer.py',400),
  ('Esf -> empty','Esf',1,'p_Esf','syntax_analyzer.py',401),
  ('IDEx -> ID','IDEx',1,'p_IDEx','syntax_analyzer.py',406),
  ('IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET','IDEx',5,'p_IDEx','syntax_analyzer.py',407),
  ('Ex -> EA','Ex',1,'p_Ex','syntax_analyzer.py',412),
  ('Ex -> ES','Ex',1,'p_Ex','syntax_analyzer.py',413),
  ('Ex -> EL','Ex',1,'p_Ex','syntax_analyzer.py',414),
  ('Ex -> ID','Ex',1,'p_Ex','syntax_analyzer.py',415),
  ('ES -> WORDVAL','ES',1,'p_ES','syntax_analyzer.py',420),
  ('EA -> P PLUS EA','EA',3,'p_EA','syntax_analyzer.py',425),
  ('EA -> P MINUS EA','EA',3,'p_EA','syntax_analyzer.py',426),
  ('EA -> P','EA',1,'p_EA','syntax_analyzer.py',427),
  ('P -> N MULTIPLY P','P',3,'p_P','syntax_analyzer.py',432),
  ('P -> N DIVIDE P','P',3,'p_P','syntax_analyzer.py',433),
  ('P -> N','P',1,'p_P','syntax_analyzer.py',434),
  ('N -> cte','N',1,'p_N','syntax_analyzer.py',439),
  ('N -> ID','N',1,'p_N','syntax_analyzer.py',440),
  ('N -> OPENPAR EA CLOSINGPAR','N',3,'p_N','syntax_analyzer.py',441),
  ('N -> ID OPENBRACKET INTVAL CLOSINGBRACKET','N',4,'p_N','syntax_analyzer.py',442),
  ('N -> ID OPENBRACKET setType Idv CLOSINGBRACKET','N',5,'p_N','syntax_analyzer.py',443),
  ('cte -> INTVAL','cte',1,'p_cte','syntax_analyzer.py',448),
  ('cte -> FLOATVAL','cte',1,'p_cte','syntax_analyzer.py',449),
  ('EL -> TRUE','EL',1,'p_EL','syntax_analyzer.py',454),
  ('EL -> FALSE','EL',1,'p_EL','syntax_analyzer.py',455),
  ('EL -> OPENPAR O CLOSINGPAR Olt','EL',4,'p_EL','syntax_analyzer.py',456),
  ('Olt -> OL OPENPAR O CLOSINGPAR Olt','Olt',5,'p_Olt','syntax_analyzer.py',461),
  ('Olt -> empty','Olt',1,'p_Olt','syntax_analyzer.py',462),
  ('OL -> AND','OL',1,'p_OL','syntax_analyzer.py',467),
  ('OL -> OR','OL',1,'p_OL','syntax_analyzer.py',468),
  ('OL -> NOT','OL',1,'p_OL','syntax_analyzer.py',469),
  ('O -> WORD EQUALTO WORD','O',3,'p_O','syntax_analyzer.py',474),
  ('O -> EA OPR EA','O',3,'p_O','syntax_analyzer.py',475),
  ('O -> ID OPR ID','O',3,'p_O','syntax_analyzer.py',476),
  ('O -> ID OPR EA','O',3,'p_O','syntax_analyzer.py',477),
  ('O -> EA OPR ID','O',3,'p_O','syntax_analyzer.py',478),
  ('OPR -> EQUALTO','OPR',1,'p_OPR','syntax_analyzer.py',483),
  ('OPR -> GREATHER','OPR',1,'p_OPR','syntax_analyzer.py',484),
  ('OPR -> GREATHEREQUAL','OPR',1,'p_OPR','syntax_analyzer.py',485),
  ('OPR -> SMALLER','OPR',1,'p_OPR','syntax_analyzer.py',486),
  ('OPR -> SMALLEREQUAL','OPR',1,'p_OPR','syntax_analyzer.py',487),
  ('OPR -> NOTEQUAL','OPR',1,'p_OPR','syntax_analyzer.py',488),
  ('empty -> <empty>','empty',0,'p_empty','syntax_analyzer.py',493),
]
