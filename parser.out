Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM V M endProgram S END
Rule 2     endProgram -> <empty>
Rule 3     V -> DIM setType Idv AS T Arr
Rule 4     V -> empty
Rule 5     Arr -> OPENBRACKET EA CLOSINGBRACKET Arr
Rule 6     Arr -> OPENBRACKET ID CLOSINGBRACKET Arr
Rule 7     Arr -> empty
Rule 8     T -> INT
Rule 9     T -> FLOAT
Rule 10    T -> WORD
Rule 11    S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S
Rule 12    S -> empty
Rule 13    fillSub -> <empty>
Rule 14    endProcedure -> <empty>
Rule 15    M -> F M
Rule 16    M -> empty
Rule 17    F -> E F
Rule 18    F -> empty
Rule 19    E -> LET setType Idv EQUALS Ex
Rule 20    E -> DIM setType Idv AS T Arr
Rule 21    E -> IF EL THEN first_conditional F Esf EIF final_conditional
Rule 22    E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
Rule 23    E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
Rule 24    E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional
Rule 25    E -> GOSUB ID
Rule 26    E -> INPUT IDEx
Rule 27    E -> PRINT Ex
Rule 28    for_assignation -> <empty>
Rule 29    for_conditional -> <empty>
Rule 30    for_save_conditional -> <empty>
Rule 31    for_conditional_end -> <empty>
Rule 32    repeat_conditional -> <empty>
Rule 33    while_first_conditional -> <empty>
Rule 34    while_second_conditional -> <empty>
Rule 35    while_final_conditional -> <empty>
Rule 36    first_conditional -> <empty>
Rule 37    second_conditional -> <empty>
Rule 38    final_conditional -> <empty>
Rule 39    Esf -> ELSE second_conditional F
Rule 40    Esf -> empty
Rule 41    Idv -> ID COMA Idv
Rule 42    Idv -> ID
Rule 43    setType -> <empty>
Rule 44    IDEx -> ID
Rule 45    IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET
Rule 46    Ex -> EA
Rule 47    Ex -> EL
Rule 48    Ex -> ID
Rule 49    ES -> WORDVAL
Rule 50    EA -> EA PLUS P
Rule 51    EA -> EA MINUS P
Rule 52    EA -> P
Rule 53    P -> P MULTIPLY N
Rule 54    P -> P DIVIDE N
Rule 55    P -> N
Rule 56    N -> cte saveID
Rule 57    N -> ID saveID
Rule 58    N -> OPENPAR EA CLOSINGPAR
Rule 59    N -> ID OPENBRACKET INTVAL CLOSINGBRACKET
Rule 60    N -> ID OPENBRACKET setType Idv CLOSINGBRACKET
Rule 61    saveID -> <empty>
Rule 62    cte -> INTVAL
Rule 63    cte -> FLOATVAL
Rule 64    EL -> TRUE
Rule 65    EL -> FALSE
Rule 66    EL -> OPENPAR O CLOSINGPAR
Rule 67    EL -> OPENPAR O CLOSINGPAR OL EL
Rule 68    OL -> AND
Rule 69    OL -> OR
Rule 70    OL -> NOT
Rule 71    O -> Ex GREATHER Ex
Rule 72    O -> Ex GREATHEREQUAL Ex
Rule 73    O -> Ex SMALLER Ex
Rule 74    O -> Ex SMALLEREQUAL Ex
Rule 75    O -> Ex NOTEQUAL Ex
Rule 76    O -> Ex EQUALTO Ex
Rule 77    O -> Ex error Ex
Rule 78    empty -> <empty>

Terminals, with rules where they appear

AND                  : 68
AS                   : 3 20
CLOSINGBRACKET       : 5 6 45 59 60
CLOSINGPAR           : 58 66 67
COMA                 : 41
COMMENT              : 
DIM                  : 3 20
DIVIDE               : 54
DO                   : 22 23
EIF                  : 21
ELSE                 : 39
END                  : 1
EQUALS               : 19 22
EQUALTO              : 76
FALSE                : 65
FLOAT                : 9
FLOATVAL             : 63
FOR                  : 22
GOSUB                : 25
GREATHER             : 71
GREATHEREQUAL        : 72
ID                   : 6 11 22 22 25 41 42 44 45 48 57 59 60
IF                   : 21
INPUT                : 26
INT                  : 8
INTVAL               : 59 62
LET                  : 19
MINUS                : 51
MULTIPLY             : 53
NEXT                 : 22
NOT                  : 70
NOTEQUAL             : 75
OPENBRACKET          : 5 6 45 59 60
OPENPAR              : 58 66 67
OR                   : 69
PLUS                 : 50
PRINT                : 27
PROGRAM              : 1
REPEAT               : 24
RETURN               : 11
SMALLER              : 73
SMALLEREQUAL         : 74
SUBPROCEDURE         : 11
THEN                 : 21
TO                   : 22
TRUE                 : 64
TWOPOINTS            : 11
UNTIL                : 24
WEND                 : 23
WHILE                : 23
WORD                 : 10
WORDVAL              : 49
error                : 77

Nonterminals, with rules where they appear

Arr                  : 3 5 6 20
E                    : 17
EA                   : 5 22 46 50 51 58
EL                   : 21 23 24 47 67
ES                   : 
Esf                  : 21
Ex                   : 19 22 27 71 71 72 72 73 73 74 74 75 75 76 76 77 77
F                    : 15 17 21 22 23 24 39
IDEx                 : 26
Idv                  : 3 19 20 41 45 60
M                    : 1 11 15
N                    : 53 54 55
O                    : 66 67
OL                   : 67
P                    : 50 51 52 53 54
PROGRAMA             : 0
S                    : 1 11
T                    : 3 20
V                    : 1
cte                  : 56
empty                : 4 7 12 16 18 40
endProcedure         : 11
endProgram           : 1
fillSub              : 11
final_conditional    : 21
first_conditional    : 21
for_assignation      : 22
for_conditional      : 22
for_conditional_end  : 22
for_save_conditional : 22
repeat_conditional   : 24
saveID               : 56 57
second_conditional   : 39
setType              : 3 19 20 45 60
while_final_conditional : 23
while_first_conditional : 23 24
while_second_conditional : 23

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM V M endProgram S END

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . V M endProgram S END
    (3) V -> . DIM setType Idv AS T Arr
    (4) V -> . empty
    (78) empty -> .

  ! shift/reduce conflict for DIM resolved as shift
    DIM             shift and go to state 4
    LET             reduce using rule 78 (empty -> .)
    IF              reduce using rule 78 (empty -> .)
    FOR             reduce using rule 78 (empty -> .)
    WHILE           reduce using rule 78 (empty -> .)
    REPEAT          reduce using rule 78 (empty -> .)
    GOSUB           reduce using rule 78 (empty -> .)
    INPUT           reduce using rule 78 (empty -> .)
    PRINT           reduce using rule 78 (empty -> .)
    SUBPROCEDURE    reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)

  ! DIM             [ reduce using rule 78 (empty -> .) ]

    V                              shift and go to state 3
    empty                          shift and go to state 5

state 3

    (1) PROGRAMA -> PROGRAM V . M endProgram S END
    (15) M -> . F M
    (16) M -> . empty
    (17) F -> . E F
    (18) F -> . empty
    (78) empty -> .
    (19) E -> . LET setType Idv EQUALS Ex
    (20) E -> . DIM setType Idv AS T Arr
    (21) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (22) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (23) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (24) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (25) E -> . GOSUB ID
    (26) E -> . INPUT IDEx
    (27) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    SUBPROCEDURE    reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 78 (empty -> .) ]
  ! DIM             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! GOSUB           [ reduce using rule 78 (empty -> .) ]
  ! INPUT           [ reduce using rule 78 (empty -> .) ]
  ! PRINT           [ reduce using rule 78 (empty -> .) ]

    M                              shift and go to state 6
    F                              shift and go to state 7
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 4

    (3) V -> DIM . setType Idv AS T Arr
    (43) setType -> .

    ID              reduce using rule 43 (setType -> .)

    setType                        shift and go to state 19

state 5

    (4) V -> empty .

    LET             reduce using rule 4 (V -> empty .)
    DIM             reduce using rule 4 (V -> empty .)
    IF              reduce using rule 4 (V -> empty .)
    FOR             reduce using rule 4 (V -> empty .)
    WHILE           reduce using rule 4 (V -> empty .)
    REPEAT          reduce using rule 4 (V -> empty .)
    GOSUB           reduce using rule 4 (V -> empty .)
    INPUT           reduce using rule 4 (V -> empty .)
    PRINT           reduce using rule 4 (V -> empty .)
    SUBPROCEDURE    reduce using rule 4 (V -> empty .)
    END             reduce using rule 4 (V -> empty .)


state 6

    (1) PROGRAMA -> PROGRAM V M . endProgram S END
    (2) endProgram -> .

    SUBPROCEDURE    reduce using rule 2 (endProgram -> .)
    END             reduce using rule 2 (endProgram -> .)

    endProgram                     shift and go to state 20

state 7

    (15) M -> F . M
    (15) M -> . F M
    (16) M -> . empty
    (17) F -> . E F
    (18) F -> . empty
    (78) empty -> .
    (19) E -> . LET setType Idv EQUALS Ex
    (20) E -> . DIM setType Idv AS T Arr
    (21) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (22) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (23) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (24) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (25) E -> . GOSUB ID
    (26) E -> . INPUT IDEx
    (27) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    SUBPROCEDURE    reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    RETURN          reduce using rule 78 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 78 (empty -> .) ]
  ! DIM             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! GOSUB           [ reduce using rule 78 (empty -> .) ]
  ! INPUT           [ reduce using rule 78 (empty -> .) ]
  ! PRINT           [ reduce using rule 78 (empty -> .) ]

    F                              shift and go to state 7
    M                              shift and go to state 21
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 8

    (16) M -> empty .
    (18) F -> empty .

  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 16 (M -> empty .)
  ! reduce/reduce conflict for END resolved using rule 16 (M -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (M -> empty .)
    SUBPROCEDURE    reduce using rule 16 (M -> empty .)
    END             reduce using rule 16 (M -> empty .)
    RETURN          reduce using rule 16 (M -> empty .)
    LET             reduce using rule 18 (F -> empty .)
    DIM             reduce using rule 18 (F -> empty .)
    IF              reduce using rule 18 (F -> empty .)
    FOR             reduce using rule 18 (F -> empty .)
    WHILE           reduce using rule 18 (F -> empty .)
    REPEAT          reduce using rule 18 (F -> empty .)
    GOSUB           reduce using rule 18 (F -> empty .)
    INPUT           reduce using rule 18 (F -> empty .)
    PRINT           reduce using rule 18 (F -> empty .)

  ! SUBPROCEDURE    [ reduce using rule 18 (F -> empty .) ]
  ! END             [ reduce using rule 18 (F -> empty .) ]
  ! RETURN          [ reduce using rule 18 (F -> empty .) ]


state 9

    (17) F -> E . F
    (17) F -> . E F
    (18) F -> . empty
    (19) E -> . LET setType Idv EQUALS Ex
    (20) E -> . DIM setType Idv AS T Arr
    (21) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (22) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (23) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (24) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (25) E -> . GOSUB ID
    (26) E -> . INPUT IDEx
    (27) E -> . PRINT Ex
    (78) empty -> .

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    SUBPROCEDURE    reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    RETURN          reduce using rule 78 (empty -> .)
    UNTIL           reduce using rule 78 (empty -> .)
    ELSE            reduce using rule 78 (empty -> .)
    EIF             reduce using rule 78 (empty -> .)
    WEND            reduce using rule 78 (empty -> .)
    NEXT            reduce using rule 78 (empty -> .)

  ! LET             [ reduce using rule 78 (empty -> .) ]
  ! DIM             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! GOSUB           [ reduce using rule 78 (empty -> .) ]
  ! INPUT           [ reduce using rule 78 (empty -> .) ]
  ! PRINT           [ reduce using rule 78 (empty -> .) ]

    E                              shift and go to state 9
    F                              shift and go to state 22
    empty                          shift and go to state 23

state 10

    (19) E -> LET . setType Idv EQUALS Ex
    (43) setType -> .

    ID              reduce using rule 43 (setType -> .)

    setType                        shift and go to state 24

state 11

    (20) E -> DIM . setType Idv AS T Arr
    (43) setType -> .

    ID              reduce using rule 43 (setType -> .)

    setType                        shift and go to state 25

state 12

    (21) E -> IF . EL THEN first_conditional F Esf EIF final_conditional
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 26

state 13

    (22) E -> FOR . ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end

    ID              shift and go to state 30


state 14

    (23) E -> WHILE . while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (33) while_first_conditional -> .

    TRUE            reduce using rule 33 (while_first_conditional -> .)
    FALSE           reduce using rule 33 (while_first_conditional -> .)
    OPENPAR         reduce using rule 33 (while_first_conditional -> .)

    while_first_conditional        shift and go to state 31

state 15

    (24) E -> REPEAT . while_first_conditional F UNTIL EL repeat_conditional
    (33) while_first_conditional -> .

    LET             reduce using rule 33 (while_first_conditional -> .)
    DIM             reduce using rule 33 (while_first_conditional -> .)
    IF              reduce using rule 33 (while_first_conditional -> .)
    FOR             reduce using rule 33 (while_first_conditional -> .)
    WHILE           reduce using rule 33 (while_first_conditional -> .)
    REPEAT          reduce using rule 33 (while_first_conditional -> .)
    GOSUB           reduce using rule 33 (while_first_conditional -> .)
    INPUT           reduce using rule 33 (while_first_conditional -> .)
    PRINT           reduce using rule 33 (while_first_conditional -> .)
    UNTIL           reduce using rule 33 (while_first_conditional -> .)

    while_first_conditional        shift and go to state 32

state 16

    (25) E -> GOSUB . ID

    ID              shift and go to state 33


state 17

    (26) E -> INPUT . IDEx
    (44) IDEx -> . ID
    (45) IDEx -> . ID OPENBRACKET setType Idv CLOSINGBRACKET

    ID              shift and go to state 35

    IDEx                           shift and go to state 34

state 18

    (27) E -> PRINT . Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    Ex                             shift and go to state 36
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 19

    (3) V -> DIM setType . Idv AS T Arr
    (41) Idv -> . ID COMA Idv
    (42) Idv -> . ID

    ID              shift and go to state 47

    Idv                            shift and go to state 46

state 20

    (1) PROGRAMA -> PROGRAM V M endProgram . S END
    (11) S -> . SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S
    (12) S -> . empty
    (78) empty -> .

    SUBPROCEDURE    shift and go to state 49
    END             reduce using rule 78 (empty -> .)

    S                              shift and go to state 48
    empty                          shift and go to state 50

state 21

    (15) M -> F M .

    SUBPROCEDURE    reduce using rule 15 (M -> F M .)
    END             reduce using rule 15 (M -> F M .)
    RETURN          reduce using rule 15 (M -> F M .)


state 22

    (17) F -> E F .

    LET             reduce using rule 17 (F -> E F .)
    DIM             reduce using rule 17 (F -> E F .)
    IF              reduce using rule 17 (F -> E F .)
    FOR             reduce using rule 17 (F -> E F .)
    WHILE           reduce using rule 17 (F -> E F .)
    REPEAT          reduce using rule 17 (F -> E F .)
    GOSUB           reduce using rule 17 (F -> E F .)
    INPUT           reduce using rule 17 (F -> E F .)
    PRINT           reduce using rule 17 (F -> E F .)
    SUBPROCEDURE    reduce using rule 17 (F -> E F .)
    END             reduce using rule 17 (F -> E F .)
    RETURN          reduce using rule 17 (F -> E F .)
    UNTIL           reduce using rule 17 (F -> E F .)
    ELSE            reduce using rule 17 (F -> E F .)
    EIF             reduce using rule 17 (F -> E F .)
    WEND            reduce using rule 17 (F -> E F .)
    NEXT            reduce using rule 17 (F -> E F .)


state 23

    (18) F -> empty .

    LET             reduce using rule 18 (F -> empty .)
    DIM             reduce using rule 18 (F -> empty .)
    IF              reduce using rule 18 (F -> empty .)
    FOR             reduce using rule 18 (F -> empty .)
    WHILE           reduce using rule 18 (F -> empty .)
    REPEAT          reduce using rule 18 (F -> empty .)
    GOSUB           reduce using rule 18 (F -> empty .)
    INPUT           reduce using rule 18 (F -> empty .)
    PRINT           reduce using rule 18 (F -> empty .)
    SUBPROCEDURE    reduce using rule 18 (F -> empty .)
    END             reduce using rule 18 (F -> empty .)
    RETURN          reduce using rule 18 (F -> empty .)
    UNTIL           reduce using rule 18 (F -> empty .)
    ELSE            reduce using rule 18 (F -> empty .)
    EIF             reduce using rule 18 (F -> empty .)
    WEND            reduce using rule 18 (F -> empty .)
    NEXT            reduce using rule 18 (F -> empty .)


state 24

    (19) E -> LET setType . Idv EQUALS Ex
    (41) Idv -> . ID COMA Idv
    (42) Idv -> . ID

    ID              shift and go to state 47

    Idv                            shift and go to state 51

state 25

    (20) E -> DIM setType . Idv AS T Arr
    (41) Idv -> . ID COMA Idv
    (42) Idv -> . ID

    ID              shift and go to state 47

    Idv                            shift and go to state 52

state 26

    (21) E -> IF EL . THEN first_conditional F Esf EIF final_conditional

    THEN            shift and go to state 53


state 27

    (64) EL -> TRUE .

    THEN            reduce using rule 64 (EL -> TRUE .)
    LET             reduce using rule 64 (EL -> TRUE .)
    DIM             reduce using rule 64 (EL -> TRUE .)
    IF              reduce using rule 64 (EL -> TRUE .)
    FOR             reduce using rule 64 (EL -> TRUE .)
    WHILE           reduce using rule 64 (EL -> TRUE .)
    REPEAT          reduce using rule 64 (EL -> TRUE .)
    GOSUB           reduce using rule 64 (EL -> TRUE .)
    INPUT           reduce using rule 64 (EL -> TRUE .)
    PRINT           reduce using rule 64 (EL -> TRUE .)
    SUBPROCEDURE    reduce using rule 64 (EL -> TRUE .)
    END             reduce using rule 64 (EL -> TRUE .)
    RETURN          reduce using rule 64 (EL -> TRUE .)
    UNTIL           reduce using rule 64 (EL -> TRUE .)
    ELSE            reduce using rule 64 (EL -> TRUE .)
    EIF             reduce using rule 64 (EL -> TRUE .)
    WEND            reduce using rule 64 (EL -> TRUE .)
    NEXT            reduce using rule 64 (EL -> TRUE .)
    GREATHER        reduce using rule 64 (EL -> TRUE .)
    GREATHEREQUAL   reduce using rule 64 (EL -> TRUE .)
    SMALLER         reduce using rule 64 (EL -> TRUE .)
    SMALLEREQUAL    reduce using rule 64 (EL -> TRUE .)
    NOTEQUAL        reduce using rule 64 (EL -> TRUE .)
    EQUALTO         reduce using rule 64 (EL -> TRUE .)
    error           reduce using rule 64 (EL -> TRUE .)
    DO              reduce using rule 64 (EL -> TRUE .)
    CLOSINGPAR      reduce using rule 64 (EL -> TRUE .)


state 28

    (65) EL -> FALSE .

    THEN            reduce using rule 65 (EL -> FALSE .)
    LET             reduce using rule 65 (EL -> FALSE .)
    DIM             reduce using rule 65 (EL -> FALSE .)
    IF              reduce using rule 65 (EL -> FALSE .)
    FOR             reduce using rule 65 (EL -> FALSE .)
    WHILE           reduce using rule 65 (EL -> FALSE .)
    REPEAT          reduce using rule 65 (EL -> FALSE .)
    GOSUB           reduce using rule 65 (EL -> FALSE .)
    INPUT           reduce using rule 65 (EL -> FALSE .)
    PRINT           reduce using rule 65 (EL -> FALSE .)
    SUBPROCEDURE    reduce using rule 65 (EL -> FALSE .)
    END             reduce using rule 65 (EL -> FALSE .)
    RETURN          reduce using rule 65 (EL -> FALSE .)
    UNTIL           reduce using rule 65 (EL -> FALSE .)
    ELSE            reduce using rule 65 (EL -> FALSE .)
    EIF             reduce using rule 65 (EL -> FALSE .)
    WEND            reduce using rule 65 (EL -> FALSE .)
    NEXT            reduce using rule 65 (EL -> FALSE .)
    GREATHER        reduce using rule 65 (EL -> FALSE .)
    GREATHEREQUAL   reduce using rule 65 (EL -> FALSE .)
    SMALLER         reduce using rule 65 (EL -> FALSE .)
    SMALLEREQUAL    reduce using rule 65 (EL -> FALSE .)
    NOTEQUAL        reduce using rule 65 (EL -> FALSE .)
    EQUALTO         reduce using rule 65 (EL -> FALSE .)
    error           reduce using rule 65 (EL -> FALSE .)
    DO              reduce using rule 65 (EL -> FALSE .)
    CLOSINGPAR      reduce using rule 65 (EL -> FALSE .)


state 29

    (66) EL -> OPENPAR . O CLOSINGPAR
    (67) EL -> OPENPAR . O CLOSINGPAR OL EL
    (71) O -> . Ex GREATHER Ex
    (72) O -> . Ex GREATHEREQUAL Ex
    (73) O -> . Ex SMALLER Ex
    (74) O -> . Ex SMALLEREQUAL Ex
    (75) O -> . Ex NOTEQUAL Ex
    (76) O -> . Ex EQUALTO Ex
    (77) O -> . Ex error Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    O                              shift and go to state 54
    EL                             shift and go to state 38
    Ex                             shift and go to state 55
    EA                             shift and go to state 37
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 30

    (22) E -> FOR ID . EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end

    EQUALS          shift and go to state 56


state 31

    (23) E -> WHILE while_first_conditional . EL DO while_second_conditional F WEND while_final_conditional
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 57

state 32

    (24) E -> REPEAT while_first_conditional . F UNTIL EL repeat_conditional
    (17) F -> . E F
    (18) F -> . empty
    (19) E -> . LET setType Idv EQUALS Ex
    (20) E -> . DIM setType Idv AS T Arr
    (21) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (22) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (23) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (24) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (25) E -> . GOSUB ID
    (26) E -> . INPUT IDEx
    (27) E -> . PRINT Ex
    (78) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    UNTIL           reduce using rule 78 (empty -> .)

    F                              shift and go to state 58
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 33

    (25) E -> GOSUB ID .

    LET             reduce using rule 25 (E -> GOSUB ID .)
    DIM             reduce using rule 25 (E -> GOSUB ID .)
    IF              reduce using rule 25 (E -> GOSUB ID .)
    FOR             reduce using rule 25 (E -> GOSUB ID .)
    WHILE           reduce using rule 25 (E -> GOSUB ID .)
    REPEAT          reduce using rule 25 (E -> GOSUB ID .)
    GOSUB           reduce using rule 25 (E -> GOSUB ID .)
    INPUT           reduce using rule 25 (E -> GOSUB ID .)
    PRINT           reduce using rule 25 (E -> GOSUB ID .)
    SUBPROCEDURE    reduce using rule 25 (E -> GOSUB ID .)
    END             reduce using rule 25 (E -> GOSUB ID .)
    RETURN          reduce using rule 25 (E -> GOSUB ID .)
    UNTIL           reduce using rule 25 (E -> GOSUB ID .)
    ELSE            reduce using rule 25 (E -> GOSUB ID .)
    EIF             reduce using rule 25 (E -> GOSUB ID .)
    WEND            reduce using rule 25 (E -> GOSUB ID .)
    NEXT            reduce using rule 25 (E -> GOSUB ID .)


state 34

    (26) E -> INPUT IDEx .

    LET             reduce using rule 26 (E -> INPUT IDEx .)
    DIM             reduce using rule 26 (E -> INPUT IDEx .)
    IF              reduce using rule 26 (E -> INPUT IDEx .)
    FOR             reduce using rule 26 (E -> INPUT IDEx .)
    WHILE           reduce using rule 26 (E -> INPUT IDEx .)
    REPEAT          reduce using rule 26 (E -> INPUT IDEx .)
    GOSUB           reduce using rule 26 (E -> INPUT IDEx .)
    INPUT           reduce using rule 26 (E -> INPUT IDEx .)
    PRINT           reduce using rule 26 (E -> INPUT IDEx .)
    SUBPROCEDURE    reduce using rule 26 (E -> INPUT IDEx .)
    END             reduce using rule 26 (E -> INPUT IDEx .)
    RETURN          reduce using rule 26 (E -> INPUT IDEx .)
    UNTIL           reduce using rule 26 (E -> INPUT IDEx .)
    ELSE            reduce using rule 26 (E -> INPUT IDEx .)
    EIF             reduce using rule 26 (E -> INPUT IDEx .)
    WEND            reduce using rule 26 (E -> INPUT IDEx .)
    NEXT            reduce using rule 26 (E -> INPUT IDEx .)


state 35

    (44) IDEx -> ID .
    (45) IDEx -> ID . OPENBRACKET setType Idv CLOSINGBRACKET

    LET             reduce using rule 44 (IDEx -> ID .)
    DIM             reduce using rule 44 (IDEx -> ID .)
    IF              reduce using rule 44 (IDEx -> ID .)
    FOR             reduce using rule 44 (IDEx -> ID .)
    WHILE           reduce using rule 44 (IDEx -> ID .)
    REPEAT          reduce using rule 44 (IDEx -> ID .)
    GOSUB           reduce using rule 44 (IDEx -> ID .)
    INPUT           reduce using rule 44 (IDEx -> ID .)
    PRINT           reduce using rule 44 (IDEx -> ID .)
    SUBPROCEDURE    reduce using rule 44 (IDEx -> ID .)
    END             reduce using rule 44 (IDEx -> ID .)
    RETURN          reduce using rule 44 (IDEx -> ID .)
    UNTIL           reduce using rule 44 (IDEx -> ID .)
    ELSE            reduce using rule 44 (IDEx -> ID .)
    EIF             reduce using rule 44 (IDEx -> ID .)
    WEND            reduce using rule 44 (IDEx -> ID .)
    NEXT            reduce using rule 44 (IDEx -> ID .)
    OPENBRACKET     shift and go to state 59


state 36

    (27) E -> PRINT Ex .

    LET             reduce using rule 27 (E -> PRINT Ex .)
    DIM             reduce using rule 27 (E -> PRINT Ex .)
    IF              reduce using rule 27 (E -> PRINT Ex .)
    FOR             reduce using rule 27 (E -> PRINT Ex .)
    WHILE           reduce using rule 27 (E -> PRINT Ex .)
    REPEAT          reduce using rule 27 (E -> PRINT Ex .)
    GOSUB           reduce using rule 27 (E -> PRINT Ex .)
    INPUT           reduce using rule 27 (E -> PRINT Ex .)
    PRINT           reduce using rule 27 (E -> PRINT Ex .)
    SUBPROCEDURE    reduce using rule 27 (E -> PRINT Ex .)
    END             reduce using rule 27 (E -> PRINT Ex .)
    RETURN          reduce using rule 27 (E -> PRINT Ex .)
    UNTIL           reduce using rule 27 (E -> PRINT Ex .)
    ELSE            reduce using rule 27 (E -> PRINT Ex .)
    EIF             reduce using rule 27 (E -> PRINT Ex .)
    WEND            reduce using rule 27 (E -> PRINT Ex .)
    NEXT            reduce using rule 27 (E -> PRINT Ex .)


state 37

    (46) Ex -> EA .
    (50) EA -> EA . PLUS P
    (51) EA -> EA . MINUS P

    LET             reduce using rule 46 (Ex -> EA .)
    DIM             reduce using rule 46 (Ex -> EA .)
    IF              reduce using rule 46 (Ex -> EA .)
    FOR             reduce using rule 46 (Ex -> EA .)
    WHILE           reduce using rule 46 (Ex -> EA .)
    REPEAT          reduce using rule 46 (Ex -> EA .)
    GOSUB           reduce using rule 46 (Ex -> EA .)
    INPUT           reduce using rule 46 (Ex -> EA .)
    PRINT           reduce using rule 46 (Ex -> EA .)
    SUBPROCEDURE    reduce using rule 46 (Ex -> EA .)
    END             reduce using rule 46 (Ex -> EA .)
    RETURN          reduce using rule 46 (Ex -> EA .)
    UNTIL           reduce using rule 46 (Ex -> EA .)
    ELSE            reduce using rule 46 (Ex -> EA .)
    EIF             reduce using rule 46 (Ex -> EA .)
    WEND            reduce using rule 46 (Ex -> EA .)
    NEXT            reduce using rule 46 (Ex -> EA .)
    GREATHER        reduce using rule 46 (Ex -> EA .)
    GREATHEREQUAL   reduce using rule 46 (Ex -> EA .)
    SMALLER         reduce using rule 46 (Ex -> EA .)
    SMALLEREQUAL    reduce using rule 46 (Ex -> EA .)
    NOTEQUAL        reduce using rule 46 (Ex -> EA .)
    EQUALTO         reduce using rule 46 (Ex -> EA .)
    error           reduce using rule 46 (Ex -> EA .)
    CLOSINGPAR      reduce using rule 46 (Ex -> EA .)
    DO              reduce using rule 46 (Ex -> EA .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61


state 38

    (47) Ex -> EL .

    LET             reduce using rule 47 (Ex -> EL .)
    DIM             reduce using rule 47 (Ex -> EL .)
    IF              reduce using rule 47 (Ex -> EL .)
    FOR             reduce using rule 47 (Ex -> EL .)
    WHILE           reduce using rule 47 (Ex -> EL .)
    REPEAT          reduce using rule 47 (Ex -> EL .)
    GOSUB           reduce using rule 47 (Ex -> EL .)
    INPUT           reduce using rule 47 (Ex -> EL .)
    PRINT           reduce using rule 47 (Ex -> EL .)
    SUBPROCEDURE    reduce using rule 47 (Ex -> EL .)
    END             reduce using rule 47 (Ex -> EL .)
    RETURN          reduce using rule 47 (Ex -> EL .)
    UNTIL           reduce using rule 47 (Ex -> EL .)
    ELSE            reduce using rule 47 (Ex -> EL .)
    EIF             reduce using rule 47 (Ex -> EL .)
    WEND            reduce using rule 47 (Ex -> EL .)
    NEXT            reduce using rule 47 (Ex -> EL .)
    GREATHER        reduce using rule 47 (Ex -> EL .)
    GREATHEREQUAL   reduce using rule 47 (Ex -> EL .)
    SMALLER         reduce using rule 47 (Ex -> EL .)
    SMALLEREQUAL    reduce using rule 47 (Ex -> EL .)
    NOTEQUAL        reduce using rule 47 (Ex -> EL .)
    EQUALTO         reduce using rule 47 (Ex -> EL .)
    error           reduce using rule 47 (Ex -> EL .)
    CLOSINGPAR      reduce using rule 47 (Ex -> EL .)
    DO              reduce using rule 47 (Ex -> EL .)


state 39

    (48) Ex -> ID .
    (57) N -> ID . saveID
    (59) N -> ID . OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> ID . OPENBRACKET setType Idv CLOSINGBRACKET
    (61) saveID -> .

  ! reduce/reduce conflict for LET resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for DIM resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for REPEAT resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for GOSUB resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for INPUT resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for SUBPROCEDURE resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for END resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for UNTIL resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for EIF resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for WEND resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for NEXT resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for GREATHER resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for SMALLEREQUAL resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for EQUALTO resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for error resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for CLOSINGPAR resolved using rule 48 (Ex -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 48 (Ex -> ID .)
    LET             reduce using rule 48 (Ex -> ID .)
    DIM             reduce using rule 48 (Ex -> ID .)
    IF              reduce using rule 48 (Ex -> ID .)
    FOR             reduce using rule 48 (Ex -> ID .)
    WHILE           reduce using rule 48 (Ex -> ID .)
    REPEAT          reduce using rule 48 (Ex -> ID .)
    GOSUB           reduce using rule 48 (Ex -> ID .)
    INPUT           reduce using rule 48 (Ex -> ID .)
    PRINT           reduce using rule 48 (Ex -> ID .)
    SUBPROCEDURE    reduce using rule 48 (Ex -> ID .)
    END             reduce using rule 48 (Ex -> ID .)
    RETURN          reduce using rule 48 (Ex -> ID .)
    UNTIL           reduce using rule 48 (Ex -> ID .)
    ELSE            reduce using rule 48 (Ex -> ID .)
    EIF             reduce using rule 48 (Ex -> ID .)
    WEND            reduce using rule 48 (Ex -> ID .)
    NEXT            reduce using rule 48 (Ex -> ID .)
    GREATHER        reduce using rule 48 (Ex -> ID .)
    GREATHEREQUAL   reduce using rule 48 (Ex -> ID .)
    SMALLER         reduce using rule 48 (Ex -> ID .)
    SMALLEREQUAL    reduce using rule 48 (Ex -> ID .)
    NOTEQUAL        reduce using rule 48 (Ex -> ID .)
    EQUALTO         reduce using rule 48 (Ex -> ID .)
    error           reduce using rule 48 (Ex -> ID .)
    CLOSINGPAR      reduce using rule 48 (Ex -> ID .)
    DO              reduce using rule 48 (Ex -> ID .)
    OPENBRACKET     shift and go to state 63
    MULTIPLY        reduce using rule 61 (saveID -> .)
    DIVIDE          reduce using rule 61 (saveID -> .)
    PLUS            reduce using rule 61 (saveID -> .)
    MINUS           reduce using rule 61 (saveID -> .)

  ! LET             [ reduce using rule 61 (saveID -> .) ]
  ! DIM             [ reduce using rule 61 (saveID -> .) ]
  ! IF              [ reduce using rule 61 (saveID -> .) ]
  ! FOR             [ reduce using rule 61 (saveID -> .) ]
  ! WHILE           [ reduce using rule 61 (saveID -> .) ]
  ! REPEAT          [ reduce using rule 61 (saveID -> .) ]
  ! GOSUB           [ reduce using rule 61 (saveID -> .) ]
  ! INPUT           [ reduce using rule 61 (saveID -> .) ]
  ! PRINT           [ reduce using rule 61 (saveID -> .) ]
  ! SUBPROCEDURE    [ reduce using rule 61 (saveID -> .) ]
  ! END             [ reduce using rule 61 (saveID -> .) ]
  ! RETURN          [ reduce using rule 61 (saveID -> .) ]
  ! UNTIL           [ reduce using rule 61 (saveID -> .) ]
  ! ELSE            [ reduce using rule 61 (saveID -> .) ]
  ! EIF             [ reduce using rule 61 (saveID -> .) ]
  ! WEND            [ reduce using rule 61 (saveID -> .) ]
  ! NEXT            [ reduce using rule 61 (saveID -> .) ]
  ! GREATHER        [ reduce using rule 61 (saveID -> .) ]
  ! GREATHEREQUAL   [ reduce using rule 61 (saveID -> .) ]
  ! SMALLER         [ reduce using rule 61 (saveID -> .) ]
  ! SMALLEREQUAL    [ reduce using rule 61 (saveID -> .) ]
  ! NOTEQUAL        [ reduce using rule 61 (saveID -> .) ]
  ! EQUALTO         [ reduce using rule 61 (saveID -> .) ]
  ! error           [ reduce using rule 61 (saveID -> .) ]
  ! CLOSINGPAR      [ reduce using rule 61 (saveID -> .) ]
  ! DO              [ reduce using rule 61 (saveID -> .) ]

    saveID                         shift and go to state 62

state 40

    (52) EA -> P .
    (53) P -> P . MULTIPLY N
    (54) P -> P . DIVIDE N

    PLUS            reduce using rule 52 (EA -> P .)
    MINUS           reduce using rule 52 (EA -> P .)
    LET             reduce using rule 52 (EA -> P .)
    DIM             reduce using rule 52 (EA -> P .)
    IF              reduce using rule 52 (EA -> P .)
    FOR             reduce using rule 52 (EA -> P .)
    WHILE           reduce using rule 52 (EA -> P .)
    REPEAT          reduce using rule 52 (EA -> P .)
    GOSUB           reduce using rule 52 (EA -> P .)
    INPUT           reduce using rule 52 (EA -> P .)
    PRINT           reduce using rule 52 (EA -> P .)
    SUBPROCEDURE    reduce using rule 52 (EA -> P .)
    END             reduce using rule 52 (EA -> P .)
    RETURN          reduce using rule 52 (EA -> P .)
    UNTIL           reduce using rule 52 (EA -> P .)
    ELSE            reduce using rule 52 (EA -> P .)
    EIF             reduce using rule 52 (EA -> P .)
    WEND            reduce using rule 52 (EA -> P .)
    NEXT            reduce using rule 52 (EA -> P .)
    GREATHER        reduce using rule 52 (EA -> P .)
    GREATHEREQUAL   reduce using rule 52 (EA -> P .)
    SMALLER         reduce using rule 52 (EA -> P .)
    SMALLEREQUAL    reduce using rule 52 (EA -> P .)
    NOTEQUAL        reduce using rule 52 (EA -> P .)
    EQUALTO         reduce using rule 52 (EA -> P .)
    error           reduce using rule 52 (EA -> P .)
    CLOSINGPAR      reduce using rule 52 (EA -> P .)
    TO              reduce using rule 52 (EA -> P .)
    CLOSINGBRACKET  reduce using rule 52 (EA -> P .)
    DO              reduce using rule 52 (EA -> P .)
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65


state 41

    (66) EL -> OPENPAR . O CLOSINGPAR
    (67) EL -> OPENPAR . O CLOSINGPAR OL EL
    (58) N -> OPENPAR . EA CLOSINGPAR
    (71) O -> . Ex GREATHER Ex
    (72) O -> . Ex GREATHEREQUAL Ex
    (73) O -> . Ex SMALLER Ex
    (74) O -> . Ex SMALLEREQUAL Ex
    (75) O -> . Ex NOTEQUAL Ex
    (76) O -> . Ex EQUALTO Ex
    (77) O -> . Ex error Ex
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    O                              shift and go to state 54
    EL                             shift and go to state 38
    EA                             shift and go to state 66
    Ex                             shift and go to state 55
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 42

    (55) P -> N .

    MULTIPLY        reduce using rule 55 (P -> N .)
    DIVIDE          reduce using rule 55 (P -> N .)
    PLUS            reduce using rule 55 (P -> N .)
    MINUS           reduce using rule 55 (P -> N .)
    LET             reduce using rule 55 (P -> N .)
    DIM             reduce using rule 55 (P -> N .)
    IF              reduce using rule 55 (P -> N .)
    FOR             reduce using rule 55 (P -> N .)
    WHILE           reduce using rule 55 (P -> N .)
    REPEAT          reduce using rule 55 (P -> N .)
    GOSUB           reduce using rule 55 (P -> N .)
    INPUT           reduce using rule 55 (P -> N .)
    PRINT           reduce using rule 55 (P -> N .)
    SUBPROCEDURE    reduce using rule 55 (P -> N .)
    END             reduce using rule 55 (P -> N .)
    RETURN          reduce using rule 55 (P -> N .)
    UNTIL           reduce using rule 55 (P -> N .)
    ELSE            reduce using rule 55 (P -> N .)
    EIF             reduce using rule 55 (P -> N .)
    WEND            reduce using rule 55 (P -> N .)
    NEXT            reduce using rule 55 (P -> N .)
    GREATHER        reduce using rule 55 (P -> N .)
    GREATHEREQUAL   reduce using rule 55 (P -> N .)
    SMALLER         reduce using rule 55 (P -> N .)
    SMALLEREQUAL    reduce using rule 55 (P -> N .)
    NOTEQUAL        reduce using rule 55 (P -> N .)
    EQUALTO         reduce using rule 55 (P -> N .)
    error           reduce using rule 55 (P -> N .)
    CLOSINGPAR      reduce using rule 55 (P -> N .)
    TO              reduce using rule 55 (P -> N .)
    CLOSINGBRACKET  reduce using rule 55 (P -> N .)
    DO              reduce using rule 55 (P -> N .)


state 43

    (56) N -> cte . saveID
    (61) saveID -> .

    MULTIPLY        reduce using rule 61 (saveID -> .)
    DIVIDE          reduce using rule 61 (saveID -> .)
    PLUS            reduce using rule 61 (saveID -> .)
    MINUS           reduce using rule 61 (saveID -> .)
    LET             reduce using rule 61 (saveID -> .)
    DIM             reduce using rule 61 (saveID -> .)
    IF              reduce using rule 61 (saveID -> .)
    FOR             reduce using rule 61 (saveID -> .)
    WHILE           reduce using rule 61 (saveID -> .)
    REPEAT          reduce using rule 61 (saveID -> .)
    GOSUB           reduce using rule 61 (saveID -> .)
    INPUT           reduce using rule 61 (saveID -> .)
    PRINT           reduce using rule 61 (saveID -> .)
    SUBPROCEDURE    reduce using rule 61 (saveID -> .)
    END             reduce using rule 61 (saveID -> .)
    RETURN          reduce using rule 61 (saveID -> .)
    UNTIL           reduce using rule 61 (saveID -> .)
    ELSE            reduce using rule 61 (saveID -> .)
    EIF             reduce using rule 61 (saveID -> .)
    WEND            reduce using rule 61 (saveID -> .)
    NEXT            reduce using rule 61 (saveID -> .)
    GREATHER        reduce using rule 61 (saveID -> .)
    GREATHEREQUAL   reduce using rule 61 (saveID -> .)
    SMALLER         reduce using rule 61 (saveID -> .)
    SMALLEREQUAL    reduce using rule 61 (saveID -> .)
    NOTEQUAL        reduce using rule 61 (saveID -> .)
    EQUALTO         reduce using rule 61 (saveID -> .)
    error           reduce using rule 61 (saveID -> .)
    CLOSINGPAR      reduce using rule 61 (saveID -> .)
    TO              reduce using rule 61 (saveID -> .)
    CLOSINGBRACKET  reduce using rule 61 (saveID -> .)
    DO              reduce using rule 61 (saveID -> .)

    saveID                         shift and go to state 67

state 44

    (62) cte -> INTVAL .

    MULTIPLY        reduce using rule 62 (cte -> INTVAL .)
    DIVIDE          reduce using rule 62 (cte -> INTVAL .)
    PLUS            reduce using rule 62 (cte -> INTVAL .)
    MINUS           reduce using rule 62 (cte -> INTVAL .)
    LET             reduce using rule 62 (cte -> INTVAL .)
    DIM             reduce using rule 62 (cte -> INTVAL .)
    IF              reduce using rule 62 (cte -> INTVAL .)
    FOR             reduce using rule 62 (cte -> INTVAL .)
    WHILE           reduce using rule 62 (cte -> INTVAL .)
    REPEAT          reduce using rule 62 (cte -> INTVAL .)
    GOSUB           reduce using rule 62 (cte -> INTVAL .)
    INPUT           reduce using rule 62 (cte -> INTVAL .)
    PRINT           reduce using rule 62 (cte -> INTVAL .)
    SUBPROCEDURE    reduce using rule 62 (cte -> INTVAL .)
    END             reduce using rule 62 (cte -> INTVAL .)
    RETURN          reduce using rule 62 (cte -> INTVAL .)
    UNTIL           reduce using rule 62 (cte -> INTVAL .)
    ELSE            reduce using rule 62 (cte -> INTVAL .)
    EIF             reduce using rule 62 (cte -> INTVAL .)
    WEND            reduce using rule 62 (cte -> INTVAL .)
    NEXT            reduce using rule 62 (cte -> INTVAL .)
    GREATHER        reduce using rule 62 (cte -> INTVAL .)
    GREATHEREQUAL   reduce using rule 62 (cte -> INTVAL .)
    SMALLER         reduce using rule 62 (cte -> INTVAL .)
    SMALLEREQUAL    reduce using rule 62 (cte -> INTVAL .)
    NOTEQUAL        reduce using rule 62 (cte -> INTVAL .)
    EQUALTO         reduce using rule 62 (cte -> INTVAL .)
    error           reduce using rule 62 (cte -> INTVAL .)
    CLOSINGPAR      reduce using rule 62 (cte -> INTVAL .)
    TO              reduce using rule 62 (cte -> INTVAL .)
    CLOSINGBRACKET  reduce using rule 62 (cte -> INTVAL .)
    DO              reduce using rule 62 (cte -> INTVAL .)


state 45

    (63) cte -> FLOATVAL .

    MULTIPLY        reduce using rule 63 (cte -> FLOATVAL .)
    DIVIDE          reduce using rule 63 (cte -> FLOATVAL .)
    PLUS            reduce using rule 63 (cte -> FLOATVAL .)
    MINUS           reduce using rule 63 (cte -> FLOATVAL .)
    LET             reduce using rule 63 (cte -> FLOATVAL .)
    DIM             reduce using rule 63 (cte -> FLOATVAL .)
    IF              reduce using rule 63 (cte -> FLOATVAL .)
    FOR             reduce using rule 63 (cte -> FLOATVAL .)
    WHILE           reduce using rule 63 (cte -> FLOATVAL .)
    REPEAT          reduce using rule 63 (cte -> FLOATVAL .)
    GOSUB           reduce using rule 63 (cte -> FLOATVAL .)
    INPUT           reduce using rule 63 (cte -> FLOATVAL .)
    PRINT           reduce using rule 63 (cte -> FLOATVAL .)
    SUBPROCEDURE    reduce using rule 63 (cte -> FLOATVAL .)
    END             reduce using rule 63 (cte -> FLOATVAL .)
    RETURN          reduce using rule 63 (cte -> FLOATVAL .)
    UNTIL           reduce using rule 63 (cte -> FLOATVAL .)
    ELSE            reduce using rule 63 (cte -> FLOATVAL .)
    EIF             reduce using rule 63 (cte -> FLOATVAL .)
    WEND            reduce using rule 63 (cte -> FLOATVAL .)
    NEXT            reduce using rule 63 (cte -> FLOATVAL .)
    GREATHER        reduce using rule 63 (cte -> FLOATVAL .)
    GREATHEREQUAL   reduce using rule 63 (cte -> FLOATVAL .)
    SMALLER         reduce using rule 63 (cte -> FLOATVAL .)
    SMALLEREQUAL    reduce using rule 63 (cte -> FLOATVAL .)
    NOTEQUAL        reduce using rule 63 (cte -> FLOATVAL .)
    EQUALTO         reduce using rule 63 (cte -> FLOATVAL .)
    error           reduce using rule 63 (cte -> FLOATVAL .)
    CLOSINGPAR      reduce using rule 63 (cte -> FLOATVAL .)
    TO              reduce using rule 63 (cte -> FLOATVAL .)
    CLOSINGBRACKET  reduce using rule 63 (cte -> FLOATVAL .)
    DO              reduce using rule 63 (cte -> FLOATVAL .)


state 46

    (3) V -> DIM setType Idv . AS T Arr

    AS              shift and go to state 68


state 47

    (41) Idv -> ID . COMA Idv
    (42) Idv -> ID .

    COMA            shift and go to state 69
    AS              reduce using rule 42 (Idv -> ID .)
    EQUALS          reduce using rule 42 (Idv -> ID .)
    CLOSINGBRACKET  reduce using rule 42 (Idv -> ID .)


state 48

    (1) PROGRAMA -> PROGRAM V M endProgram S . END

    END             shift and go to state 70


state 49

    (11) S -> SUBPROCEDURE . ID fillSub TWOPOINTS M RETURN endProcedure S

    ID              shift and go to state 71


state 50

    (12) S -> empty .

    END             reduce using rule 12 (S -> empty .)


state 51

    (19) E -> LET setType Idv . EQUALS Ex

    EQUALS          shift and go to state 72


state 52

    (20) E -> DIM setType Idv . AS T Arr

    AS              shift and go to state 73


state 53

    (21) E -> IF EL THEN . first_conditional F Esf EIF final_conditional
    (36) first_conditional -> .

    LET             reduce using rule 36 (first_conditional -> .)
    DIM             reduce using rule 36 (first_conditional -> .)
    IF              reduce using rule 36 (first_conditional -> .)
    FOR             reduce using rule 36 (first_conditional -> .)
    WHILE           reduce using rule 36 (first_conditional -> .)
    REPEAT          reduce using rule 36 (first_conditional -> .)
    GOSUB           reduce using rule 36 (first_conditional -> .)
    INPUT           reduce using rule 36 (first_conditional -> .)
    PRINT           reduce using rule 36 (first_conditional -> .)
    ELSE            reduce using rule 36 (first_conditional -> .)
    EIF             reduce using rule 36 (first_conditional -> .)

    first_conditional              shift and go to state 74

state 54

    (66) EL -> OPENPAR O . CLOSINGPAR
    (67) EL -> OPENPAR O . CLOSINGPAR OL EL

    CLOSINGPAR      shift and go to state 75


state 55

    (71) O -> Ex . GREATHER Ex
    (72) O -> Ex . GREATHEREQUAL Ex
    (73) O -> Ex . SMALLER Ex
    (74) O -> Ex . SMALLEREQUAL Ex
    (75) O -> Ex . NOTEQUAL Ex
    (76) O -> Ex . EQUALTO Ex
    (77) O -> Ex . error Ex

    GREATHER        shift and go to state 76
    GREATHEREQUAL   shift and go to state 77
    SMALLER         shift and go to state 78
    SMALLEREQUAL    shift and go to state 79
    NOTEQUAL        shift and go to state 80
    EQUALTO         shift and go to state 81
    error           shift and go to state 82


state 56

    (22) E -> FOR ID EQUALS . EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 83
    OPENPAR         shift and go to state 85
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    EA                             shift and go to state 84
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 57

    (23) E -> WHILE while_first_conditional EL . DO while_second_conditional F WEND while_final_conditional

    DO              shift and go to state 86


state 58

    (24) E -> REPEAT while_first_conditional F . UNTIL EL repeat_conditional

    UNTIL           shift and go to state 87


state 59

    (45) IDEx -> ID OPENBRACKET . setType Idv CLOSINGBRACKET
    (43) setType -> .

    ID              reduce using rule 43 (setType -> .)

    setType                        shift and go to state 88

state 60

    (50) EA -> EA PLUS . P
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 83
    OPENPAR         shift and go to state 85
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    P                              shift and go to state 89
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 61

    (51) EA -> EA MINUS . P
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 83
    OPENPAR         shift and go to state 85
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    P                              shift and go to state 90
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 62

    (57) N -> ID saveID .

    MULTIPLY        reduce using rule 57 (N -> ID saveID .)
    DIVIDE          reduce using rule 57 (N -> ID saveID .)
    PLUS            reduce using rule 57 (N -> ID saveID .)
    MINUS           reduce using rule 57 (N -> ID saveID .)
    LET             reduce using rule 57 (N -> ID saveID .)
    DIM             reduce using rule 57 (N -> ID saveID .)
    IF              reduce using rule 57 (N -> ID saveID .)
    FOR             reduce using rule 57 (N -> ID saveID .)
    WHILE           reduce using rule 57 (N -> ID saveID .)
    REPEAT          reduce using rule 57 (N -> ID saveID .)
    GOSUB           reduce using rule 57 (N -> ID saveID .)
    INPUT           reduce using rule 57 (N -> ID saveID .)
    PRINT           reduce using rule 57 (N -> ID saveID .)
    SUBPROCEDURE    reduce using rule 57 (N -> ID saveID .)
    END             reduce using rule 57 (N -> ID saveID .)
    RETURN          reduce using rule 57 (N -> ID saveID .)
    UNTIL           reduce using rule 57 (N -> ID saveID .)
    ELSE            reduce using rule 57 (N -> ID saveID .)
    EIF             reduce using rule 57 (N -> ID saveID .)
    WEND            reduce using rule 57 (N -> ID saveID .)
    NEXT            reduce using rule 57 (N -> ID saveID .)
    GREATHER        reduce using rule 57 (N -> ID saveID .)
    GREATHEREQUAL   reduce using rule 57 (N -> ID saveID .)
    SMALLER         reduce using rule 57 (N -> ID saveID .)
    SMALLEREQUAL    reduce using rule 57 (N -> ID saveID .)
    NOTEQUAL        reduce using rule 57 (N -> ID saveID .)
    EQUALTO         reduce using rule 57 (N -> ID saveID .)
    error           reduce using rule 57 (N -> ID saveID .)
    CLOSINGPAR      reduce using rule 57 (N -> ID saveID .)
    TO              reduce using rule 57 (N -> ID saveID .)
    CLOSINGBRACKET  reduce using rule 57 (N -> ID saveID .)
    DO              reduce using rule 57 (N -> ID saveID .)


state 63

    (59) N -> ID OPENBRACKET . INTVAL CLOSINGBRACKET
    (60) N -> ID OPENBRACKET . setType Idv CLOSINGBRACKET
    (43) setType -> .

    INTVAL          shift and go to state 91
    ID              reduce using rule 43 (setType -> .)

    setType                        shift and go to state 92

state 64

    (53) P -> P MULTIPLY . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 83
    OPENPAR         shift and go to state 85
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    N                              shift and go to state 93
    cte                            shift and go to state 43

state 65

    (54) P -> P DIVIDE . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 83
    OPENPAR         shift and go to state 85
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    N                              shift and go to state 94
    cte                            shift and go to state 43

state 66

    (58) N -> OPENPAR EA . CLOSINGPAR
    (50) EA -> EA . PLUS P
    (51) EA -> EA . MINUS P
    (46) Ex -> EA .

    CLOSINGPAR      shift and go to state 95
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    GREATHER        reduce using rule 46 (Ex -> EA .)
    GREATHEREQUAL   reduce using rule 46 (Ex -> EA .)
    SMALLER         reduce using rule 46 (Ex -> EA .)
    SMALLEREQUAL    reduce using rule 46 (Ex -> EA .)
    NOTEQUAL        reduce using rule 46 (Ex -> EA .)
    EQUALTO         reduce using rule 46 (Ex -> EA .)
    error           reduce using rule 46 (Ex -> EA .)


state 67

    (56) N -> cte saveID .

    MULTIPLY        reduce using rule 56 (N -> cte saveID .)
    DIVIDE          reduce using rule 56 (N -> cte saveID .)
    PLUS            reduce using rule 56 (N -> cte saveID .)
    MINUS           reduce using rule 56 (N -> cte saveID .)
    LET             reduce using rule 56 (N -> cte saveID .)
    DIM             reduce using rule 56 (N -> cte saveID .)
    IF              reduce using rule 56 (N -> cte saveID .)
    FOR             reduce using rule 56 (N -> cte saveID .)
    WHILE           reduce using rule 56 (N -> cte saveID .)
    REPEAT          reduce using rule 56 (N -> cte saveID .)
    GOSUB           reduce using rule 56 (N -> cte saveID .)
    INPUT           reduce using rule 56 (N -> cte saveID .)
    PRINT           reduce using rule 56 (N -> cte saveID .)
    SUBPROCEDURE    reduce using rule 56 (N -> cte saveID .)
    END             reduce using rule 56 (N -> cte saveID .)
    RETURN          reduce using rule 56 (N -> cte saveID .)
    UNTIL           reduce using rule 56 (N -> cte saveID .)
    ELSE            reduce using rule 56 (N -> cte saveID .)
    EIF             reduce using rule 56 (N -> cte saveID .)
    WEND            reduce using rule 56 (N -> cte saveID .)
    NEXT            reduce using rule 56 (N -> cte saveID .)
    GREATHER        reduce using rule 56 (N -> cte saveID .)
    GREATHEREQUAL   reduce using rule 56 (N -> cte saveID .)
    SMALLER         reduce using rule 56 (N -> cte saveID .)
    SMALLEREQUAL    reduce using rule 56 (N -> cte saveID .)
    NOTEQUAL        reduce using rule 56 (N -> cte saveID .)
    EQUALTO         reduce using rule 56 (N -> cte saveID .)
    error           reduce using rule 56 (N -> cte saveID .)
    CLOSINGPAR      reduce using rule 56 (N -> cte saveID .)
    TO              reduce using rule 56 (N -> cte saveID .)
    CLOSINGBRACKET  reduce using rule 56 (N -> cte saveID .)
    DO              reduce using rule 56 (N -> cte saveID .)


state 68

    (3) V -> DIM setType Idv AS . T Arr
    (8) T -> . INT
    (9) T -> . FLOAT
    (10) T -> . WORD

    INT             shift and go to state 97
    FLOAT           shift and go to state 98
    WORD            shift and go to state 99

    T                              shift and go to state 96

state 69

    (41) Idv -> ID COMA . Idv
    (41) Idv -> . ID COMA Idv
    (42) Idv -> . ID

    ID              shift and go to state 47

    Idv                            shift and go to state 100

state 70

    (1) PROGRAMA -> PROGRAM V M endProgram S END .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM V M endProgram S END .)


state 71

    (11) S -> SUBPROCEDURE ID . fillSub TWOPOINTS M RETURN endProcedure S
    (13) fillSub -> .

    TWOPOINTS       reduce using rule 13 (fillSub -> .)

    fillSub                        shift and go to state 101

state 72

    (19) E -> LET setType Idv EQUALS . Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    Ex                             shift and go to state 102
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 73

    (20) E -> DIM setType Idv AS . T Arr
    (8) T -> . INT
    (9) T -> . FLOAT
    (10) T -> . WORD

    INT             shift and go to state 97
    FLOAT           shift and go to state 98
    WORD            shift and go to state 99

    T                              shift and go to state 103

state 74

    (21) E -> IF EL THEN first_conditional . F Esf EIF final_conditional
    (17) F -> . E F
    (18) F -> . empty
    (19) E -> . LET setType Idv EQUALS Ex
    (20) E -> . DIM setType Idv AS T Arr
    (21) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (22) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (23) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (24) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (25) E -> . GOSUB ID
    (26) E -> . INPUT IDEx
    (27) E -> . PRINT Ex
    (78) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    ELSE            reduce using rule 78 (empty -> .)
    EIF             reduce using rule 78 (empty -> .)

    F                              shift and go to state 104
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 75

    (66) EL -> OPENPAR O CLOSINGPAR .
    (67) EL -> OPENPAR O CLOSINGPAR . OL EL
    (68) OL -> . AND
    (69) OL -> . OR
    (70) OL -> . NOT

    THEN            reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    LET             reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    DIM             reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    IF              reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    FOR             reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    WHILE           reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    REPEAT          reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    GOSUB           reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    INPUT           reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    PRINT           reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    SUBPROCEDURE    reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    END             reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    RETURN          reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    UNTIL           reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    ELSE            reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    EIF             reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    WEND            reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    NEXT            reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    GREATHER        reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    GREATHEREQUAL   reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    SMALLER         reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    SMALLEREQUAL    reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    NOTEQUAL        reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    EQUALTO         reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    error           reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    DO              reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    CLOSINGPAR      reduce using rule 66 (EL -> OPENPAR O CLOSINGPAR .)
    AND             shift and go to state 106
    OR              shift and go to state 107
    NOT             shift and go to state 108

    OL                             shift and go to state 105

state 76

    (71) O -> Ex GREATHER . Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    Ex                             shift and go to state 109
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 77

    (72) O -> Ex GREATHEREQUAL . Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    Ex                             shift and go to state 110
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 78

    (73) O -> Ex SMALLER . Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    Ex                             shift and go to state 111
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 79

    (74) O -> Ex SMALLEREQUAL . Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    Ex                             shift and go to state 112
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 80

    (75) O -> Ex NOTEQUAL . Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    Ex                             shift and go to state 113
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 81

    (76) O -> Ex EQUALTO . Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    Ex                             shift and go to state 114
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 82

    (77) O -> Ex error . Ex
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    Ex                             shift and go to state 115
    EA                             shift and go to state 37
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 83

    (57) N -> ID . saveID
    (59) N -> ID . OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> ID . OPENBRACKET setType Idv CLOSINGBRACKET
    (61) saveID -> .

    OPENBRACKET     shift and go to state 63
    MULTIPLY        reduce using rule 61 (saveID -> .)
    DIVIDE          reduce using rule 61 (saveID -> .)
    PLUS            reduce using rule 61 (saveID -> .)
    MINUS           reduce using rule 61 (saveID -> .)
    TO              reduce using rule 61 (saveID -> .)
    LET             reduce using rule 61 (saveID -> .)
    DIM             reduce using rule 61 (saveID -> .)
    IF              reduce using rule 61 (saveID -> .)
    FOR             reduce using rule 61 (saveID -> .)
    WHILE           reduce using rule 61 (saveID -> .)
    REPEAT          reduce using rule 61 (saveID -> .)
    GOSUB           reduce using rule 61 (saveID -> .)
    INPUT           reduce using rule 61 (saveID -> .)
    PRINT           reduce using rule 61 (saveID -> .)
    SUBPROCEDURE    reduce using rule 61 (saveID -> .)
    END             reduce using rule 61 (saveID -> .)
    RETURN          reduce using rule 61 (saveID -> .)
    UNTIL           reduce using rule 61 (saveID -> .)
    ELSE            reduce using rule 61 (saveID -> .)
    EIF             reduce using rule 61 (saveID -> .)
    WEND            reduce using rule 61 (saveID -> .)
    NEXT            reduce using rule 61 (saveID -> .)
    GREATHER        reduce using rule 61 (saveID -> .)
    GREATHEREQUAL   reduce using rule 61 (saveID -> .)
    SMALLER         reduce using rule 61 (saveID -> .)
    SMALLEREQUAL    reduce using rule 61 (saveID -> .)
    NOTEQUAL        reduce using rule 61 (saveID -> .)
    EQUALTO         reduce using rule 61 (saveID -> .)
    error           reduce using rule 61 (saveID -> .)
    CLOSINGPAR      reduce using rule 61 (saveID -> .)
    CLOSINGBRACKET  reduce using rule 61 (saveID -> .)
    DO              reduce using rule 61 (saveID -> .)

    saveID                         shift and go to state 62

state 84

    (22) E -> FOR ID EQUALS EA . for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (50) EA -> EA . PLUS P
    (51) EA -> EA . MINUS P
    (28) for_assignation -> .

    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TO              reduce using rule 28 (for_assignation -> .)

    for_assignation                shift and go to state 116

state 85

    (58) N -> OPENPAR . EA CLOSINGPAR
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 83
    OPENPAR         shift and go to state 85
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    EA                             shift and go to state 117
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 86

    (23) E -> WHILE while_first_conditional EL DO . while_second_conditional F WEND while_final_conditional
    (34) while_second_conditional -> .

    LET             reduce using rule 34 (while_second_conditional -> .)
    DIM             reduce using rule 34 (while_second_conditional -> .)
    IF              reduce using rule 34 (while_second_conditional -> .)
    FOR             reduce using rule 34 (while_second_conditional -> .)
    WHILE           reduce using rule 34 (while_second_conditional -> .)
    REPEAT          reduce using rule 34 (while_second_conditional -> .)
    GOSUB           reduce using rule 34 (while_second_conditional -> .)
    INPUT           reduce using rule 34 (while_second_conditional -> .)
    PRINT           reduce using rule 34 (while_second_conditional -> .)
    WEND            reduce using rule 34 (while_second_conditional -> .)

    while_second_conditional       shift and go to state 118

state 87

    (24) E -> REPEAT while_first_conditional F UNTIL . EL repeat_conditional
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 119

state 88

    (45) IDEx -> ID OPENBRACKET setType . Idv CLOSINGBRACKET
    (41) Idv -> . ID COMA Idv
    (42) Idv -> . ID

    ID              shift and go to state 47

    Idv                            shift and go to state 120

state 89

    (50) EA -> EA PLUS P .
    (53) P -> P . MULTIPLY N
    (54) P -> P . DIVIDE N

    PLUS            reduce using rule 50 (EA -> EA PLUS P .)
    MINUS           reduce using rule 50 (EA -> EA PLUS P .)
    LET             reduce using rule 50 (EA -> EA PLUS P .)
    DIM             reduce using rule 50 (EA -> EA PLUS P .)
    IF              reduce using rule 50 (EA -> EA PLUS P .)
    FOR             reduce using rule 50 (EA -> EA PLUS P .)
    WHILE           reduce using rule 50 (EA -> EA PLUS P .)
    REPEAT          reduce using rule 50 (EA -> EA PLUS P .)
    GOSUB           reduce using rule 50 (EA -> EA PLUS P .)
    INPUT           reduce using rule 50 (EA -> EA PLUS P .)
    PRINT           reduce using rule 50 (EA -> EA PLUS P .)
    SUBPROCEDURE    reduce using rule 50 (EA -> EA PLUS P .)
    END             reduce using rule 50 (EA -> EA PLUS P .)
    RETURN          reduce using rule 50 (EA -> EA PLUS P .)
    UNTIL           reduce using rule 50 (EA -> EA PLUS P .)
    ELSE            reduce using rule 50 (EA -> EA PLUS P .)
    EIF             reduce using rule 50 (EA -> EA PLUS P .)
    WEND            reduce using rule 50 (EA -> EA PLUS P .)
    NEXT            reduce using rule 50 (EA -> EA PLUS P .)
    GREATHER        reduce using rule 50 (EA -> EA PLUS P .)
    GREATHEREQUAL   reduce using rule 50 (EA -> EA PLUS P .)
    SMALLER         reduce using rule 50 (EA -> EA PLUS P .)
    SMALLEREQUAL    reduce using rule 50 (EA -> EA PLUS P .)
    NOTEQUAL        reduce using rule 50 (EA -> EA PLUS P .)
    EQUALTO         reduce using rule 50 (EA -> EA PLUS P .)
    error           reduce using rule 50 (EA -> EA PLUS P .)
    CLOSINGPAR      reduce using rule 50 (EA -> EA PLUS P .)
    TO              reduce using rule 50 (EA -> EA PLUS P .)
    CLOSINGBRACKET  reduce using rule 50 (EA -> EA PLUS P .)
    DO              reduce using rule 50 (EA -> EA PLUS P .)
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65


state 90

    (51) EA -> EA MINUS P .
    (53) P -> P . MULTIPLY N
    (54) P -> P . DIVIDE N

    PLUS            reduce using rule 51 (EA -> EA MINUS P .)
    MINUS           reduce using rule 51 (EA -> EA MINUS P .)
    LET             reduce using rule 51 (EA -> EA MINUS P .)
    DIM             reduce using rule 51 (EA -> EA MINUS P .)
    IF              reduce using rule 51 (EA -> EA MINUS P .)
    FOR             reduce using rule 51 (EA -> EA MINUS P .)
    WHILE           reduce using rule 51 (EA -> EA MINUS P .)
    REPEAT          reduce using rule 51 (EA -> EA MINUS P .)
    GOSUB           reduce using rule 51 (EA -> EA MINUS P .)
    INPUT           reduce using rule 51 (EA -> EA MINUS P .)
    PRINT           reduce using rule 51 (EA -> EA MINUS P .)
    SUBPROCEDURE    reduce using rule 51 (EA -> EA MINUS P .)
    END             reduce using rule 51 (EA -> EA MINUS P .)
    RETURN          reduce using rule 51 (EA -> EA MINUS P .)
    UNTIL           reduce using rule 51 (EA -> EA MINUS P .)
    ELSE            reduce using rule 51 (EA -> EA MINUS P .)
    EIF             reduce using rule 51 (EA -> EA MINUS P .)
    WEND            reduce using rule 51 (EA -> EA MINUS P .)
    NEXT            reduce using rule 51 (EA -> EA MINUS P .)
    GREATHER        reduce using rule 51 (EA -> EA MINUS P .)
    GREATHEREQUAL   reduce using rule 51 (EA -> EA MINUS P .)
    SMALLER         reduce using rule 51 (EA -> EA MINUS P .)
    SMALLEREQUAL    reduce using rule 51 (EA -> EA MINUS P .)
    NOTEQUAL        reduce using rule 51 (EA -> EA MINUS P .)
    EQUALTO         reduce using rule 51 (EA -> EA MINUS P .)
    error           reduce using rule 51 (EA -> EA MINUS P .)
    CLOSINGPAR      reduce using rule 51 (EA -> EA MINUS P .)
    TO              reduce using rule 51 (EA -> EA MINUS P .)
    CLOSINGBRACKET  reduce using rule 51 (EA -> EA MINUS P .)
    DO              reduce using rule 51 (EA -> EA MINUS P .)
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65


state 91

    (59) N -> ID OPENBRACKET INTVAL . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 121


state 92

    (60) N -> ID OPENBRACKET setType . Idv CLOSINGBRACKET
    (41) Idv -> . ID COMA Idv
    (42) Idv -> . ID

    ID              shift and go to state 47

    Idv                            shift and go to state 122

state 93

    (53) P -> P MULTIPLY N .

    MULTIPLY        reduce using rule 53 (P -> P MULTIPLY N .)
    DIVIDE          reduce using rule 53 (P -> P MULTIPLY N .)
    PLUS            reduce using rule 53 (P -> P MULTIPLY N .)
    MINUS           reduce using rule 53 (P -> P MULTIPLY N .)
    LET             reduce using rule 53 (P -> P MULTIPLY N .)
    DIM             reduce using rule 53 (P -> P MULTIPLY N .)
    IF              reduce using rule 53 (P -> P MULTIPLY N .)
    FOR             reduce using rule 53 (P -> P MULTIPLY N .)
    WHILE           reduce using rule 53 (P -> P MULTIPLY N .)
    REPEAT          reduce using rule 53 (P -> P MULTIPLY N .)
    GOSUB           reduce using rule 53 (P -> P MULTIPLY N .)
    INPUT           reduce using rule 53 (P -> P MULTIPLY N .)
    PRINT           reduce using rule 53 (P -> P MULTIPLY N .)
    SUBPROCEDURE    reduce using rule 53 (P -> P MULTIPLY N .)
    END             reduce using rule 53 (P -> P MULTIPLY N .)
    RETURN          reduce using rule 53 (P -> P MULTIPLY N .)
    UNTIL           reduce using rule 53 (P -> P MULTIPLY N .)
    ELSE            reduce using rule 53 (P -> P MULTIPLY N .)
    EIF             reduce using rule 53 (P -> P MULTIPLY N .)
    WEND            reduce using rule 53 (P -> P MULTIPLY N .)
    NEXT            reduce using rule 53 (P -> P MULTIPLY N .)
    GREATHER        reduce using rule 53 (P -> P MULTIPLY N .)
    GREATHEREQUAL   reduce using rule 53 (P -> P MULTIPLY N .)
    SMALLER         reduce using rule 53 (P -> P MULTIPLY N .)
    SMALLEREQUAL    reduce using rule 53 (P -> P MULTIPLY N .)
    NOTEQUAL        reduce using rule 53 (P -> P MULTIPLY N .)
    EQUALTO         reduce using rule 53 (P -> P MULTIPLY N .)
    error           reduce using rule 53 (P -> P MULTIPLY N .)
    CLOSINGPAR      reduce using rule 53 (P -> P MULTIPLY N .)
    TO              reduce using rule 53 (P -> P MULTIPLY N .)
    CLOSINGBRACKET  reduce using rule 53 (P -> P MULTIPLY N .)
    DO              reduce using rule 53 (P -> P MULTIPLY N .)


state 94

    (54) P -> P DIVIDE N .

    MULTIPLY        reduce using rule 54 (P -> P DIVIDE N .)
    DIVIDE          reduce using rule 54 (P -> P DIVIDE N .)
    PLUS            reduce using rule 54 (P -> P DIVIDE N .)
    MINUS           reduce using rule 54 (P -> P DIVIDE N .)
    LET             reduce using rule 54 (P -> P DIVIDE N .)
    DIM             reduce using rule 54 (P -> P DIVIDE N .)
    IF              reduce using rule 54 (P -> P DIVIDE N .)
    FOR             reduce using rule 54 (P -> P DIVIDE N .)
    WHILE           reduce using rule 54 (P -> P DIVIDE N .)
    REPEAT          reduce using rule 54 (P -> P DIVIDE N .)
    GOSUB           reduce using rule 54 (P -> P DIVIDE N .)
    INPUT           reduce using rule 54 (P -> P DIVIDE N .)
    PRINT           reduce using rule 54 (P -> P DIVIDE N .)
    SUBPROCEDURE    reduce using rule 54 (P -> P DIVIDE N .)
    END             reduce using rule 54 (P -> P DIVIDE N .)
    RETURN          reduce using rule 54 (P -> P DIVIDE N .)
    UNTIL           reduce using rule 54 (P -> P DIVIDE N .)
    ELSE            reduce using rule 54 (P -> P DIVIDE N .)
    EIF             reduce using rule 54 (P -> P DIVIDE N .)
    WEND            reduce using rule 54 (P -> P DIVIDE N .)
    NEXT            reduce using rule 54 (P -> P DIVIDE N .)
    GREATHER        reduce using rule 54 (P -> P DIVIDE N .)
    GREATHEREQUAL   reduce using rule 54 (P -> P DIVIDE N .)
    SMALLER         reduce using rule 54 (P -> P DIVIDE N .)
    SMALLEREQUAL    reduce using rule 54 (P -> P DIVIDE N .)
    NOTEQUAL        reduce using rule 54 (P -> P DIVIDE N .)
    EQUALTO         reduce using rule 54 (P -> P DIVIDE N .)
    error           reduce using rule 54 (P -> P DIVIDE N .)
    CLOSINGPAR      reduce using rule 54 (P -> P DIVIDE N .)
    TO              reduce using rule 54 (P -> P DIVIDE N .)
    CLOSINGBRACKET  reduce using rule 54 (P -> P DIVIDE N .)
    DO              reduce using rule 54 (P -> P DIVIDE N .)


state 95

    (58) N -> OPENPAR EA CLOSINGPAR .

    MULTIPLY        reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    DIVIDE          reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    PLUS            reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    MINUS           reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    LET             reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    DIM             reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    IF              reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    FOR             reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    WHILE           reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    REPEAT          reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    GOSUB           reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    INPUT           reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    PRINT           reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    SUBPROCEDURE    reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    END             reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    RETURN          reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    UNTIL           reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    ELSE            reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    EIF             reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    WEND            reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    NEXT            reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    GREATHER        reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    GREATHEREQUAL   reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    SMALLER         reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    SMALLEREQUAL    reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    NOTEQUAL        reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    EQUALTO         reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    error           reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    CLOSINGPAR      reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    TO              reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    CLOSINGBRACKET  reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)
    DO              reduce using rule 58 (N -> OPENPAR EA CLOSINGPAR .)


state 96

    (3) V -> DIM setType Idv AS T . Arr
    (5) Arr -> . OPENBRACKET EA CLOSINGBRACKET Arr
    (6) Arr -> . OPENBRACKET ID CLOSINGBRACKET Arr
    (7) Arr -> . empty
    (78) empty -> .

    OPENBRACKET     shift and go to state 124
    LET             reduce using rule 78 (empty -> .)
    DIM             reduce using rule 78 (empty -> .)
    IF              reduce using rule 78 (empty -> .)
    FOR             reduce using rule 78 (empty -> .)
    WHILE           reduce using rule 78 (empty -> .)
    REPEAT          reduce using rule 78 (empty -> .)
    GOSUB           reduce using rule 78 (empty -> .)
    INPUT           reduce using rule 78 (empty -> .)
    PRINT           reduce using rule 78 (empty -> .)
    SUBPROCEDURE    reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)

    Arr                            shift and go to state 123
    empty                          shift and go to state 125

state 97

    (8) T -> INT .

    OPENBRACKET     reduce using rule 8 (T -> INT .)
    LET             reduce using rule 8 (T -> INT .)
    DIM             reduce using rule 8 (T -> INT .)
    IF              reduce using rule 8 (T -> INT .)
    FOR             reduce using rule 8 (T -> INT .)
    WHILE           reduce using rule 8 (T -> INT .)
    REPEAT          reduce using rule 8 (T -> INT .)
    GOSUB           reduce using rule 8 (T -> INT .)
    INPUT           reduce using rule 8 (T -> INT .)
    PRINT           reduce using rule 8 (T -> INT .)
    SUBPROCEDURE    reduce using rule 8 (T -> INT .)
    END             reduce using rule 8 (T -> INT .)
    RETURN          reduce using rule 8 (T -> INT .)
    UNTIL           reduce using rule 8 (T -> INT .)
    ELSE            reduce using rule 8 (T -> INT .)
    EIF             reduce using rule 8 (T -> INT .)
    WEND            reduce using rule 8 (T -> INT .)
    NEXT            reduce using rule 8 (T -> INT .)


state 98

    (9) T -> FLOAT .

    OPENBRACKET     reduce using rule 9 (T -> FLOAT .)
    LET             reduce using rule 9 (T -> FLOAT .)
    DIM             reduce using rule 9 (T -> FLOAT .)
    IF              reduce using rule 9 (T -> FLOAT .)
    FOR             reduce using rule 9 (T -> FLOAT .)
    WHILE           reduce using rule 9 (T -> FLOAT .)
    REPEAT          reduce using rule 9 (T -> FLOAT .)
    GOSUB           reduce using rule 9 (T -> FLOAT .)
    INPUT           reduce using rule 9 (T -> FLOAT .)
    PRINT           reduce using rule 9 (T -> FLOAT .)
    SUBPROCEDURE    reduce using rule 9 (T -> FLOAT .)
    END             reduce using rule 9 (T -> FLOAT .)
    RETURN          reduce using rule 9 (T -> FLOAT .)
    UNTIL           reduce using rule 9 (T -> FLOAT .)
    ELSE            reduce using rule 9 (T -> FLOAT .)
    EIF             reduce using rule 9 (T -> FLOAT .)
    WEND            reduce using rule 9 (T -> FLOAT .)
    NEXT            reduce using rule 9 (T -> FLOAT .)


state 99

    (10) T -> WORD .

    OPENBRACKET     reduce using rule 10 (T -> WORD .)
    LET             reduce using rule 10 (T -> WORD .)
    DIM             reduce using rule 10 (T -> WORD .)
    IF              reduce using rule 10 (T -> WORD .)
    FOR             reduce using rule 10 (T -> WORD .)
    WHILE           reduce using rule 10 (T -> WORD .)
    REPEAT          reduce using rule 10 (T -> WORD .)
    GOSUB           reduce using rule 10 (T -> WORD .)
    INPUT           reduce using rule 10 (T -> WORD .)
    PRINT           reduce using rule 10 (T -> WORD .)
    SUBPROCEDURE    reduce using rule 10 (T -> WORD .)
    END             reduce using rule 10 (T -> WORD .)
    RETURN          reduce using rule 10 (T -> WORD .)
    UNTIL           reduce using rule 10 (T -> WORD .)
    ELSE            reduce using rule 10 (T -> WORD .)
    EIF             reduce using rule 10 (T -> WORD .)
    WEND            reduce using rule 10 (T -> WORD .)
    NEXT            reduce using rule 10 (T -> WORD .)


state 100

    (41) Idv -> ID COMA Idv .

    AS              reduce using rule 41 (Idv -> ID COMA Idv .)
    EQUALS          reduce using rule 41 (Idv -> ID COMA Idv .)
    CLOSINGBRACKET  reduce using rule 41 (Idv -> ID COMA Idv .)


state 101

    (11) S -> SUBPROCEDURE ID fillSub . TWOPOINTS M RETURN endProcedure S

    TWOPOINTS       shift and go to state 126


state 102

    (19) E -> LET setType Idv EQUALS Ex .

    LET             reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    DIM             reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    IF              reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    FOR             reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    WHILE           reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    REPEAT          reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    GOSUB           reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    INPUT           reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    PRINT           reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    SUBPROCEDURE    reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    END             reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    RETURN          reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    UNTIL           reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    ELSE            reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    EIF             reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    WEND            reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)
    NEXT            reduce using rule 19 (E -> LET setType Idv EQUALS Ex .)


state 103

    (20) E -> DIM setType Idv AS T . Arr
    (5) Arr -> . OPENBRACKET EA CLOSINGBRACKET Arr
    (6) Arr -> . OPENBRACKET ID CLOSINGBRACKET Arr
    (7) Arr -> . empty
    (78) empty -> .

    OPENBRACKET     shift and go to state 124
    LET             reduce using rule 78 (empty -> .)
    DIM             reduce using rule 78 (empty -> .)
    IF              reduce using rule 78 (empty -> .)
    FOR             reduce using rule 78 (empty -> .)
    WHILE           reduce using rule 78 (empty -> .)
    REPEAT          reduce using rule 78 (empty -> .)
    GOSUB           reduce using rule 78 (empty -> .)
    INPUT           reduce using rule 78 (empty -> .)
    PRINT           reduce using rule 78 (empty -> .)
    SUBPROCEDURE    reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    RETURN          reduce using rule 78 (empty -> .)
    UNTIL           reduce using rule 78 (empty -> .)
    ELSE            reduce using rule 78 (empty -> .)
    EIF             reduce using rule 78 (empty -> .)
    WEND            reduce using rule 78 (empty -> .)
    NEXT            reduce using rule 78 (empty -> .)

    Arr                            shift and go to state 127
    empty                          shift and go to state 125

state 104

    (21) E -> IF EL THEN first_conditional F . Esf EIF final_conditional
    (39) Esf -> . ELSE second_conditional F
    (40) Esf -> . empty
    (78) empty -> .

    ELSE            shift and go to state 129
    EIF             reduce using rule 78 (empty -> .)

    Esf                            shift and go to state 128
    empty                          shift and go to state 130

state 105

    (67) EL -> OPENPAR O CLOSINGPAR OL . EL
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 29

    EL                             shift and go to state 131

state 106

    (68) OL -> AND .

    TRUE            reduce using rule 68 (OL -> AND .)
    FALSE           reduce using rule 68 (OL -> AND .)
    OPENPAR         reduce using rule 68 (OL -> AND .)


state 107

    (69) OL -> OR .

    TRUE            reduce using rule 69 (OL -> OR .)
    FALSE           reduce using rule 69 (OL -> OR .)
    OPENPAR         reduce using rule 69 (OL -> OR .)


state 108

    (70) OL -> NOT .

    TRUE            reduce using rule 70 (OL -> NOT .)
    FALSE           reduce using rule 70 (OL -> NOT .)
    OPENPAR         reduce using rule 70 (OL -> NOT .)


state 109

    (71) O -> Ex GREATHER Ex .

    CLOSINGPAR      reduce using rule 71 (O -> Ex GREATHER Ex .)


state 110

    (72) O -> Ex GREATHEREQUAL Ex .

    CLOSINGPAR      reduce using rule 72 (O -> Ex GREATHEREQUAL Ex .)


state 111

    (73) O -> Ex SMALLER Ex .

    CLOSINGPAR      reduce using rule 73 (O -> Ex SMALLER Ex .)


state 112

    (74) O -> Ex SMALLEREQUAL Ex .

    CLOSINGPAR      reduce using rule 74 (O -> Ex SMALLEREQUAL Ex .)


state 113

    (75) O -> Ex NOTEQUAL Ex .

    CLOSINGPAR      reduce using rule 75 (O -> Ex NOTEQUAL Ex .)


state 114

    (76) O -> Ex EQUALTO Ex .

    CLOSINGPAR      reduce using rule 76 (O -> Ex EQUALTO Ex .)


state 115

    (77) O -> Ex error Ex .

    CLOSINGPAR      reduce using rule 77 (O -> Ex error Ex .)


state 116

    (22) E -> FOR ID EQUALS EA for_assignation . TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end

    TO              shift and go to state 132


state 117

    (58) N -> OPENPAR EA . CLOSINGPAR
    (50) EA -> EA . PLUS P
    (51) EA -> EA . MINUS P

    CLOSINGPAR      shift and go to state 95
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61


state 118

    (23) E -> WHILE while_first_conditional EL DO while_second_conditional . F WEND while_final_conditional
    (17) F -> . E F
    (18) F -> . empty
    (19) E -> . LET setType Idv EQUALS Ex
    (20) E -> . DIM setType Idv AS T Arr
    (21) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (22) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (23) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (24) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (25) E -> . GOSUB ID
    (26) E -> . INPUT IDEx
    (27) E -> . PRINT Ex
    (78) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    WEND            reduce using rule 78 (empty -> .)

    F                              shift and go to state 133
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 119

    (24) E -> REPEAT while_first_conditional F UNTIL EL . repeat_conditional
    (32) repeat_conditional -> .

    LET             reduce using rule 32 (repeat_conditional -> .)
    DIM             reduce using rule 32 (repeat_conditional -> .)
    IF              reduce using rule 32 (repeat_conditional -> .)
    FOR             reduce using rule 32 (repeat_conditional -> .)
    WHILE           reduce using rule 32 (repeat_conditional -> .)
    REPEAT          reduce using rule 32 (repeat_conditional -> .)
    GOSUB           reduce using rule 32 (repeat_conditional -> .)
    INPUT           reduce using rule 32 (repeat_conditional -> .)
    PRINT           reduce using rule 32 (repeat_conditional -> .)
    SUBPROCEDURE    reduce using rule 32 (repeat_conditional -> .)
    END             reduce using rule 32 (repeat_conditional -> .)
    RETURN          reduce using rule 32 (repeat_conditional -> .)
    UNTIL           reduce using rule 32 (repeat_conditional -> .)
    ELSE            reduce using rule 32 (repeat_conditional -> .)
    EIF             reduce using rule 32 (repeat_conditional -> .)
    WEND            reduce using rule 32 (repeat_conditional -> .)
    NEXT            reduce using rule 32 (repeat_conditional -> .)

    repeat_conditional             shift and go to state 134

state 120

    (45) IDEx -> ID OPENBRACKET setType Idv . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 135


state 121

    (59) N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .

    MULTIPLY        reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    DIVIDE          reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    PLUS            reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    MINUS           reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    LET             reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    DIM             reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    IF              reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    FOR             reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    WHILE           reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    REPEAT          reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    GOSUB           reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    INPUT           reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    PRINT           reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    END             reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    RETURN          reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    UNTIL           reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    ELSE            reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    EIF             reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    WEND            reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    NEXT            reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    GREATHER        reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    GREATHEREQUAL   reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    SMALLER         reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    SMALLEREQUAL    reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    NOTEQUAL        reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    EQUALTO         reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    error           reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    CLOSINGPAR      reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    TO              reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    CLOSINGBRACKET  reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)
    DO              reduce using rule 59 (N -> ID OPENBRACKET INTVAL CLOSINGBRACKET .)


state 122

    (60) N -> ID OPENBRACKET setType Idv . CLOSINGBRACKET

    CLOSINGBRACKET  shift and go to state 136


state 123

    (3) V -> DIM setType Idv AS T Arr .

    LET             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    DIM             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    IF              reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    FOR             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    WHILE           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    REPEAT          reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    GOSUB           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    INPUT           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    PRINT           reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    SUBPROCEDURE    reduce using rule 3 (V -> DIM setType Idv AS T Arr .)
    END             reduce using rule 3 (V -> DIM setType Idv AS T Arr .)


state 124

    (5) Arr -> OPENBRACKET . EA CLOSINGBRACKET Arr
    (6) Arr -> OPENBRACKET . ID CLOSINGBRACKET Arr
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 138
    OPENPAR         shift and go to state 85
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    EA                             shift and go to state 137
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 125

    (7) Arr -> empty .

    LET             reduce using rule 7 (Arr -> empty .)
    DIM             reduce using rule 7 (Arr -> empty .)
    IF              reduce using rule 7 (Arr -> empty .)
    FOR             reduce using rule 7 (Arr -> empty .)
    WHILE           reduce using rule 7 (Arr -> empty .)
    REPEAT          reduce using rule 7 (Arr -> empty .)
    GOSUB           reduce using rule 7 (Arr -> empty .)
    INPUT           reduce using rule 7 (Arr -> empty .)
    PRINT           reduce using rule 7 (Arr -> empty .)
    SUBPROCEDURE    reduce using rule 7 (Arr -> empty .)
    END             reduce using rule 7 (Arr -> empty .)
    RETURN          reduce using rule 7 (Arr -> empty .)
    UNTIL           reduce using rule 7 (Arr -> empty .)
    ELSE            reduce using rule 7 (Arr -> empty .)
    EIF             reduce using rule 7 (Arr -> empty .)
    WEND            reduce using rule 7 (Arr -> empty .)
    NEXT            reduce using rule 7 (Arr -> empty .)


state 126

    (11) S -> SUBPROCEDURE ID fillSub TWOPOINTS . M RETURN endProcedure S
    (15) M -> . F M
    (16) M -> . empty
    (17) F -> . E F
    (18) F -> . empty
    (78) empty -> .
    (19) E -> . LET setType Idv EQUALS Ex
    (20) E -> . DIM setType Idv AS T Arr
    (21) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (22) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (23) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (24) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (25) E -> . GOSUB ID
    (26) E -> . INPUT IDEx
    (27) E -> . PRINT Ex

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for DIM resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for GOSUB resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RETURN          reduce using rule 78 (empty -> .)
    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18

  ! LET             [ reduce using rule 78 (empty -> .) ]
  ! DIM             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! GOSUB           [ reduce using rule 78 (empty -> .) ]
  ! INPUT           [ reduce using rule 78 (empty -> .) ]
  ! PRINT           [ reduce using rule 78 (empty -> .) ]

    M                              shift and go to state 139
    F                              shift and go to state 7
    empty                          shift and go to state 8
    E                              shift and go to state 9

state 127

    (20) E -> DIM setType Idv AS T Arr .

    LET             reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    DIM             reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    IF              reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    FOR             reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    WHILE           reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    REPEAT          reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    GOSUB           reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    INPUT           reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    PRINT           reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    SUBPROCEDURE    reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    END             reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    RETURN          reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    UNTIL           reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    ELSE            reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    EIF             reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    WEND            reduce using rule 20 (E -> DIM setType Idv AS T Arr .)
    NEXT            reduce using rule 20 (E -> DIM setType Idv AS T Arr .)


state 128

    (21) E -> IF EL THEN first_conditional F Esf . EIF final_conditional

    EIF             shift and go to state 140


state 129

    (39) Esf -> ELSE . second_conditional F
    (37) second_conditional -> .

    LET             reduce using rule 37 (second_conditional -> .)
    DIM             reduce using rule 37 (second_conditional -> .)
    IF              reduce using rule 37 (second_conditional -> .)
    FOR             reduce using rule 37 (second_conditional -> .)
    WHILE           reduce using rule 37 (second_conditional -> .)
    REPEAT          reduce using rule 37 (second_conditional -> .)
    GOSUB           reduce using rule 37 (second_conditional -> .)
    INPUT           reduce using rule 37 (second_conditional -> .)
    PRINT           reduce using rule 37 (second_conditional -> .)
    EIF             reduce using rule 37 (second_conditional -> .)

    second_conditional             shift and go to state 141

state 130

    (40) Esf -> empty .

    EIF             reduce using rule 40 (Esf -> empty .)


state 131

    (67) EL -> OPENPAR O CLOSINGPAR OL EL .

    THEN            reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    LET             reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    DIM             reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    IF              reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    FOR             reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    WHILE           reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    REPEAT          reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GOSUB           reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    INPUT           reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    PRINT           reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SUBPROCEDURE    reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    END             reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    RETURN          reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    UNTIL           reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    ELSE            reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    EIF             reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    WEND            reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    NEXT            reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GREATHER        reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    GREATHEREQUAL   reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SMALLER         reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    SMALLEREQUAL    reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    NOTEQUAL        reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    EQUALTO         reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    error           reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    DO              reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)
    CLOSINGPAR      reduce using rule 67 (EL -> OPENPAR O CLOSINGPAR OL EL .)


state 132

    (22) E -> FOR ID EQUALS EA for_assignation TO . Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (46) Ex -> . EA
    (47) Ex -> . EL
    (48) Ex -> . ID
    (50) EA -> . EA PLUS P
    (51) EA -> . EA MINUS P
    (52) EA -> . P
    (64) EL -> . TRUE
    (65) EL -> . FALSE
    (66) EL -> . OPENPAR O CLOSINGPAR
    (67) EL -> . OPENPAR O CLOSINGPAR OL EL
    (53) P -> . P MULTIPLY N
    (54) P -> . P DIVIDE N
    (55) P -> . N
    (56) N -> . cte saveID
    (57) N -> . ID saveID
    (58) N -> . OPENPAR EA CLOSINGPAR
    (59) N -> . ID OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> . ID OPENBRACKET setType Idv CLOSINGBRACKET
    (62) cte -> . INTVAL
    (63) cte -> . FLOATVAL

    ID              shift and go to state 39
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    OPENPAR         shift and go to state 41
    INTVAL          shift and go to state 44
    FLOATVAL        shift and go to state 45

    EA                             shift and go to state 37
    Ex                             shift and go to state 142
    EL                             shift and go to state 38
    P                              shift and go to state 40
    N                              shift and go to state 42
    cte                            shift and go to state 43

state 133

    (23) E -> WHILE while_first_conditional EL DO while_second_conditional F . WEND while_final_conditional

    WEND            shift and go to state 143


state 134

    (24) E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .

    LET             reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    DIM             reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    IF              reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    FOR             reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    WHILE           reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    REPEAT          reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    GOSUB           reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    INPUT           reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    PRINT           reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    SUBPROCEDURE    reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    END             reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    RETURN          reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    UNTIL           reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    ELSE            reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    EIF             reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    WEND            reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)
    NEXT            reduce using rule 24 (E -> REPEAT while_first_conditional F UNTIL EL repeat_conditional .)


state 135

    (45) IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .

    LET             reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    DIM             reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    IF              reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    FOR             reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WHILE           reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    REPEAT          reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GOSUB           reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    INPUT           reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    PRINT           reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    END             reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    RETURN          reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    UNTIL           reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    ELSE            reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    EIF             reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WEND            reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    NEXT            reduce using rule 45 (IDEx -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)


state 136

    (60) N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .

    MULTIPLY        reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    DIVIDE          reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    PLUS            reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    MINUS           reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    LET             reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    DIM             reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    IF              reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    FOR             reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WHILE           reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    REPEAT          reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GOSUB           reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    INPUT           reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    PRINT           reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SUBPROCEDURE    reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    END             reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    RETURN          reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    UNTIL           reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    ELSE            reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    EIF             reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    WEND            reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    NEXT            reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GREATHER        reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    GREATHEREQUAL   reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SMALLER         reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    SMALLEREQUAL    reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    NOTEQUAL        reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    EQUALTO         reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    error           reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    CLOSINGPAR      reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    TO              reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    CLOSINGBRACKET  reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)
    DO              reduce using rule 60 (N -> ID OPENBRACKET setType Idv CLOSINGBRACKET .)


state 137

    (5) Arr -> OPENBRACKET EA . CLOSINGBRACKET Arr
    (50) EA -> EA . PLUS P
    (51) EA -> EA . MINUS P

    CLOSINGBRACKET  shift and go to state 144
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61


state 138

    (6) Arr -> OPENBRACKET ID . CLOSINGBRACKET Arr
    (57) N -> ID . saveID
    (59) N -> ID . OPENBRACKET INTVAL CLOSINGBRACKET
    (60) N -> ID . OPENBRACKET setType Idv CLOSINGBRACKET
    (61) saveID -> .

  ! shift/reduce conflict for CLOSINGBRACKET resolved as shift
    CLOSINGBRACKET  shift and go to state 145
    OPENBRACKET     shift and go to state 63
    MULTIPLY        reduce using rule 61 (saveID -> .)
    DIVIDE          reduce using rule 61 (saveID -> .)
    PLUS            reduce using rule 61 (saveID -> .)
    MINUS           reduce using rule 61 (saveID -> .)

  ! CLOSINGBRACKET  [ reduce using rule 61 (saveID -> .) ]

    saveID                         shift and go to state 62

state 139

    (11) S -> SUBPROCEDURE ID fillSub TWOPOINTS M . RETURN endProcedure S

    RETURN          shift and go to state 146


state 140

    (21) E -> IF EL THEN first_conditional F Esf EIF . final_conditional
    (38) final_conditional -> .

    LET             reduce using rule 38 (final_conditional -> .)
    DIM             reduce using rule 38 (final_conditional -> .)
    IF              reduce using rule 38 (final_conditional -> .)
    FOR             reduce using rule 38 (final_conditional -> .)
    WHILE           reduce using rule 38 (final_conditional -> .)
    REPEAT          reduce using rule 38 (final_conditional -> .)
    GOSUB           reduce using rule 38 (final_conditional -> .)
    INPUT           reduce using rule 38 (final_conditional -> .)
    PRINT           reduce using rule 38 (final_conditional -> .)
    SUBPROCEDURE    reduce using rule 38 (final_conditional -> .)
    END             reduce using rule 38 (final_conditional -> .)
    RETURN          reduce using rule 38 (final_conditional -> .)
    UNTIL           reduce using rule 38 (final_conditional -> .)
    ELSE            reduce using rule 38 (final_conditional -> .)
    EIF             reduce using rule 38 (final_conditional -> .)
    WEND            reduce using rule 38 (final_conditional -> .)
    NEXT            reduce using rule 38 (final_conditional -> .)

    final_conditional              shift and go to state 147

state 141

    (39) Esf -> ELSE second_conditional . F
    (17) F -> . E F
    (18) F -> . empty
    (19) E -> . LET setType Idv EQUALS Ex
    (20) E -> . DIM setType Idv AS T Arr
    (21) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (22) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (23) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (24) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (25) E -> . GOSUB ID
    (26) E -> . INPUT IDEx
    (27) E -> . PRINT Ex
    (78) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    EIF             reduce using rule 78 (empty -> .)

    F                              shift and go to state 148
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 142

    (22) E -> FOR ID EQUALS EA for_assignation TO Ex . for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (29) for_conditional -> .

    DO              reduce using rule 29 (for_conditional -> .)

    for_conditional                shift and go to state 149

state 143

    (23) E -> WHILE while_first_conditional EL DO while_second_conditional F WEND . while_final_conditional
    (35) while_final_conditional -> .

    LET             reduce using rule 35 (while_final_conditional -> .)
    DIM             reduce using rule 35 (while_final_conditional -> .)
    IF              reduce using rule 35 (while_final_conditional -> .)
    FOR             reduce using rule 35 (while_final_conditional -> .)
    WHILE           reduce using rule 35 (while_final_conditional -> .)
    REPEAT          reduce using rule 35 (while_final_conditional -> .)
    GOSUB           reduce using rule 35 (while_final_conditional -> .)
    INPUT           reduce using rule 35 (while_final_conditional -> .)
    PRINT           reduce using rule 35 (while_final_conditional -> .)
    SUBPROCEDURE    reduce using rule 35 (while_final_conditional -> .)
    END             reduce using rule 35 (while_final_conditional -> .)
    RETURN          reduce using rule 35 (while_final_conditional -> .)
    UNTIL           reduce using rule 35 (while_final_conditional -> .)
    ELSE            reduce using rule 35 (while_final_conditional -> .)
    EIF             reduce using rule 35 (while_final_conditional -> .)
    WEND            reduce using rule 35 (while_final_conditional -> .)
    NEXT            reduce using rule 35 (while_final_conditional -> .)

    while_final_conditional        shift and go to state 150

state 144

    (5) Arr -> OPENBRACKET EA CLOSINGBRACKET . Arr
    (5) Arr -> . OPENBRACKET EA CLOSINGBRACKET Arr
    (6) Arr -> . OPENBRACKET ID CLOSINGBRACKET Arr
    (7) Arr -> . empty
    (78) empty -> .

    OPENBRACKET     shift and go to state 124
    LET             reduce using rule 78 (empty -> .)
    DIM             reduce using rule 78 (empty -> .)
    IF              reduce using rule 78 (empty -> .)
    FOR             reduce using rule 78 (empty -> .)
    WHILE           reduce using rule 78 (empty -> .)
    REPEAT          reduce using rule 78 (empty -> .)
    GOSUB           reduce using rule 78 (empty -> .)
    INPUT           reduce using rule 78 (empty -> .)
    PRINT           reduce using rule 78 (empty -> .)
    SUBPROCEDURE    reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    RETURN          reduce using rule 78 (empty -> .)
    UNTIL           reduce using rule 78 (empty -> .)
    ELSE            reduce using rule 78 (empty -> .)
    EIF             reduce using rule 78 (empty -> .)
    WEND            reduce using rule 78 (empty -> .)
    NEXT            reduce using rule 78 (empty -> .)

    Arr                            shift and go to state 151
    empty                          shift and go to state 125

state 145

    (6) Arr -> OPENBRACKET ID CLOSINGBRACKET . Arr
    (5) Arr -> . OPENBRACKET EA CLOSINGBRACKET Arr
    (6) Arr -> . OPENBRACKET ID CLOSINGBRACKET Arr
    (7) Arr -> . empty
    (78) empty -> .

    OPENBRACKET     shift and go to state 124
    LET             reduce using rule 78 (empty -> .)
    DIM             reduce using rule 78 (empty -> .)
    IF              reduce using rule 78 (empty -> .)
    FOR             reduce using rule 78 (empty -> .)
    WHILE           reduce using rule 78 (empty -> .)
    REPEAT          reduce using rule 78 (empty -> .)
    GOSUB           reduce using rule 78 (empty -> .)
    INPUT           reduce using rule 78 (empty -> .)
    PRINT           reduce using rule 78 (empty -> .)
    SUBPROCEDURE    reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    RETURN          reduce using rule 78 (empty -> .)
    UNTIL           reduce using rule 78 (empty -> .)
    ELSE            reduce using rule 78 (empty -> .)
    EIF             reduce using rule 78 (empty -> .)
    WEND            reduce using rule 78 (empty -> .)
    NEXT            reduce using rule 78 (empty -> .)

    Arr                            shift and go to state 152
    empty                          shift and go to state 125

state 146

    (11) S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN . endProcedure S
    (14) endProcedure -> .

    SUBPROCEDURE    reduce using rule 14 (endProcedure -> .)
    END             reduce using rule 14 (endProcedure -> .)

    endProcedure                   shift and go to state 153

state 147

    (21) E -> IF EL THEN first_conditional F Esf EIF final_conditional .

    LET             reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    DIM             reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    IF              reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    FOR             reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    WHILE           reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    REPEAT          reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    GOSUB           reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    INPUT           reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    PRINT           reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    SUBPROCEDURE    reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    END             reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    RETURN          reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    UNTIL           reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    ELSE            reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    EIF             reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    WEND            reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)
    NEXT            reduce using rule 21 (E -> IF EL THEN first_conditional F Esf EIF final_conditional .)


state 148

    (39) Esf -> ELSE second_conditional F .

    EIF             reduce using rule 39 (Esf -> ELSE second_conditional F .)


state 149

    (22) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional . DO for_save_conditional F NEXT ID for_conditional_end

    DO              shift and go to state 154


state 150

    (23) E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .

    LET             reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    DIM             reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    IF              reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    FOR             reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    WHILE           reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    REPEAT          reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    GOSUB           reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    INPUT           reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    PRINT           reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    SUBPROCEDURE    reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    END             reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    RETURN          reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    UNTIL           reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    ELSE            reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    EIF             reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    WEND            reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)
    NEXT            reduce using rule 23 (E -> WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional .)


state 151

    (5) Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .

    LET             reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    DIM             reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    IF              reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    FOR             reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    WHILE           reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    REPEAT          reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    GOSUB           reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    INPUT           reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    PRINT           reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    SUBPROCEDURE    reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    END             reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    RETURN          reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    UNTIL           reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    ELSE            reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    EIF             reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    WEND            reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)
    NEXT            reduce using rule 5 (Arr -> OPENBRACKET EA CLOSINGBRACKET Arr .)


state 152

    (6) Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .

    LET             reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    DIM             reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    IF              reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    FOR             reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    WHILE           reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    REPEAT          reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    GOSUB           reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    INPUT           reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    PRINT           reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    SUBPROCEDURE    reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    END             reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    RETURN          reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    UNTIL           reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    ELSE            reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    EIF             reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    WEND            reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)
    NEXT            reduce using rule 6 (Arr -> OPENBRACKET ID CLOSINGBRACKET Arr .)


state 153

    (11) S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure . S
    (11) S -> . SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S
    (12) S -> . empty
    (78) empty -> .

    SUBPROCEDURE    shift and go to state 49
    END             reduce using rule 78 (empty -> .)

    S                              shift and go to state 155
    empty                          shift and go to state 50

state 154

    (22) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO . for_save_conditional F NEXT ID for_conditional_end
    (30) for_save_conditional -> .

    LET             reduce using rule 30 (for_save_conditional -> .)
    DIM             reduce using rule 30 (for_save_conditional -> .)
    IF              reduce using rule 30 (for_save_conditional -> .)
    FOR             reduce using rule 30 (for_save_conditional -> .)
    WHILE           reduce using rule 30 (for_save_conditional -> .)
    REPEAT          reduce using rule 30 (for_save_conditional -> .)
    GOSUB           reduce using rule 30 (for_save_conditional -> .)
    INPUT           reduce using rule 30 (for_save_conditional -> .)
    PRINT           reduce using rule 30 (for_save_conditional -> .)
    NEXT            reduce using rule 30 (for_save_conditional -> .)

    for_save_conditional           shift and go to state 156

state 155

    (11) S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S .

    END             reduce using rule 11 (S -> SUBPROCEDURE ID fillSub TWOPOINTS M RETURN endProcedure S .)


state 156

    (22) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional . F NEXT ID for_conditional_end
    (17) F -> . E F
    (18) F -> . empty
    (19) E -> . LET setType Idv EQUALS Ex
    (20) E -> . DIM setType Idv AS T Arr
    (21) E -> . IF EL THEN first_conditional F Esf EIF final_conditional
    (22) E -> . FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end
    (23) E -> . WHILE while_first_conditional EL DO while_second_conditional F WEND while_final_conditional
    (24) E -> . REPEAT while_first_conditional F UNTIL EL repeat_conditional
    (25) E -> . GOSUB ID
    (26) E -> . INPUT IDEx
    (27) E -> . PRINT Ex
    (78) empty -> .

    LET             shift and go to state 10
    DIM             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    GOSUB           shift and go to state 16
    INPUT           shift and go to state 17
    PRINT           shift and go to state 18
    NEXT            reduce using rule 78 (empty -> .)

    F                              shift and go to state 157
    E                              shift and go to state 9
    empty                          shift and go to state 23

state 157

    (22) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F . NEXT ID for_conditional_end

    NEXT            shift and go to state 158


state 158

    (22) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT . ID for_conditional_end

    ID              shift and go to state 159


state 159

    (22) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID . for_conditional_end
    (31) for_conditional_end -> .

    LET             reduce using rule 31 (for_conditional_end -> .)
    DIM             reduce using rule 31 (for_conditional_end -> .)
    IF              reduce using rule 31 (for_conditional_end -> .)
    FOR             reduce using rule 31 (for_conditional_end -> .)
    WHILE           reduce using rule 31 (for_conditional_end -> .)
    REPEAT          reduce using rule 31 (for_conditional_end -> .)
    GOSUB           reduce using rule 31 (for_conditional_end -> .)
    INPUT           reduce using rule 31 (for_conditional_end -> .)
    PRINT           reduce using rule 31 (for_conditional_end -> .)
    SUBPROCEDURE    reduce using rule 31 (for_conditional_end -> .)
    END             reduce using rule 31 (for_conditional_end -> .)
    RETURN          reduce using rule 31 (for_conditional_end -> .)
    UNTIL           reduce using rule 31 (for_conditional_end -> .)
    ELSE            reduce using rule 31 (for_conditional_end -> .)
    EIF             reduce using rule 31 (for_conditional_end -> .)
    WEND            reduce using rule 31 (for_conditional_end -> .)
    NEXT            reduce using rule 31 (for_conditional_end -> .)

    for_conditional_end            shift and go to state 160

state 160

    (22) E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .

    LET             reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    DIM             reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    IF              reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    FOR             reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    WHILE           reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    REPEAT          reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    GOSUB           reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    INPUT           reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    PRINT           reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    SUBPROCEDURE    reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    END             reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    RETURN          reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    UNTIL           reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    ELSE            reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    EIF             reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    WEND            reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)
    NEXT            reduce using rule 22 (E -> FOR ID EQUALS EA for_assignation TO Ex for_conditional DO for_save_conditional F NEXT ID for_conditional_end .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DIM in state 2 resolved as shift
WARNING: shift/reduce conflict for LET in state 3 resolved as shift
WARNING: shift/reduce conflict for DIM in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 3 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 3 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for LET in state 7 resolved as shift
WARNING: shift/reduce conflict for DIM in state 7 resolved as shift
WARNING: shift/reduce conflict for IF in state 7 resolved as shift
WARNING: shift/reduce conflict for FOR in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 7 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 7 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 7 resolved as shift
WARNING: shift/reduce conflict for LET in state 9 resolved as shift
WARNING: shift/reduce conflict for DIM in state 9 resolved as shift
WARNING: shift/reduce conflict for IF in state 9 resolved as shift
WARNING: shift/reduce conflict for FOR in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 9 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 9 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 9 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 9 resolved as shift
WARNING: shift/reduce conflict for LET in state 126 resolved as shift
WARNING: shift/reduce conflict for DIM in state 126 resolved as shift
WARNING: shift/reduce conflict for IF in state 126 resolved as shift
WARNING: shift/reduce conflict for FOR in state 126 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 126 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 126 resolved as shift
WARNING: shift/reduce conflict for GOSUB in state 126 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 126 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 126 resolved as shift
WARNING: shift/reduce conflict for CLOSINGBRACKET in state 138 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (M -> empty)
WARNING: rejected rule (F -> empty) in state 8
WARNING: reduce/reduce conflict in state 39 resolved using rule (Ex -> ID)
WARNING: rejected rule (saveID -> <empty>) in state 39
